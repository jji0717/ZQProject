<!--
Notice: TianShanDef.xml has been preloaded when this configuration file is being parsed, please refer to
        TianShanDef.xml for the common properties

Regular procedures of loading configurations:
  1) When a service starts, read HKEY_LM\Softwares\ZQ Interactive\TianShan\Services\<ServiceName>\configDir, load 
     the common properties if the TianShanDef.xml is opened, if <ServiceName>.xml is successfully opened, jump to 5)
  2) tries HKEY_LM\Softwares\ZQ Interactive\TianShan\Services\configDir, load the common properties if the
     TianShanDef.xml is opened, if <ServiceName>.xml is successfully opened, jump to 5)
  3) tries the dir ..\etc of where the executable is, load the common properties if the TianShanDef.xml is opened,
     if <ServiceName>.xml is successfully opened, jump to 5)
  4) puts an error as system event, say no configuration TianShanService.xml can be opened. Quit the program
  5) reads the <ServiceName>.xml, if there is any XML formatting errors, put an error as system event then quit
     the program
  6) reads the LogFolder in the XML, take it if succeed, otherwise use ..\logs of where the executable is. Open the
     main log file, and immediately put a line including
       a) service name
       b) service version number
       c) the full pathname of <ServiceName>.xml
     as the first log message in the main logfile
  7) continues to populate other configurations
  8) initialize the service and start serving

-->

<TianShan>
	<Definitions src="TianShanDef.xml">
	</Definitions>
	<!-- default configurations for the services of this TianShan deployment -->
	<default>
	
		<!-- The EventChannel service where the services of this TianShan deployment will deliver events to.
		     attributes:
		       endpoint - the ICE endpoint to the EventChannel service
		-->
		<EventChannel endpoint="${PrimeEventChannelEndpoint}" />
		
					
		<!--CrashDump can help devoloper diagnose the program when it crashed
			if you set enable to "1" you must make sure that the path is accessible
			path   - crashdump path
			enabled - 1 to enable crashDump
		 -->
		<CrashDump path="${TianShanCrashDumpDir}" enabled="1"/>

		<!-- The Ice trace log setting for all the services of this TianShan deployment.
		     attributes:
		       enabled       - 1 if the Ice trace is enabled, default "0"
		       logfileSuffix - a suffix of the log filename, i.e. the service Weiwoo's main log file will
		                       be "Weiwoo.log". With a suffix "_ice.log", the ICE trace will be in a
		                       separate logfile "Weiwoo_ice.log" in the same directory
		       level         - the log level of the ice trace log
		       size          - the size that this trace log must roll
		-->
		<IceTrace enabled="1" level="7" size="10240000" />

		<!-- Additional Ice properties if there is any, <prop /> is its sub element
		     attrib of <prop />:
		        name         == the name of the Ice property
		        value        == the value of the Ice property
		-->
		<IceProperties>
			<!-- the following are performance tuning parameters, please don't modify if you are not an expert at them 
			-->
			<serviceProperty name="Ice.Trace.Network"                value="1" />
			<serviceProperty name="Ice.Trace.Protocol"               value="0" />
    			<serviceProperty name="Ice.Trace.Retry"                  value="1" />
			<serviceProperty name="Ice.Trace.Slicing"                value="0" />
			<serviceProperty name="Ice.Warn.Connections"             value="1" />
			<serviceProperty name="Ice.Warn.Endpoints"               value="1" />
			<serviceProperty name="Ice.ACM.Client"                   value="0" />
			<serviceProperty name="Ice.Override.ConnectTimeout"      value="2000" />
			<serviceProperty name="Ice.Override.Timeout"             value="15000" />
			<serviceProperty name="Freeze.Warn.Deadlocks"            value="1" />
			<serviceProperty name="Freeze.Trace.Map"                 value="0" />
			<serviceProperty name="Freeze.Trace.DbEnv"               value="2" />
			<serviceProperty name="Freeze.Trace.Evictor"             value="0" />
			<serviceProperty name="PLInfoStore.ThreadPool.Size"      value="50"/>
			<serviceProperty name="PLInfoStore.ThreadPool.SizeMax"   value="300"/>
			<serviceProperty name="Freeze.Evictor.UseNonmutating" 	 value="1"/>
		</IceProperties>
		
		<!-- The default folder where the services of this TianShan deployment accesses their local
		     databases if it is not defined by their individual configurations
		     attributes:
		       path          - path to the location of database directory, default "../data/"		       
		-->
		<Database path="${TianShanDatabaseDir}" />
		
	</default>
	
	<StreamSmith>
	
		<!-- StreamSmith accept Ice remote API call, but it need a super plugin's help,the plugin is ssm_tianshan.dll 
		     attributes:
			path - superplugin's full path
			enable   - enable superplugin or not, 1 for enable 0 for diable
			eventTimeout - timeout of an event in millisecond if it failed to be sent out
			logEventDetail - if this config is 1, event information will appear in log file
		-->
		<SuperPlugin path="${TianShanHomeDir}\modules\ssm_tianshan.dll" enable="1" eventSinkTimeout="15000" enableShowDetail="1"/>

		<!-- The local bind endpoint that the ContentStore service is serving on
		     attributes:
		       endpoint      - the bind endpoint of this ContentStore service
		       dispatchSize  - the initial thread pool size to dispatch client requests, values in the range 4-20 are acceptable
		       dispatchMax   - the max thread pool size to dispatch client requests
		       uniqueID		 - the  unique streamsmith service id, 
		       					NO white space is allowed
		-->
		<Bind endpoint="tcp -h ${ServerNetIf} -p 10700" dispatchSize="20" dispatchMax="30" uniqueID="${ServerNetIf}"/>

		<!-- Configuration on how the requests are processed
		     attributes:
		       threads   - the size of the thread pool
		-->
		<RequestProcess threads="20" />

		<!-- Configuration on local resources, especially for the standalone mode
		     attributes:
		       configuration - full path to the local resource configuration file at standalone mode
		 -->
		 <LocalResource configuration="" >		
			<!-- Configuration on internal resources, especially for the standalone mode
		     	     attributes:
		     	       defaultSpigotId - If StreamSmith is running at standalone mode, StreamSmith can allocate vtrsm port based on DefaultSpigotID, -1 for all spigot in current node
		 	-->
			<Streamer defaultSpigotId="-1" />
		</LocalResource>
		
		<!-- Log files to publish thru SentryService
		-->
		<PublishedLogs>
			<!-- Log file to publish thru SentryService
		     	     attributes:
		       		path    - full path of the log file
		       		syntax  - the file defines the syntax of the events via the regular expressions
			-->
			<Log path="${TianShanLogDir}\StreamSmith.Log" syntax="${TianShanHomeDir}\etc\syntax.xml" key="StreamSmith" type=""/>
			<Log path="${TianShanLogDir}\MediaServerCS_Event.log" syntax="${TianShanHomeDir}\etc\syntax.xml" key="CSEvents" type=""/>
			
       	</PublishedLogs>
       	<!-- Configuration about the playlist
		     attributes:
		     	timeout - timeout in millseconds when a playlist is unattended at any state other than streaming
		     	keepOnPause - "1" if the playlist will not be expired when it is at the state of pause
		     	progressInterval - the interval in millseconds to scan streaming progress
		     	EOTsize - the edge size in millseconds of the protection edge: End-Of_Tail
		     	delayedCleanup - the delayed time millseconds to clean up the playlist context when it is out of service
		-->
		<Playlist
			timeout="100000"
			keepOnPause="1"
			progressInterval="30000"
			EOTsize="15000" 
			PreLoadTime = "10000"
			delayedCleanup = "150000"
			sessionScanInterval = "66" />
		
		<!--
			Replica :
				groupId : the replica group identifier
				category: for streamsmith , this should be Streamer , DO NOT CHANGE IT
				subscriber:
					endpoint : the streamer replica listener endpoint ,
							   if it's not path manager , DO include servant name in the endpoint string
					updateInterval : default interval in milliseconds, for update replica information to listened
									 If listener do not advise a value for update , this value will be used		   
		-->
		<Replica groupId="${ServerNetIf}" category="Streamer" >
			<subscriber endpoint="ReplicaSubscriber:tcp -h 192.168.81.113 -p 11200" updateInterval="60000" />
		</Replica>
		
		<!-- The database cache
		     attributes:
		       playlistSize  - the size of playlist records to cache, 200 ~ 2000 are acceptable		       
		-->
		<DatabaseCache playlistSize="200" />
		
		<PeformanceTune>
			<!-- CheckpointPeriod :	Every Berkeley DB environment created by Freeze has an associated thread that
									checkpoints this environment every num seconds. If num is less than 0, no checkpoint
									is performed. The default is 120 seconds.
				 DbRecoverFatal	:	If num is set to a value larger than zero, fatal recovery is performed when the environment
									is opened. The default value is 0.
			-->
			<IceFreezeEnviroment 	CheckpointPeriod="240" DbRecoverFatal="1" />
			
			<!-- SavePeriod :		Freeze uses a background thread to save updates to the database. After num milliseconds
									without saving, if any facet is created, modified, or destroyed, this background
									thread wakes up to save these facets. When num is 0, there is no periodic
									saving. The default is 60000.
			SaveSizeTrigger		:	Freeze uses a background thread to save updates to the database. When num is 0
									or positive, as soon as num or more facets have been created, modified, or
									destroyed, this background thread wakes up to save them. When num is negative,
									there is no size trigger. The default is 10.
			-->
			<playlist 				SavePeriod="240" SaveSizeTrigger="1000" />
					
		</PeformanceTune>
			
		<!-- To play a playlist with critical-start-time, the caller may wish to confirm that the play has been started via synchonized invocation
		     This configuration will hold such a sync call until the stream starts pumping.
		     attributes:
		     	enable - "1" if want to hold the play() call until stream starts, otherwise will leave the interval timer to drive based on the critical-start-time
		     	timeout - timeout in millisecond to maximally hold the play() calls
		-->
		<CriticalStartPlayWait enable="1" timeout="3000" />

		<!-- Configurations on default MOTO pre encryption parameters when some of them are not presented thru ItemSetupInfo
		-->
		<MotoPreEncryption cycle1="0" freq1="8" cycle2="15000" freq2="8" />
			
		<Plugin>
		<!--
		StreamSith plugin 's log attribute 
		-->
			<log level="7" fileSize="12040000" buffer="10240" flushTimeout="2" />
		</Plugin>
		
		<SessionMonitor>
		<!--
		SessionMonitor 's log attribute 
		-->
			<log level="7" fileSize="12040000" buffer="10240" flushTimeout="2" />
		</SessionMonitor>
		
		<!-- Configuration about the socket server-side
		     attributes:
		       rtspPort - the RTSP server port to listen
		       maxConnections - the max TCP connections allowed by the server
		       threads - the RTSP server port to listen
		       threadPriority - the RTSP server port to listen
		       debugLevel - the RTSP server port to listen
		       debugDetail - the RTSP server port to listen
		       idleTimeout - the RTSP server port to listen
		       idleScanInterval - the RTSP server port to listen
		-->
		<Response>
			<!-- Configurations on the headers of RTSP responses
		     	     attributes:
		               useLocaltime - use local time instead of GMT if this is set to "1"
			-->			
			<RtspHeader useLocaltime="0"/>
		</Response>
		<SocketServer rtspPort="554" maxConnections="5000" threads="6" threadPriority="2"
			      debugLevel="4" debugDetail="3"
			      idleTimeout="300000" idleScanInterval="500" >
			      
			<!-- Configuration about the secure socket layer (SSL)
		     	     attributes:
		       	        enabled - "1" to enable SSL
		       	        publicKeyFile - the filename of the public key
		       	        privateKeyFile - the filename of the private key
		       	        privatePassword - the password to read the private key
		       	        dhParamFile - the filename of DH parameters
		       	        randFile - the filename of the rand file
			-->
			<SSL 	enabled="0"
				publicKeyFile="server.pem"
				privateKeyFile="server.pem"
				privatePassword="xiao"
				dhParamFile="dhParam.pem"
				randFile="rand.pem" />
			/>
			
			<!-- Configuration about the incoming messages that the socket server receives
		     	     attributes:
		       	        maxLen - the max length of a incoming message
		       	        recvBufSize - the size of the buffer to read the sock connection
			-->
			<IncomingMessage maxLen="32768" recvBufSize="8196" />
		</SocketServer>

		<!-- Configuration about request handlers
		     attributes:
		       defaultHandler - the default RTSP handler
		-->
		<RequestHandler>
			<Application path="basic" handler="MOD"/>
		</RequestHandler>
		
	</StreamSmith>
	<!--
		embeded node conetent store :	
		netId	: content store's netId
		SupportNpVr : if current node support Npvr , set it to 1 , 
						or else , set it to 0	
	-->
	<ContentStore netId="${ServerNetIf}" cacheMode="0" cacheLevel="1" SupportNpVr="0">
		<!-- 
		ContentStore's log attribute
		-->
		<Log>
			<CsMainLog path="${TianShanLogDir}\MediaServerCS.log" filesize="102400000" count="5" level="7"/>
			<CsEventLog path="${TianShanLogDir}\MediaServerCS_Event.log" filesize="102400000" count="5" level="7"/>
		</Log>
		
		<!-- The database cache
		     attributes:
		       volumeSize  - the size of volume records to cache, 20 ~ 200 are acceptable
		       contentSize  - the size of content records to cache, 400 ~ 4000 are acceptable
		-->
		<DatabaseCache volumeSize="40" contentSize="2000"/>

        <!-- 
            defaultBandwidth: default provision bandwidth while called with 0 transfer bitrate (bps) 
            trickSpeeds:      speed collection required for trick generation represented as float numbers,
                              multiple speeds are separated by space. eg: "7.5 12.5 15.0"
        -->
        <Provision defaultBandwidth="5000000" trickSpeeds="7.5" />

		
		<!-- 
		ContentStore replica information:
				groupId			: contentstore replica group identifier
				replicaId		: contentStore replica identifier
				ReplicaPriority	: replica priority
				timeout			: default timeout interval in milliseconds
				MasterReplica:
					endpoint	: content store replica listener endpoint ,  DO NOT include servant name ,  streammith will do it for you
		-->	
		<StoreReplica groupId="${ReplicaGroupId}" replicaId="${HostNetID}" replicaPriority="2" timeout="60000" >
			<MasterReplica endpoint="tcp -h ${ClusterCSNetIf} -p 10400" />
			<!--Subscriber endpoint="" /-->
		</StoreReplica>	
		
		<!--
		
		 -->
		<!--CacheStore level="{0 ~ 255}" exposeStreamService="{1|0}" /-->
		<ContentAttribute suportVolume="0" >
			<ContentNameFixup ignorePrefix="\SeaFileDevices\" ingorefileEventPrefix="DVL\" ingoreHiddenSessionWithChararcter="$" />
		</ContentAttribute>
		
		<PerformaceTune>
			<EvictorSize volumeSize="100" contentSize="10000" />			
		</PerformaceTune>
				
		<subFileExtName>
			<ext name="vv2"/>
			<ext name="vvx"/>
			<ext name="ff"/>
			<ext name="fr"/>
			<ext name="ffr"/>
			<ext name="xml"/>
		</subFileExtName>
		<CPC endpoint="tcp -h ${ServerNetIf} -p 11500" enable="0">
			<ContentProvision defaultProvisionBandwidth="37500" />
			<Sessions registerInterval="15000" />
		</CPC>
		
	</ContentStore>

</TianShan>
