<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<TianShan>
	<Definitions src="TianShanDef.xml">
	</Definitions>
	<!-- default configurations for the services of this TianShan deployment -->
	<default>
	
		<!-- The EventChannel service where the services of this TianShan deployment will deliver events to.
		     attributes:
		       endpoint - the ICE endpoint to the EventChannel service
		-->
		<EventChannel endpoint="${PrimeEventChannelEndpoint}" />
		
					
		<!--CrashDump can help devoloper diagnose the program when it crashed
			if you set enable to "1" you must make sure that the path is accessible
			path   - crashdump path
			enabled - 1 to enable crashDump
		 -->
		<CrashDump path="${TianShanCrashDumpDir}" enabled="1"/>

		<!-- The Ice trace log setting for all the services of this TianShan deployment.
		     attributes:
		       enabled       - 1 if the Ice trace is enabled, default "0"
		       logfileSuffix - a suffix of the log filename, i.e. the service Weiwoo's main log file will
		                       be "Weiwoo.log". With a suffix "_ice.log", the ICE trace will be in a
		                       separate logfile "Weiwoo_ice.log" in the same directory
		       level         - the log level of the ice trace log
		       size          - the size that this trace log must roll
		-->
		<IceTrace enabled="1" level="7" size="10240000" />

		<!-- Additional Ice properties if there is any, <prop /> is its sub element
		     attrib of <prop />:
		        name         == the name of the Ice property
		        value        == the value of the Ice property
		-->
		<IceProperties>
			<!-- the following are performance tuning parameters, please don't modify if you are not an expert at them 
			-->
			<serviceProperty name="Ice.Trace.Network"                value="1" />
			<serviceProperty name="Ice.Trace.Protocol"               value="0" />
    	<serviceProperty name="Ice.Trace.Retry"                  value="1" />
			<serviceProperty name="Ice.Trace.Slicing"                value="0" />
			<serviceProperty name="Ice.Warn.Connections"             value="1" />
			<serviceProperty name="Ice.Warn.Endpoints"               value="1" />
			<serviceProperty name="Ice.ACM.Client"                   value="0" />
			<serviceProperty name="Ice.Override.ConnectTimeout"      value="5000" />
			<serviceProperty name="Ice.Override.Timeout"             value="20000" />
			<serviceProperty name="Freeze.Warn.Deadlocks"            value="1" />
			<serviceProperty name="Freeze.Trace.Map"                 value="0" />
			<serviceProperty name="Freeze.Trace.DbEnv"               value="2" />
			<serviceProperty name="Freeze.Trace.Evictor"             value="0" />
			<serviceProperty name="Freeze.Evictor.UseNonmutating" 	 value="1"/>
			<serviceProperty name="Ice.ThreadPool.Server.Size" 	 	 value="20"/>
			<serviceProperty name="Ice.ThreadPool.Client.Size" 	 	 value="20"/>			
		</IceProperties>
		
		<!-- The default folder where the services of this TianShan deployment accesses their local
		     databases if it is not defined by their individual configurations
		     attributes:
		       path          - path to the location of database directory, default "../data/"		       
		-->
		<Database path="${TianShanDatabaseDir}" />
		
	</default>
	
	<CdnSS netId ="${HostNetID}" >
	
		<!-- The local bind endpoint that the ContentStore service is serving on
		     attributes:
		       endpoint      - the bind endpoint of this ContentStore service
		       dispatchSize  - the initial thread pool size to dispatch client requests, values in the range 4-20 are acceptable
		       dispatchMax   - the max thread pool size to dispatch client requests
		-->
		<Bind endpoint="tcp -h ${ServerNetIf} -p 10700" dispatchSize="5" dispatchMax="10" />

		<!-- Configuration on how the requests are processed
		     attributes:
		       threads   - the size of the thread pool
		-->
		<RequestProcess threads="5" />

		<!-- Configuration of C2 TransferPorts
		     attributes:
		        HttpBindIp - the local address to bind, must be ANY_ADDRESS "0.0.0.0" if there are multiple TransferPorts
		        HttpBindIp - port to serve C2 transfering sessions
		        httpThreadCount - 
		        servicethreadCount - 
		        bufferCount - the buffer to read disk would be multiples of page size every time, this defines the multipler
		-->		
    <C2Streamer HttpBindIp="${ServerNetIf}" httpBindPort="12000" httpThreadCount="5" servicethreadCount="30" bufferCount="32">
			<!-- 
				StreamingPort: use if you want to re-assign a speed to a port
					name: port name, case-sensitive
					speed: port speed in kbps
			-->
      <!--StreamingPort name="eth0" speed="600000"/-->

      <StatusReportServer bindIp="${ServerNetIf}" bindPort="12010" threadCount="5"/>
    </C2Streamer>
	
		
		<!-- 
			Log files to publish thru SentryService
		-->
		<PublishedLogs>
			<!-- Log file to publish thru SentryService
		     	     attributes:
		       		path    - full path of the log file
		       		syntax  - the file defines the syntax of the events via the regular expressions
			-->
			<Log path="${TianShanLogDir}\UMGSS.log" syntax="${TianShanHomeDir}\etc\syntax.xml" key="CDNSS" type="FileLog"/>
       	</PublishedLogs>
       	<!-- Configuration about the StreamSession
		     attributes:
		     	timeout - timeout in millseconds when a playlist is unattended at any state other than streaming
		-->
		<StreamSession 	timeout="500" sessionScanInterval="5000" resourceScanInterval="100000"/>
		<!--
			Replica :
				groupId : the replica group identifier
				category: for streamsmith , this should be Streamer , DO NOT CHANGE IT
				subscriber:
					endpoint : the streamer replica listener endpoint ,
							   if it's not path manager , DO include servant name in the endpoint string
					updateInterval : default interval in milliseconds, for update replica information to listened
									 If listener do not advise a value for update , this value will be used		   
		-->
		<Replica groupId="${ServerNetIf}" category="Streamer" >
			<subscriber endpoint="C2Locator:${CdnSsSubscriberEndpoint}" updateInterval="6000" />
		</Replica>
		
		
		
		<PeformanceTune>
			<!-- CheckpointPeriod :	Every Berkeley DB environment created by Freeze has an associated thread that
									checkpoints this environment every num seconds. If num is less than 0, no checkpoint
									is performed. The default is 120 seconds.
				 DbRecoverFatal	:	If num is set to a value larger than zero, fatal recovery is performed when the environment
									is opened. The default value is 0.
			-->
			<IceFreezeEnviroment 	CheckpointPeriod="240" DbRecoverFatal="1" />
			
			<!-- SavePeriod 	:	Freeze uses a background thread to save updates to the database. After num milliseconds
									without saving, if any facet is created, modified, or destroyed, this background
									thread wakes up to save these facets. When num is 0, there is no periodic
									saving. The default is 60000.
			SaveSizeTrigger		:	Freeze uses a background thread to save updates to the database. When num is 0
									or positive, as soon as num or more facets have been created, modified, or
									destroyed, this background thread wakes up to save them. When num is negative,
									there is no size trigger. The default is 10.
			sessionSize 		:	the size of session records to cache, 200 ~ 2000 are acceptable
			-->
			<session 				sessionSize ="500" SavePeriod="240" SaveSizeTrigger="100" />
		</PeformanceTune>
			
		<AssistantLog>
			<SessionLog level="7" fileSize="12040000" buffer="10240" flushTimeout="2" />
			<HttpLog level="7" fileSize="12040000" buffer="10240" flushTimeout="2" />
		</AssistantLog>		
	</CdnSS>
	<!--
		embeded node conetent store :	
		netId	: content store's netId		
		autoFileSync	:set 1 to automatism sync file system adn database
		note: the netId of ContentStore shares the same value of that of <CdnSS />
	-->
	<ContentStore cacheMode="0" cacheLevel="1" autoFileSync="0" >
		<!-- 
		ContentStore's log attribute
		-->
		<Log>
			<MainLog level="7" fileSize="102400000" count="5" />
			<EventLog level="7" fileSize="102400000" count="5" />
		</Log>
		
		<!-- The database cache
		     attributes:
		       volumeSize  - the size of volume records to cache, 20 ~ 200 are acceptable
		       contentSize  - the size of content records to cache, 400 ~ 4000 are acceptable
		-->
		<DatabaseCache volumeSize="40" contentSize="2000"/>

        <!-- 
            defaultBandwidth: default provision bandwidth while called with 0 transfer bitrate (bps) 
            trickSpeeds:      speed collection required for trick generation represented as float numbers,
                              multiple speeds are separated by space. eg: "7.5 12.5 15.0"
        -->
        <Provision defaultBandwidth="5000000" trickSpeeds="7.5" />

		<!--
			CDNSS use multicast to let master-CDNSS and slave-CDNSS to sync the content state
		-->
		<FileEvent enableMulticast="0" groupAddress="${TianShanGroupAddr}" groupPort="65002" groupBind="${ServerNetIf}"/>
		
		<Volumes>
			<Volume name="$" path="/opt/TianShan/c2files" default="1" />
			<Volume name="vol2" path="/tmp/bbb" />
		</Volumes>

		
		<!-- 
		ContentStore replica information:
				groupId			: contentstore replica group identifier
				replicaId		: hidden, shares the same value of netId of <CdnSS /> by default
				ReplicaPriority	: replica priority
				timeout			: default timeout interval in milliseconds
				MasterReplica:
					endpoint	: content store replica listener endpoint ,  DO NOT include servant name ,  streammith will do it for you
		-->	
		<StoreReplica groupId="${ReplicaGroupId}" replicaPriority="2" timeout="60000" >
			<MasterReplica endpoint="tcp -h ${ClusterCSNetIf} -p 10400" />
		</StoreReplica>	
		
		
		
		<CPC endpoint="tcp -h ${ServerNetIf} -p 11500" >
			<ContentProvision defaultProvisionBandwidth="37500" />
			<Sessions registerInterval="15000" />
		</CPC>
		
	</ContentStore>

</TianShan>
