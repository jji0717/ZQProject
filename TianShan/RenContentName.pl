use strict;
use Getopt::Std;

my $csv_file;
my $ren_file;
my $rollback_file;
my $fileset="ff,fr,vvx";
my @filesets;
my $trickfile;



&main();

sub usage()
{
      print <<EOF;
Usage: 
  RenContentName ¨Ci <CSVFromLAM.csv> ¨Co <RenameFileset.bat> ¨Cr <RollbackFileset.bat>
  RenContentName -h
This script is designed to generates a batch job to rename the Content name from the old PAID PID to the new PAID PID and generates a batch job to rollback the renaming from the new PAID PID to the old PAID PID
Options:
       -i	<CSVFromLAM.csv> the output CVS file generated by LAM util, which contains the old and new Content name
       -o	<RenameFileset.bat> the batch job file name to contain the commands to rename content file set by file set
       -r	<RollbackFileset.bat> the batch job file name to contain the commands to roll back thes content file if the renaming procedure get exceptions
       -f	<trickfiles> the trick file list, split with comma,default value is \"ff,fr,vvx\"
       -h	display this screen
EOF
}

sub main()
{
	my %options=();
	my $param =0;
	$param = 1 if ($ARGV[0]);
	getopts("i:o:r:h", \%options);
	if ($options{h} ||  $param ==0 || !$options{i} || !$options{o} || !$options{r})
	{
		usage();
		return;
	}
	$csv_file=$options{i};
	$ren_file=$options{o};
	$rollback_file=$options{r};
	$fileset=$options{f} if($options{f});
	@filesets = split(/,/,$fileset);
	my $newname="";
	my $line;
	my @files;
	unlink "$ren_file";
	unlink "$rollback_file";
	open CSVFILE, "<$csv_file" or die ("fail to open $csv_file, please give a right file");
	open RENFILE, ">>$ren_file";
	open ROLLFILE, ">>$rollback_file";
	csv_next_line:while ($line = <CSVFILE>)
	{
		$_=$line;
		my $new_file;
		my $old_file;
		my $new_trick;
		my $old_trick;
		@files = split (/\"/,$line);
		if($files[1] =~ /^NewContentName/i)
		{
			$newname = 1;
			next csv_next_line;
		}
		elsif($files[1] =~ /^OldContentName/i)
		{
			$newname = 0;
			next csv_next_line;
		}
		elsif($newname == 1)
		{
			$new_file = $files[1];
			$old_file = $files[3];
			
		}
		else
		{
			$new_file = $files[3];
			$old_file = $files[1];
		}
		printf RENFILE "echo ren $old_file $new_file >>ren.log\n";
		printf RENFILE "scp ren $old_file $new_file >>ren.log\n";
		printf ROLLFILE "echo ren $new_file $old_file >>rollback.log\n";
		printf ROLLFILE "scp ren $new_file $old_file >>rollback.log\n";
		foreach $trickfile (@filesets)
		{
			$new_trick = "$new_file".".$trickfile";
			$old_trick = "$old_file".".$trickfile";
			printf RENFILE "echo ren $old_trick $new_trick >>ren.log\n";
			printf RENFILE "scp ren $old_trick $new_trick >>ren.log\n";
			printf ROLLFILE "echo ren $new_trick $old_trick >>rollback.log\n";
			printf ROLLFILE "scp ren $new_trick $old_trick >>rollback.log\n";
		}
		next csv_next_line;
	}
	close ROLLFILE;
	close RENFILE;
	close CSVFILE;
   
   
}