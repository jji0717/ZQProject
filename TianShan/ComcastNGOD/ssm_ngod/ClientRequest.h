
#ifndef _tianshan_ngod_client_request_header_file_h__
#define _tianshan_ngod_client_request_header_file_h__


#include <IceUtil/IceUtil.h>
#include <Ice/Ice.h>
#include "./Ice/ngod.h"
#include "StreamSmithModule.h"
#include "NgodHelper.h"

namespace NGOD
{

class NgodEnv;
class NgodSessionManager;

class NgodClientRequestI;

class ServerResponse : public Ice::Object
{
public:
	ServerResponse( NgodEnv& env , NgodClientRequestI& request );
	virtual ~ServerResponse(void);

public:

	void			setLastErr( int errCode , const char* fmt , ... );		

	void			setNoResponse( bool bNoResponse = true );

	int				getErrorCode( ) const;
protected:
	friend class NgodClientRequestI;
	void			post();

	virtual void	composeResponseMessage( );

	virtual	void	onResponseFailed( );

protected:

	std::string					mStartLine;

	bool						mbSendResponse;

	std::string					mErrorReason;

	int							mErrorCode;

	NgodClientRequestI&			mRequest;

	NgodEnv&					mEnv;
};

typedef IceUtil::Handle<ServerResponse> ServerResponsePtr;

class NgodClientRequestI : public NGOD::NgodClientRequest
{
public:
	NgodClientRequestI( NgodEnv& env , NgodSessionManager& manager , IClientRequest* request );
	virtual ~NgodClientRequestI( void );

	virtual void setStartline(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) ;
	virtual void setHeader(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) ;	
	virtual void setBody(const ::std::string&, const ::Ice::Current& = ::Ice::Current());
	virtual bool post(const ::Ice::Current& = ::Ice::Current()) ;
	
	ServerResponsePtr getResponse( );
	
	NgodSessionManager&	getSessionManager();

	int64		getStartTime( ) const;

public:

	static	 bool			processRequest( IClientRequest* request );

public:

	virtual bool			process( ) ;

	virtual bool			parseRequest( );

	ZQ::common::Variant     getInfo( int32 infoType );

protected:

	void					setLastErr( int err , char* fmt , ... );

	int32					getBodySize( ) const;

	bool					getContentBody( std::string& body ) const;


public:
	
	std::string				mRtspServerIp;
	std::string				mRtspServerPort;
	Ice::Float				mPrimaryItemNPT;
	Ice::Float				mPrimaryItemEnd;

protected:

	IClientRequest*			mRequest; //request c++ interface pointer
	IServerResponse*		mResponse;//response c++ interface pointer
	std::string				mLastErrorStr;
	int						mLastErrorCode;	
	NgodEnv&				mEnv;
	NgodSessionManager&		mSessManager;
	ServerResponsePtr		mServerResponse;//server response instance pointer
	bool					mbNeedVerCode;
	bool					mbR2Request;
	int64					mStartTime;
	
};
typedef IceUtil::Handle<NgodClientRequestI>	NgodClientRequestIPtr;


struct SetupParam 
{
	std::string				messageSequence;	//header: CSeq
	std::string				requestUri;
	std::string				sopName;			//sop name or sop group name
	int64					requestBW;			//request bandwidth counted in byte
	std::string				requestVolume;		//request volume
	std::string				ondemandSessId;		//on demand session id generated by client ( may be ODRM)

	std::string				serverIp;			//RtspProxy serve IP for this request
	int						serverPort;			//RtspProxy serve port for this request

	std::string				destIp;
	std::string				destMac;
	int						destPort;


	std::string				pokeHoleSessId;		//header:ClientSessionId
	std::string				sessionGroupName;	//header : SessionGroup

	std::string				connectionId;		//connection id	

	struct RequestStartPoint 
	{
		bool			isValid( ) const{	return index >= 0;	}
		int				index;		// index base on 0
		int64			offset;		// parsing this value depend on protocol version
		RequestStartPoint()
		{
			offset = 0;
			index = -1;//default set to -1 means no startPoint available
		}
	};

	RequestStartPoint		startPoint;


	struct PlaylistItemInfo 
	{
		std::string			pid;
		std::string			paid;
		std::string			sid;
		bool				primaryAsset;
		int64				cuein;
		int64				cueout;
		int64				restrictionFlag;	//restriction flag used for ff/fw forbidden thing
		std::string         range;				//for StreamResources
		std::string         extAds;		        //for Ads extension

		PlaylistItemInfo()
		{
			primaryAsset        = true;
			cuein				= 0;
			cueout				= 0;
			restrictionFlag		= 0;
			range               = "";
		}
	};
	std::vector<PlaylistItemInfo> playlist;

	struct EncryptionDataKey 
	{
		std::string		pid;
		std::string		paid;
	};

	struct EncryptionDataKeyCmp
	{
		bool operator()( const EncryptionDataKey& a , const EncryptionDataKey& b ) const
		{
			if( a.pid < b.pid )
			{
				return true;
			}
			else if( a.pid == b.pid )
			{
				return a.paid < b.paid;
			}
			else
			{
				return false;
			}
		}
	};

	struct EncryptionData 
	{
		int							iProgNum;
		int							iFrq1;
		std::vector<Ice::Int>		vecKeyOffset;
		std::vector<std::string>	vecKeys;
		EncryptionData()
		{
			iProgNum		= 0;
			iFrq1			= 0;
		}
	};
	typedef std::map< EncryptionDataKey , EncryptionData , EncryptionDataKeyCmp > EncryptionDataMap;
	EncryptionDataMap		encryptData;
};


class NgodRequestSetup : public NgodClientRequestI
{
public:
	NgodRequestSetup( NgodEnv& env , NgodSessionManager& manager , IClientRequest* request );
	virtual ~NgodRequestSetup( );

public:

	const SetupParam&		getSetupParam( ) const;

protected:

	void					parseSessionGroup( );
	void					parseVolume();
	void					parseStartpoint( );
	void					parseTransport( );
	void					parseSDP( );
	void					parseEncryptionData( const std::string& str );
	void					parsePlaylistItem( const std::string& str );

	virtual bool			process( );

	virtual bool			parseRequest( );


private:
	
	SetupParam	mSetupParam;
	std::string	mClientId;//actually I don't what client id is
};
typedef IceUtil::Handle<NgodRequestSetup>	NgodRequestSetupPtr;

struct PlayParam
{
	float					scale;
	int64					nptStart;
	bool					bFromNow;
	std::string             reqRange;
	std::string             reqScale;
	PlayParam()
	{
		scale		= 0.0f;
		nptStart	= 0;
		bFromNow	= true;	
		reqRange    = "";
		reqScale    = "";
	}
};


class NgodRequestPlay : public NgodClientRequestI
{
public:
	NgodRequestPlay( NgodEnv& env , NgodSessionManager& manager , IClientRequest* request );
	virtual ~NgodRequestPlay( );

public:

	const PlayParam&		getPlayParam( ) const;
	void  setPlayParam(const PlayParam& v) { mPlayParam = v; }

protected:

	virtual bool			process( );

	virtual bool			parseRequest( );

	void					parseScale( );
	void					parseRange( );

private:
	
	PlayParam				mPlayParam;

};
typedef IceUtil::Handle<NgodRequestPlay> NgodRequestPlayPtr;


class NgodRequestPause : public NgodClientRequestI
{
public:
	NgodRequestPause( NgodEnv& env , NgodSessionManager& manager ,  IClientRequest* request );
	virtual ~NgodRequestPause();

protected:

	virtual bool			process( );

	virtual bool			parseRequest( );

private:

};
typedef IceUtil::Handle<NgodRequestPause>	NgodRequestPausePtr;

struct TeardownParam 
{	
	std::string			reason;
	std::string			serverIp;
	std::string			clientIp;
};


class NgodRequestTeardown : public NgodClientRequestI
{
public:
	NgodRequestTeardown( NgodEnv& env ,NgodSessionManager& manager , IClientRequest* request );
	virtual ~NgodRequestTeardown();

public:

	const TeardownParam&		getTeardownParam( ) const;

protected:

	virtual bool				process( );

	virtual bool				parseRequest( );

	void						parseReason( );

	void						parseAddress();

private:

	TeardownParam		mTeardownParam;
};
typedef IceUtil::Handle<NgodRequestTeardown> NgodRequestTeardownPtr;


struct GetInfoParam 
{
	enum ParamMask
	{
		MASK_NULL		= 0,
		MASK_SCALE		= 1 << 0,
		MASK_STATE		= 1 << 1,
		MASK_POSITION	= 1 << 2,
		MASK_TIMEOUT	= 1 << 3,
		MASK_SESSIONLIST= 1 << 4,
	};
	int						mask;
	
	std::string				sessionGroupName;	
	GetInfoParam()
	{
		mask = MASK_NULL ;
	}
};

std::string convertGetInfoParamMask( int mask );


class NgodRequestGetParameter : public NgodClientRequestI
{
public:
	NgodRequestGetParameter( NgodEnv& env , NgodSessionManager& manager , IClientRequest* request );
	virtual ~NgodRequestGetParameter();

public:
	
	const GetInfoParam&			getParam( ) const;

protected:

	virtual bool				process( );

	virtual bool				parseRequest( );

	void						parseMask( );
	void						parseSessionGroup( );

private:

	GetInfoParam				mParam;

};
typedef IceUtil::Handle<NgodRequestGetParameter> NgodRequestGetParameterPtr;


class NgodRequestSetParam : public NgodClientRequestI
{
public:
	NgodRequestSetParam(  NgodEnv& env , NgodSessionManager& manager , IClientRequest* request  );
	virtual ~NgodRequestSetParam();

protected:

	virtual bool				process( );

	virtual bool				parseRequest( );

protected:

	void						parseRequire();
	void						parseBody( );
	void						parseSessionGroup( const std::string& str );
	void						parseSessionlist( const std::string& str  );

	void						updateSessionGroupInfo( const std::vector<std::string>& groups );
	void						updateSessionListInfo( const std::vector<std::string>&  );
private:
	enum SetParameMask
	{
		MASK_NONE,
		MASK_C1,
		MASK_R2
	};

	SetParameMask				mMask;
	std::vector<std::string>	sessionGroupsForR2;
	std::vector<std::string>	sessionListForC1;
	
};
typedef IceUtil::Handle<NgodRequestSetParam> NgodRequestSetParamPtr;

int64						convertToNumberWithPrototcol( const std::string& str , NgodProtoclVersionCode code );
NgodProtoclVersionCode		parseProtocolVersionCode( const std::string& str  );

class NgodRequestAnnounceResponse : public NgodClientRequestI
{
public:
	NgodRequestAnnounceResponse( NgodEnv& env , NgodSessionManager& manager , IClientRequest* request );
	virtual ~NgodRequestAnnounceResponse();

public:

	int							getRetCode( );

protected:
	virtual bool				process( );

	virtual bool				parseRequest( );

	
private:
	int			mRetCode;

};
typedef IceUtil::Handle<NgodRequestAnnounceResponse> NgodRequestAnnounceResponsePtr;
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
///



struct SetupResponsePara 
{
	std::string			streamerSourceIp;
	Ice::Int			streamerSourcePort;
};


class ServerResponseSetup :public ServerResponse
{
public:
	ServerResponseSetup( NgodEnv& env , NgodClientRequestI& request );
	virtual ~ServerResponseSetup();

public:

	void			setPara( const SetupResponsePara& para );

public:

	virtual void	composeResponseMessage( );
	virtual	void	onResponseFailed( );

private:
	SetupResponsePara			mPara;

};
typedef IceUtil::Handle<ServerResponseSetup> ServerResponseSetupPtr;

class ServerResponsePlay : public ServerResponse
{
public:
	ServerResponsePlay( NgodEnv& env , NgodClientRequestI& request );
	virtual ~ServerResponsePlay();
public:

	void			setRange( const std::string& rangeStart , const std::string& rangeEnd );
	void			setScale( const std::string& scale );

protected:
	virtual void	composeResponseMessage( );
};
typedef IceUtil::Handle<ServerResponsePlay> ServerResponsePlayPtr;


class ServerResponsePause : public ServerResponse
{
public:
	ServerResponsePause( NgodEnv& env , NgodClientRequestI& request );
	virtual ~ServerResponsePause();
	
	void			setRange( const std::string& rangeStart , const std::string& rangeEnd );
	void			setScale( const std::string& scale );

protected:
	virtual void	composeResponseMessage( );
};
typedef IceUtil::Handle<ServerResponsePause> ServerResponsePausePtr;


struct GetParamResponseInfo
{
	GetInfoParam::ParamMask	mask;
	std::string				state;
	std::string				rangeStart;
	std::string				rangeEnd;
	std::string				scale;
};


class ServerResponseGetParameter : public ServerResponse
{
public:
	ServerResponseGetParameter( NgodEnv& env , NgodClientRequestI& request , NgodSessionManager& manager );
	virtual ~ServerResponseGetParameter();

public:

	void			setInfo( const GetParamResponseInfo& info );

	void			setGetParamInfo( const GetInfoParam& info );

protected:

	virtual void	composeResponseMessage( );

	void			getSessionlist( std::ostringstream& oss );

private:
	GetInfoParam			mGetParaInfo;
	GetParamResponseInfo	mInfo;
	NgodSessionManager&		mSessManager;

};
typedef IceUtil::Handle<ServerResponseGetParameter> ServerResponseGetParameterPtr;


class ServerResponseSetParameter : public ServerResponse
{
public:
	ServerResponseSetParameter( NgodEnv& env , NgodClientRequestI& request);
	virtual ~ServerResponseSetParameter();
protected:
	virtual void	composeResponseMessage( );
};
typedef IceUtil::Handle<ServerResponseSetParameter> ServerResponseSetParameterPtr;


struct TeardownResponseParameter
{
	std::string			remoteIp;
	std::string			localIp;
	std::string			odsessid;
	std::string			componentName;
	std::string			setupDate;
	std::string			teardownDate;
	std::string			resultCode;
	std::string			sessGroupName;
	std::string			sopname;
	Ice::Long			npt;	
	Ice::Long			playTime;
	std::string			assetBasedNpt;
	Ice::Int			assetIndex;
};


class ServerResponseTeardown : public ServerResponse
{
public:
	ServerResponseTeardown( NgodEnv& env , NgodClientRequestI& request );
	virtual ~ServerResponseTeardown( );

	void		setSessionHistoryData( const TeardownResponseParameter& para, const NGOD::PlaylistItemSetupInfos& plInfos ,  const NGOD::SessionEventRecords& records );

protected:
	
	void		outputBasicInfo( const TeardownResponseParameter& para , std::ostringstream& oss );
	void		outputplInfo( const NGOD::PlaylistItemSetupInfos& plInfos , const TeardownResponseParameter& para, std::ostringstream& oss );
	void		outputSessionEvents(  const NGOD::SessionEventRecords& records , std::ostringstream& oss );
	void		outputUserEvent( const NGOD::SessionEventRecord& event , std::ostringstream& oss );
	void		outputStreamEvent( const NGOD::SessionEventRecord& event , std::ostringstream& oss );
	void		outputStartStreamEvent( const NGOD::SessionEventRecord& event , std::ostringstream& oss );
	void		outputEndEvent( const NGOD::SessionEventRecord& event , std::ostringstream& oss );
	void		outputRecoverableErrorEvent( const NGOD::SessionEventRecord& event , std::ostringstream& oss );
	void		outputTraisitionEvent( const NGOD::SessionEventRecord& event , std::ostringstream& oss );

	virtual void	composeResponseMessage( );	
private:
	TeardownResponseParameter		mPara;
};
typedef IceUtil::Handle<ServerResponseTeardown> ServerResponseTeardownPtr;


}//namespace NGOD

#endif//_tianshan_ngod_client_request_header_file_h__

