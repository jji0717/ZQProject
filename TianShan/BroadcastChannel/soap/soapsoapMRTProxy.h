/* soapsoapMRTProxy.h
   Generated by gSOAP 2.7.10 from soapMRT.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapsoapMRTProxy_H
#define soapsoapMRTProxy_H
#include "soapH.h"
class soapMRT
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'soapMRT' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	soapMRT()
	{ soap = soap_new(); endpoint = "http://localhost:8895"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"wsdl", "http://tempuri.org/wsdl.xsd", NULL, NULL},
	{"ZQ2", "ZQ:soapMRT", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~soapMRT() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'setup' of service 'soapMRT' and return error code (or SOAP_OK)
	virtual int ZQ2__setup(ZQ2__setupInfo *setupInfo, struct ZQ2__setupResponse &_param_1) { return soap ? soap_call_ZQ2__setup(soap, endpoint, NULL, setupInfo, _param_1) : SOAP_EOM; };
	/// Invoke 'teardown' of service 'soapMRT' and return error code (or SOAP_OK)
	virtual int ZQ2__teardown(std::string sessionId, bool &ret) { return soap ? soap_call_ZQ2__teardown(soap, endpoint, NULL, sessionId, ret) : SOAP_EOM; };
	/// Invoke 'getStatus' of service 'soapMRT' and return error code (or SOAP_OK)
	virtual int ZQ2__getStatus(std::string sessionId, struct ZQ2__getStatusResponse &_param_2) { return soap ? soap_call_ZQ2__getStatus(soap, endpoint, NULL, sessionId, _param_2) : SOAP_EOM; };
	/// Invoke 'notifyStatus' of service 'soapMRT' and return error code (or SOAP_OK)
	virtual int ZQ2__notifyStatus(struct ZQ2__notifyStatusResponse &_param_3) { return soap ? soap_call_ZQ2__notifyStatus(soap, endpoint, NULL, _param_3) : SOAP_EOM; };
};
#endif
