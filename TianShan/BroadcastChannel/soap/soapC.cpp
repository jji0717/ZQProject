/* soapC.cpp
   Generated by gSOAP 2.7.10 from soapMRT.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2014-11-14 06:29:55 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ZQ2__Enum_1:
		return soap_in_ZQ2__Enum_1(soap, NULL, NULL, "ZQ2:Enum-1");
	case SOAP_TYPE_ZQ2__setupInfo:
		return soap_in_ZQ2__setupInfo(soap, NULL, NULL, "ZQ2:setupInfo");
	case SOAP_TYPE_ZQ2__map:
		return soap_in_ZQ2__map(soap, NULL, NULL, "ZQ2:map");
	case SOAP_TYPE_ZQ2__pair:
		return soap_in_ZQ2__pair(soap, NULL, NULL, "ZQ2:pair");
	case SOAP_TYPE_wsdl__State:
		return soap_in_wsdl__State(soap, NULL, NULL, "wsdl:State");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ZQ2__notifyStatus:
		return soap_in_ZQ2__notifyStatus(soap, NULL, NULL, "ZQ2:notifyStatus");
	case SOAP_TYPE_ZQ2__notifyStatusResponse:
		return soap_in_ZQ2__notifyStatusResponse(soap, NULL, NULL, "ZQ2:notifyStatusResponse");
	case SOAP_TYPE_ZQ2__getStatus:
		return soap_in_ZQ2__getStatus(soap, NULL, NULL, "ZQ2:getStatus");
	case SOAP_TYPE_ZQ2__getStatusResponse:
		return soap_in_ZQ2__getStatusResponse(soap, NULL, NULL, "ZQ2:getStatusResponse");
	case SOAP_TYPE_ZQ2__teardown:
		return soap_in_ZQ2__teardown(soap, NULL, NULL, "ZQ2:teardown");
	case SOAP_TYPE_ZQ2__teardownResponse:
		return soap_in_ZQ2__teardownResponse(soap, NULL, NULL, "ZQ2:teardownResponse");
	case SOAP_TYPE_ZQ2__setup:
		return soap_in_ZQ2__setup(soap, NULL, NULL, "ZQ2:setup");
	case SOAP_TYPE_ZQ2__setupResponse:
		return soap_in_ZQ2__setupResponse(soap, NULL, NULL, "ZQ2:setupResponse");
	case SOAP_TYPE_PointerToZQ2__setupInfo:
		return soap_in_PointerToZQ2__setupInfo(soap, NULL, NULL, "ZQ2:setupInfo");
	case SOAP_TYPE_PointerToZQ2__map:
		return soap_in_PointerToZQ2__map(soap, NULL, NULL, "ZQ2:map");
	case SOAP_TYPE_PointerToZQ2__pair:
		return soap_in_PointerToZQ2__pair(soap, NULL, NULL, "ZQ2:pair");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ZQ2:setupInfo"))
		{	*type = SOAP_TYPE_ZQ2__setupInfo;
			return soap_in_ZQ2__setupInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:map"))
		{	*type = SOAP_TYPE_ZQ2__map;
			return soap_in_ZQ2__map(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:pair"))
		{	*type = SOAP_TYPE_ZQ2__pair;
			return soap_in_ZQ2__pair(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsdl:State"))
		{	*type = SOAP_TYPE_wsdl__State;
			return soap_in_wsdl__State(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:Enum-1"))
		{	*type = SOAP_TYPE_ZQ2__Enum_1;
			return soap_in_ZQ2__Enum_1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:notifyStatus"))
		{	*type = SOAP_TYPE_ZQ2__notifyStatus;
			return soap_in_ZQ2__notifyStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:notifyStatusResponse"))
		{	*type = SOAP_TYPE_ZQ2__notifyStatusResponse;
			return soap_in_ZQ2__notifyStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:getStatus"))
		{	*type = SOAP_TYPE_ZQ2__getStatus;
			return soap_in_ZQ2__getStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:getStatusResponse"))
		{	*type = SOAP_TYPE_ZQ2__getStatusResponse;
			return soap_in_ZQ2__getStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:teardown"))
		{	*type = SOAP_TYPE_ZQ2__teardown;
			return soap_in_ZQ2__teardown(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:teardownResponse"))
		{	*type = SOAP_TYPE_ZQ2__teardownResponse;
			return soap_in_ZQ2__teardownResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:setup"))
		{	*type = SOAP_TYPE_ZQ2__setup;
			return soap_in_ZQ2__setup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ZQ2:setupResponse"))
		{	*type = SOAP_TYPE_ZQ2__setupResponse;
			return soap_in_ZQ2__setupResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ZQ2__Enum_1:
		return soap_out_ZQ2__Enum_1(soap, tag, id, (const enum ZQ2__Enum_1 *)ptr, "ZQ2:Enum-1");
	case SOAP_TYPE_ZQ2__setupInfo:
		return ((ZQ2__setupInfo *)ptr)->soap_out(soap, tag, id, "ZQ2:setupInfo");
	case SOAP_TYPE_ZQ2__map:
		return ((ZQ2__map *)ptr)->soap_out(soap, tag, id, "ZQ2:map");
	case SOAP_TYPE_ZQ2__pair:
		return ((ZQ2__pair *)ptr)->soap_out(soap, tag, id, "ZQ2:pair");
	case SOAP_TYPE_wsdl__State:
		return soap_out_wsdl__State(soap, tag, id, (const std::string *)ptr, "wsdl:State");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ZQ2__notifyStatus:
		return soap_out_ZQ2__notifyStatus(soap, tag, id, (const struct ZQ2__notifyStatus *)ptr, "ZQ2:notifyStatus");
	case SOAP_TYPE_ZQ2__notifyStatusResponse:
		return soap_out_ZQ2__notifyStatusResponse(soap, tag, id, (const struct ZQ2__notifyStatusResponse *)ptr, "ZQ2:notifyStatusResponse");
	case SOAP_TYPE_ZQ2__getStatus:
		return soap_out_ZQ2__getStatus(soap, tag, id, (const struct ZQ2__getStatus *)ptr, "ZQ2:getStatus");
	case SOAP_TYPE_ZQ2__getStatusResponse:
		return soap_out_ZQ2__getStatusResponse(soap, tag, id, (const struct ZQ2__getStatusResponse *)ptr, "ZQ2:getStatusResponse");
	case SOAP_TYPE_ZQ2__teardown:
		return soap_out_ZQ2__teardown(soap, tag, id, (const struct ZQ2__teardown *)ptr, "ZQ2:teardown");
	case SOAP_TYPE_ZQ2__teardownResponse:
		return soap_out_ZQ2__teardownResponse(soap, tag, id, (const struct ZQ2__teardownResponse *)ptr, "ZQ2:teardownResponse");
	case SOAP_TYPE_ZQ2__setup:
		return soap_out_ZQ2__setup(soap, tag, id, (const struct ZQ2__setup *)ptr, "ZQ2:setup");
	case SOAP_TYPE_ZQ2__setupResponse:
		return soap_out_ZQ2__setupResponse(soap, tag, id, (const struct ZQ2__setupResponse *)ptr, "ZQ2:setupResponse");
	case SOAP_TYPE_PointerToZQ2__setupInfo:
		return soap_out_PointerToZQ2__setupInfo(soap, tag, id, (ZQ2__setupInfo *const*)ptr, "ZQ2:setupInfo");
	case SOAP_TYPE_PointerToZQ2__map:
		return soap_out_PointerToZQ2__map(soap, tag, id, (ZQ2__map *const*)ptr, "ZQ2:map");
	case SOAP_TYPE_PointerToZQ2__pair:
		return soap_out_PointerToZQ2__pair(soap, tag, id, (ZQ2__pair *const*)ptr, "ZQ2:pair");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ZQ2__setupInfo:
		((ZQ2__setupInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ZQ2__map:
		((ZQ2__map *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ZQ2__pair:
		((ZQ2__pair *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_wsdl__State:
		soap_serialize_wsdl__State(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ZQ2__notifyStatus:
		soap_serialize_ZQ2__notifyStatus(soap, (const struct ZQ2__notifyStatus *)ptr);
		break;
	case SOAP_TYPE_ZQ2__notifyStatusResponse:
		soap_serialize_ZQ2__notifyStatusResponse(soap, (const struct ZQ2__notifyStatusResponse *)ptr);
		break;
	case SOAP_TYPE_ZQ2__getStatus:
		soap_serialize_ZQ2__getStatus(soap, (const struct ZQ2__getStatus *)ptr);
		break;
	case SOAP_TYPE_ZQ2__getStatusResponse:
		soap_serialize_ZQ2__getStatusResponse(soap, (const struct ZQ2__getStatusResponse *)ptr);
		break;
	case SOAP_TYPE_ZQ2__teardown:
		soap_serialize_ZQ2__teardown(soap, (const struct ZQ2__teardown *)ptr);
		break;
	case SOAP_TYPE_ZQ2__teardownResponse:
		soap_serialize_ZQ2__teardownResponse(soap, (const struct ZQ2__teardownResponse *)ptr);
		break;
	case SOAP_TYPE_ZQ2__setup:
		soap_serialize_ZQ2__setup(soap, (const struct ZQ2__setup *)ptr);
		break;
	case SOAP_TYPE_ZQ2__setupResponse:
		soap_serialize_ZQ2__setupResponse(soap, (const struct ZQ2__setupResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToZQ2__setupInfo:
		soap_serialize_PointerToZQ2__setupInfo(soap, (ZQ2__setupInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToZQ2__map:
		soap_serialize_PointerToZQ2__map(soap, (ZQ2__map *const*)ptr);
		break;
	case SOAP_TYPE_PointerToZQ2__pair:
		soap_serialize_PointerToZQ2__pair(soap, (ZQ2__pair *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__pair:
		return (void*)soap_instantiate_ZQ2__pair(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__map:
		return (void*)soap_instantiate_ZQ2__map(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__setupInfo:
		return (void*)soap_instantiate_ZQ2__setupInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__setupResponse:
		return (void*)soap_instantiate_ZQ2__setupResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__setup:
		return (void*)soap_instantiate_ZQ2__setup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__teardownResponse:
		return (void*)soap_instantiate_ZQ2__teardownResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__teardown:
		return (void*)soap_instantiate_ZQ2__teardown(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__getStatusResponse:
		return (void*)soap_instantiate_ZQ2__getStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__getStatus:
		return (void*)soap_instantiate_ZQ2__getStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__notifyStatusResponse:
		return (void*)soap_instantiate_ZQ2__notifyStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ZQ2__notifyStatus:
		return (void*)soap_instantiate_ZQ2__notifyStatus(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_wsdl__State:
		return (void*)soap_instantiate_wsdl__State(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerToZQ2__pair:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToZQ2__pair(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__pair:
		if (p->size < 0)
			delete (ZQ2__pair*)p->ptr;
		else
			delete[] (ZQ2__pair*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__map:
		if (p->size < 0)
			delete (ZQ2__map*)p->ptr;
		else
			delete[] (ZQ2__map*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__setupInfo:
		if (p->size < 0)
			delete (ZQ2__setupInfo*)p->ptr;
		else
			delete[] (ZQ2__setupInfo*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__setupResponse:
		if (p->size < 0)
			delete (struct ZQ2__setupResponse*)p->ptr;
		else
			delete[] (struct ZQ2__setupResponse*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__setup:
		if (p->size < 0)
			delete (struct ZQ2__setup*)p->ptr;
		else
			delete[] (struct ZQ2__setup*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__teardownResponse:
		if (p->size < 0)
			delete (struct ZQ2__teardownResponse*)p->ptr;
		else
			delete[] (struct ZQ2__teardownResponse*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__teardown:
		if (p->size < 0)
			delete (struct ZQ2__teardown*)p->ptr;
		else
			delete[] (struct ZQ2__teardown*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__getStatusResponse:
		if (p->size < 0)
			delete (struct ZQ2__getStatusResponse*)p->ptr;
		else
			delete[] (struct ZQ2__getStatusResponse*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__getStatus:
		if (p->size < 0)
			delete (struct ZQ2__getStatus*)p->ptr;
		else
			delete[] (struct ZQ2__getStatus*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__notifyStatusResponse:
		if (p->size < 0)
			delete (struct ZQ2__notifyStatusResponse*)p->ptr;
		else
			delete[] (struct ZQ2__notifyStatusResponse*)p->ptr;
		break;
	case SOAP_TYPE_ZQ2__notifyStatus:
		if (p->size < 0)
			delete (struct ZQ2__notifyStatus*)p->ptr;
		else
			delete[] (struct ZQ2__notifyStatus*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_wsdl__State:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToZQ2__pair:
		if (p->size < 0)
			delete (std::vector<ZQ2__pair * >*)p->ptr;
		else
			delete[] (std::vector<ZQ2__pair * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerToZQ2__pair:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ZQ2__pair * >*)p)[len] = *(ZQ2__pair **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__Enum_1(struct soap *soap, enum ZQ2__Enum_1 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ZQ2__Enum_1
	*a = SOAP_DEFAULT_ZQ2__Enum_1;
#else
	*a = (enum ZQ2__Enum_1)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__Enum_1(struct soap *soap, const enum ZQ2__Enum_1 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__Enum_1);
	if (soap_out_ZQ2__Enum_1(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ZQ2__Enum_1[] =
{	{ (long)ZQ2__Enum_1__UNKNOWN, "UNKNOWN" },
	{ (long)ZQ2__Enum_1__SETUP, "SETUP" },
	{ (long)ZQ2__Enum_1__TEARDOWM, "TEARDOWM" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ZQ2__Enum_12s(struct soap *soap, enum ZQ2__Enum_1 n)
{	const char *s = soap_code_str(soap_codes_ZQ2__Enum_1, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__Enum_1(struct soap *soap, const char *tag, int id, const enum ZQ2__Enum_1 *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__Enum_1), type) || soap_send(soap, soap_ZQ2__Enum_12s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ZQ2__Enum_1 * SOAP_FMAC4 soap_get_ZQ2__Enum_1(struct soap *soap, enum ZQ2__Enum_1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__Enum_1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ZQ2__Enum_1(struct soap *soap, const char *s, enum ZQ2__Enum_1 *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_ZQ2__Enum_1, s);
	if (map)
		*a = (enum ZQ2__Enum_1)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ZQ2__Enum_1)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ZQ2__Enum_1 * SOAP_FMAC4 soap_in_ZQ2__Enum_1(struct soap *soap, const char *tag, enum ZQ2__Enum_1 *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ZQ2__Enum_1 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__Enum_1, sizeof(enum ZQ2__Enum_1), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ZQ2__Enum_1(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ZQ2__Enum_1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__Enum_1, 0, sizeof(enum ZQ2__Enum_1), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void ZQ2__setupInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ZQ2__setupInfo::asset);
	this->ZQ2__setupInfo::resource = NULL;
	this->ZQ2__setupInfo::params = NULL;
	soap_default_std__string(soap, &this->ZQ2__setupInfo::cbNotification);
	soap_default_std__string(soap, &this->ZQ2__setupInfo::ctxNotification);
	/* transient soap skipped */
}

void ZQ2__setupInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ZQ2__setupInfo::asset);
	soap_serialize_PointerToZQ2__map(soap, &this->ZQ2__setupInfo::resource);
	soap_serialize_PointerToZQ2__map(soap, &this->ZQ2__setupInfo::params);
	soap_serialize_std__string(soap, &this->ZQ2__setupInfo::cbNotification);
	soap_serialize_std__string(soap, &this->ZQ2__setupInfo::ctxNotification);
	/* transient soap skipped */
}

int ZQ2__setupInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ZQ2__setupInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ZQ2__setupInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ZQ2__setupInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__setupInfo(struct soap *soap, const char *tag, int id, const ZQ2__setupInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__setupInfo), type))
		return soap->error;
	if (soap_out_std__string(soap, "asset", -1, &(a->ZQ2__setupInfo::asset), ""))
		return soap->error;
	if (soap_out_PointerToZQ2__map(soap, "resource", -1, &(a->ZQ2__setupInfo::resource), ""))
		return soap->error;
	if (soap_out_PointerToZQ2__map(soap, "params", -1, &(a->ZQ2__setupInfo::params), ""))
		return soap->error;
	if (soap_out_std__string(soap, "cbNotification", -1, &(a->ZQ2__setupInfo::cbNotification), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ctxNotification", -1, &(a->ZQ2__setupInfo::ctxNotification), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ZQ2__setupInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ZQ2__setupInfo(soap, this, tag, type);
}

SOAP_FMAC3 ZQ2__setupInfo * SOAP_FMAC4 soap_get_ZQ2__setupInfo(struct soap *soap, ZQ2__setupInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__setupInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ZQ2__setupInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ZQ2__setupInfo(soap, tag, this, type);
}

SOAP_FMAC3 ZQ2__setupInfo * SOAP_FMAC4 soap_in_ZQ2__setupInfo(struct soap *soap, const char *tag, ZQ2__setupInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ZQ2__setupInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__setupInfo, sizeof(ZQ2__setupInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ZQ2__setupInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ZQ2__setupInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_asset1 = 1, soap_flag_resource1 = 1, soap_flag_params1 = 1, soap_flag_cbNotification1 = 1, soap_flag_ctxNotification1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_asset1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "asset", &(a->ZQ2__setupInfo::asset), "xsd:string"))
				{	soap_flag_asset1--;
					continue;
				}
			if (soap_flag_resource1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToZQ2__map(soap, "resource", &(a->ZQ2__setupInfo::resource), "ZQ2:map"))
				{	soap_flag_resource1--;
					continue;
				}
			if (soap_flag_params1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToZQ2__map(soap, "params", &(a->ZQ2__setupInfo::params), "ZQ2:map"))
				{	soap_flag_params1--;
					continue;
				}
			if (soap_flag_cbNotification1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "cbNotification", &(a->ZQ2__setupInfo::cbNotification), "xsd:string"))
				{	soap_flag_cbNotification1--;
					continue;
				}
			if (soap_flag_ctxNotification1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ctxNotification", &(a->ZQ2__setupInfo::ctxNotification), "xsd:string"))
				{	soap_flag_ctxNotification1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ZQ2__setupInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__setupInfo, 0, sizeof(ZQ2__setupInfo), 0, soap_copy_ZQ2__setupInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_asset1 > 0 || soap_flag_cbNotification1 > 0 || soap_flag_ctxNotification1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ZQ2__setupInfo * SOAP_FMAC6 soap_new_ZQ2__setupInfo(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__setupInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__setupInfo(struct soap *soap, ZQ2__setupInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ZQ2__setupInfo * SOAP_FMAC4 soap_instantiate_ZQ2__setupInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__setupInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__setupInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ZQ2__setupInfo;
		if (size)
			*size = sizeof(ZQ2__setupInfo);
		((ZQ2__setupInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ZQ2__setupInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ZQ2__setupInfo);
		for (int i = 0; i < n; i++)
			((ZQ2__setupInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ZQ2__setupInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__setupInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ZQ2__setupInfo %p -> %p\n", q, p));
	*(ZQ2__setupInfo*)p = *(ZQ2__setupInfo*)q;
}

void ZQ2__map::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToZQ2__pair(soap, &this->ZQ2__map::ptr);
	soap_default_int(soap, &this->ZQ2__map::size);
	/* transient soap skipped */
}

void ZQ2__map::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToZQ2__pair(soap, &this->ZQ2__map::ptr);
	/* transient soap skipped */
}

int ZQ2__map::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ZQ2__map);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ZQ2__map::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ZQ2__map(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__map(struct soap *soap, const char *tag, int id, const ZQ2__map *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__map), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToZQ2__pair(soap, "ptr", -1, &(a->ZQ2__map::ptr), ""))
		return soap->error;
	if (soap_out_int(soap, "size", -1, &(a->ZQ2__map::size), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ZQ2__map::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ZQ2__map(soap, this, tag, type);
}

SOAP_FMAC3 ZQ2__map * SOAP_FMAC4 soap_get_ZQ2__map(struct soap *soap, ZQ2__map *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__map(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ZQ2__map::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ZQ2__map(soap, tag, this, type);
}

SOAP_FMAC3 ZQ2__map * SOAP_FMAC4 soap_in_ZQ2__map(struct soap *soap, const char *tag, ZQ2__map *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ZQ2__map *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__map, sizeof(ZQ2__map), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ZQ2__map)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ZQ2__map *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_size1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToZQ2__pair(soap, "ptr", &(a->ZQ2__map::ptr), "ZQ2:pair"))
					continue;
			if (soap_flag_size1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "size", &(a->ZQ2__map::size), "xsd:int"))
				{	soap_flag_size1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ZQ2__map *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__map, 0, sizeof(ZQ2__map), 0, soap_copy_ZQ2__map);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_size1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ZQ2__map * SOAP_FMAC6 soap_new_ZQ2__map(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__map(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__map(struct soap *soap, ZQ2__map *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ZQ2__map * SOAP_FMAC4 soap_instantiate_ZQ2__map(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__map(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__map, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ZQ2__map;
		if (size)
			*size = sizeof(ZQ2__map);
		((ZQ2__map*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ZQ2__map[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ZQ2__map);
		for (int i = 0; i < n; i++)
			((ZQ2__map*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ZQ2__map*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__map(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ZQ2__map %p -> %p\n", q, p));
	*(ZQ2__map*)p = *(ZQ2__map*)q;
}

void ZQ2__pair::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ZQ2__pair::key);
	soap_default_std__string(soap, &this->ZQ2__pair::value);
	/* transient soap skipped */
}

void ZQ2__pair::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ZQ2__pair::key);
	soap_serialize_std__string(soap, &this->ZQ2__pair::value);
	/* transient soap skipped */
}

int ZQ2__pair::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ZQ2__pair);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ZQ2__pair::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ZQ2__pair(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__pair(struct soap *soap, const char *tag, int id, const ZQ2__pair *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__pair), type))
		return soap->error;
	if (soap_out_std__string(soap, "key", -1, &(a->ZQ2__pair::key), ""))
		return soap->error;
	if (soap_out_std__string(soap, "value", -1, &(a->ZQ2__pair::value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ZQ2__pair::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ZQ2__pair(soap, this, tag, type);
}

SOAP_FMAC3 ZQ2__pair * SOAP_FMAC4 soap_get_ZQ2__pair(struct soap *soap, ZQ2__pair *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__pair(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ZQ2__pair::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ZQ2__pair(soap, tag, this, type);
}

SOAP_FMAC3 ZQ2__pair * SOAP_FMAC4 soap_in_ZQ2__pair(struct soap *soap, const char *tag, ZQ2__pair *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ZQ2__pair *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__pair, sizeof(ZQ2__pair), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ZQ2__pair)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ZQ2__pair *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_key1 = 1, soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "key", &(a->ZQ2__pair::key), "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "value", &(a->ZQ2__pair::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ZQ2__pair *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__pair, 0, sizeof(ZQ2__pair), 0, soap_copy_ZQ2__pair);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ZQ2__pair * SOAP_FMAC6 soap_new_ZQ2__pair(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__pair(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__pair(struct soap *soap, ZQ2__pair *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ZQ2__pair * SOAP_FMAC4 soap_instantiate_ZQ2__pair(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__pair(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__pair, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ZQ2__pair;
		if (size)
			*size = sizeof(ZQ2__pair);
		((ZQ2__pair*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ZQ2__pair[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ZQ2__pair);
		for (int i = 0; i < n; i++)
			((ZQ2__pair*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ZQ2__pair*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__pair(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ZQ2__pair %p -> %p\n", q, p));
	*(ZQ2__pair*)p = *(ZQ2__pair*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsdl__State(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsdl__State(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsdl__State(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wsdl__State);
	if (soap_out_wsdl__State(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__State(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_wsdl__State), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wsdl__State(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsdl__State(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_wsdl__State(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wsdl__State, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_wsdl__State, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_wsdl__State, 0, sizeof(std::string), 0, soap_copy_wsdl__State);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_wsdl__State(struct soap *soap, int n)
{	return soap_instantiate_wsdl__State(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_wsdl__State(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_wsdl__State(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsdl__State(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsdl__State, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__State(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__notifyStatus(struct soap *soap, struct ZQ2__notifyStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__notifyStatus(struct soap *soap, const struct ZQ2__notifyStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__notifyStatus(struct soap *soap, const struct ZQ2__notifyStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__notifyStatus);
	if (soap_out_ZQ2__notifyStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__notifyStatus(struct soap *soap, const char *tag, int id, const struct ZQ2__notifyStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__notifyStatus), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__notifyStatus * SOAP_FMAC4 soap_get_ZQ2__notifyStatus(struct soap *soap, struct ZQ2__notifyStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__notifyStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__notifyStatus * SOAP_FMAC4 soap_in_ZQ2__notifyStatus(struct soap *soap, const char *tag, struct ZQ2__notifyStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__notifyStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__notifyStatus, sizeof(struct ZQ2__notifyStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ZQ2__notifyStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__notifyStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__notifyStatus, 0, sizeof(struct ZQ2__notifyStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__notifyStatus * SOAP_FMAC6 soap_new_ZQ2__notifyStatus(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__notifyStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__notifyStatus(struct soap *soap, struct ZQ2__notifyStatus *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__notifyStatus * SOAP_FMAC4 soap_instantiate_ZQ2__notifyStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__notifyStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__notifyStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__notifyStatus;
		if (size)
			*size = sizeof(struct ZQ2__notifyStatus);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__notifyStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__notifyStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__notifyStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__notifyStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__notifyStatus %p -> %p\n", q, p));
	*(struct ZQ2__notifyStatus*)p = *(struct ZQ2__notifyStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__notifyStatusResponse(struct soap *soap, struct ZQ2__notifyStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->ctxNotification);
	soap_default_std__string(soap, &a->sessionId);
	soap_default_wsdl__State(soap, &a->state);
	soap_default_std__string(soap, &a->lastError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__notifyStatusResponse(struct soap *soap, const struct ZQ2__notifyStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->ctxNotification);
	soap_serialize_std__string(soap, &a->sessionId);
	soap_serialize_wsdl__State(soap, &a->state);
	soap_serialize_std__string(soap, &a->lastError);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__notifyStatusResponse(struct soap *soap, const struct ZQ2__notifyStatusResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__notifyStatusResponse);
	if (soap_out_ZQ2__notifyStatusResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__notifyStatusResponse(struct soap *soap, const char *tag, int id, const struct ZQ2__notifyStatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__notifyStatusResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "ctxNotification", -1, &a->ctxNotification, ""))
		return soap->error;
	if (soap_out_std__string(soap, "sessionId", -1, &a->sessionId, ""))
		return soap->error;
	if (soap_out_wsdl__State(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_std__string(soap, "lastError", -1, &a->lastError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__notifyStatusResponse * SOAP_FMAC4 soap_get_ZQ2__notifyStatusResponse(struct soap *soap, struct ZQ2__notifyStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__notifyStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__notifyStatusResponse * SOAP_FMAC4 soap_in_ZQ2__notifyStatusResponse(struct soap *soap, const char *tag, struct ZQ2__notifyStatusResponse *a, const char *type)
{
	short soap_flag_ctxNotification = 1, soap_flag_sessionId = 1, soap_flag_state = 1, soap_flag_lastError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__notifyStatusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__notifyStatusResponse, sizeof(struct ZQ2__notifyStatusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ZQ2__notifyStatusResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ctxNotification && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ctxNotification", &a->ctxNotification, "xsd:string"))
				{	soap_flag_ctxNotification--;
					continue;
				}
			if (soap_flag_sessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sessionId", &a->sessionId, "xsd:string"))
				{	soap_flag_sessionId--;
					continue;
				}
			if (soap_flag_state && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_wsdl__State(soap, "state", &a->state, "wsdl:State"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_lastError && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "lastError", &a->lastError, "xsd:string"))
				{	soap_flag_lastError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__notifyStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__notifyStatusResponse, 0, sizeof(struct ZQ2__notifyStatusResponse), 0, soap_copy_ZQ2__notifyStatusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ctxNotification > 0 || soap_flag_sessionId > 0 || soap_flag_state > 0 || soap_flag_lastError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__notifyStatusResponse * SOAP_FMAC6 soap_new_ZQ2__notifyStatusResponse(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__notifyStatusResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__notifyStatusResponse(struct soap *soap, struct ZQ2__notifyStatusResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__notifyStatusResponse * SOAP_FMAC4 soap_instantiate_ZQ2__notifyStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__notifyStatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__notifyStatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__notifyStatusResponse;
		if (size)
			*size = sizeof(struct ZQ2__notifyStatusResponse);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__notifyStatusResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__notifyStatusResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__notifyStatusResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__notifyStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__notifyStatusResponse %p -> %p\n", q, p));
	*(struct ZQ2__notifyStatusResponse*)p = *(struct ZQ2__notifyStatusResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__getStatus(struct soap *soap, struct ZQ2__getStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->sessionId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__getStatus(struct soap *soap, const struct ZQ2__getStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->sessionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__getStatus(struct soap *soap, const struct ZQ2__getStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__getStatus);
	if (soap_out_ZQ2__getStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__getStatus(struct soap *soap, const char *tag, int id, const struct ZQ2__getStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__getStatus), type))
		return soap->error;
	if (soap_out_std__string(soap, "sessionId", -1, &a->sessionId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__getStatus * SOAP_FMAC4 soap_get_ZQ2__getStatus(struct soap *soap, struct ZQ2__getStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__getStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__getStatus * SOAP_FMAC4 soap_in_ZQ2__getStatus(struct soap *soap, const char *tag, struct ZQ2__getStatus *a, const char *type)
{
	short soap_flag_sessionId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__getStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__getStatus, sizeof(struct ZQ2__getStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ZQ2__getStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sessionId", &a->sessionId, "xsd:string"))
				{	soap_flag_sessionId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__getStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__getStatus, 0, sizeof(struct ZQ2__getStatus), 0, soap_copy_ZQ2__getStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__getStatus * SOAP_FMAC6 soap_new_ZQ2__getStatus(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__getStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__getStatus(struct soap *soap, struct ZQ2__getStatus *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__getStatus * SOAP_FMAC4 soap_instantiate_ZQ2__getStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__getStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__getStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__getStatus;
		if (size)
			*size = sizeof(struct ZQ2__getStatus);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__getStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__getStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__getStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__getStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__getStatus %p -> %p\n", q, p));
	*(struct ZQ2__getStatus*)p = *(struct ZQ2__getStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__getStatusResponse(struct soap *soap, struct ZQ2__getStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->upTime);
	soap_default_wsdl__State(soap, &a->state);
	soap_default_std__string(soap, &a->lastError);
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__getStatusResponse(struct soap *soap, const struct ZQ2__getStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_wsdl__State(soap, &a->state);
	soap_serialize_std__string(soap, &a->lastError);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__getStatusResponse(struct soap *soap, const struct ZQ2__getStatusResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__getStatusResponse);
	if (soap_out_ZQ2__getStatusResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__getStatusResponse(struct soap *soap, const char *tag, int id, const struct ZQ2__getStatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__getStatusResponse), type))
		return soap->error;
	if (soap_out_LONG64(soap, "upTime", -1, &a->upTime, ""))
		return soap->error;
	if (soap_out_wsdl__State(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_std__string(soap, "lastError", -1, &a->lastError, ""))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__getStatusResponse * SOAP_FMAC4 soap_get_ZQ2__getStatusResponse(struct soap *soap, struct ZQ2__getStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__getStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__getStatusResponse * SOAP_FMAC4 soap_in_ZQ2__getStatusResponse(struct soap *soap, const char *tag, struct ZQ2__getStatusResponse *a, const char *type)
{
	short soap_flag_upTime = 1, soap_flag_state = 1, soap_flag_lastError = 1, soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__getStatusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__getStatusResponse, sizeof(struct ZQ2__getStatusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ZQ2__getStatusResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_upTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "upTime", &a->upTime, "xsd:long"))
				{	soap_flag_upTime--;
					continue;
				}
			if (soap_flag_state && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_wsdl__State(soap, "state", &a->state, "wsdl:State"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_lastError && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "lastError", &a->lastError, "xsd:string"))
				{	soap_flag_lastError--;
					continue;
				}
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__getStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__getStatusResponse, 0, sizeof(struct ZQ2__getStatusResponse), 0, soap_copy_ZQ2__getStatusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_upTime > 0 || soap_flag_state > 0 || soap_flag_lastError > 0 || soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__getStatusResponse * SOAP_FMAC6 soap_new_ZQ2__getStatusResponse(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__getStatusResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__getStatusResponse(struct soap *soap, struct ZQ2__getStatusResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__getStatusResponse * SOAP_FMAC4 soap_instantiate_ZQ2__getStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__getStatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__getStatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__getStatusResponse;
		if (size)
			*size = sizeof(struct ZQ2__getStatusResponse);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__getStatusResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__getStatusResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__getStatusResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__getStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__getStatusResponse %p -> %p\n", q, p));
	*(struct ZQ2__getStatusResponse*)p = *(struct ZQ2__getStatusResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__teardown(struct soap *soap, struct ZQ2__teardown *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->sessionId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__teardown(struct soap *soap, const struct ZQ2__teardown *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->sessionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__teardown(struct soap *soap, const struct ZQ2__teardown *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__teardown);
	if (soap_out_ZQ2__teardown(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__teardown(struct soap *soap, const char *tag, int id, const struct ZQ2__teardown *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__teardown), type))
		return soap->error;
	if (soap_out_std__string(soap, "sessionId", -1, &a->sessionId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__teardown * SOAP_FMAC4 soap_get_ZQ2__teardown(struct soap *soap, struct ZQ2__teardown *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__teardown(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__teardown * SOAP_FMAC4 soap_in_ZQ2__teardown(struct soap *soap, const char *tag, struct ZQ2__teardown *a, const char *type)
{
	short soap_flag_sessionId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__teardown *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__teardown, sizeof(struct ZQ2__teardown), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ZQ2__teardown(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sessionId", &a->sessionId, "xsd:string"))
				{	soap_flag_sessionId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__teardown *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__teardown, 0, sizeof(struct ZQ2__teardown), 0, soap_copy_ZQ2__teardown);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__teardown * SOAP_FMAC6 soap_new_ZQ2__teardown(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__teardown(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__teardown(struct soap *soap, struct ZQ2__teardown *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__teardown * SOAP_FMAC4 soap_instantiate_ZQ2__teardown(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__teardown(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__teardown, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__teardown;
		if (size)
			*size = sizeof(struct ZQ2__teardown);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__teardown[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__teardown);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__teardown*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__teardown(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__teardown %p -> %p\n", q, p));
	*(struct ZQ2__teardown*)p = *(struct ZQ2__teardown*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__teardownResponse(struct soap *soap, struct ZQ2__teardownResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__teardownResponse(struct soap *soap, const struct ZQ2__teardownResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__teardownResponse(struct soap *soap, const struct ZQ2__teardownResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__teardownResponse);
	if (soap_out_ZQ2__teardownResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__teardownResponse(struct soap *soap, const char *tag, int id, const struct ZQ2__teardownResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__teardownResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__teardownResponse * SOAP_FMAC4 soap_get_ZQ2__teardownResponse(struct soap *soap, struct ZQ2__teardownResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__teardownResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__teardownResponse * SOAP_FMAC4 soap_in_ZQ2__teardownResponse(struct soap *soap, const char *tag, struct ZQ2__teardownResponse *a, const char *type)
{
	short soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__teardownResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__teardownResponse, sizeof(struct ZQ2__teardownResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ZQ2__teardownResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__teardownResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__teardownResponse, 0, sizeof(struct ZQ2__teardownResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__teardownResponse * SOAP_FMAC6 soap_new_ZQ2__teardownResponse(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__teardownResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__teardownResponse(struct soap *soap, struct ZQ2__teardownResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__teardownResponse * SOAP_FMAC4 soap_instantiate_ZQ2__teardownResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__teardownResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__teardownResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__teardownResponse;
		if (size)
			*size = sizeof(struct ZQ2__teardownResponse);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__teardownResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__teardownResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__teardownResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__teardownResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__teardownResponse %p -> %p\n", q, p));
	*(struct ZQ2__teardownResponse*)p = *(struct ZQ2__teardownResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__setup(struct soap *soap, struct ZQ2__setup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->setupInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__setup(struct soap *soap, const struct ZQ2__setup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToZQ2__setupInfo(soap, &a->setupInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__setup(struct soap *soap, const struct ZQ2__setup *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__setup);
	if (soap_out_ZQ2__setup(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__setup(struct soap *soap, const char *tag, int id, const struct ZQ2__setup *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__setup), type))
		return soap->error;
	if (soap_out_PointerToZQ2__setupInfo(soap, "setupInfo", -1, &a->setupInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__setup * SOAP_FMAC4 soap_get_ZQ2__setup(struct soap *soap, struct ZQ2__setup *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__setup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__setup * SOAP_FMAC4 soap_in_ZQ2__setup(struct soap *soap, const char *tag, struct ZQ2__setup *a, const char *type)
{
	short soap_flag_setupInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__setup *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__setup, sizeof(struct ZQ2__setup), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ZQ2__setup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_setupInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToZQ2__setupInfo(soap, "setupInfo", &a->setupInfo, "ZQ2:setupInfo"))
				{	soap_flag_setupInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__setup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__setup, 0, sizeof(struct ZQ2__setup), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__setup * SOAP_FMAC6 soap_new_ZQ2__setup(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__setup(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__setup(struct soap *soap, struct ZQ2__setup *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__setup * SOAP_FMAC4 soap_instantiate_ZQ2__setup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__setup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__setup, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__setup;
		if (size)
			*size = sizeof(struct ZQ2__setup);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__setup[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__setup);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__setup*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__setup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__setup %p -> %p\n", q, p));
	*(struct ZQ2__setup*)p = *(struct ZQ2__setup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ZQ2__setupResponse(struct soap *soap, struct ZQ2__setupResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->resource = NULL;
	soap_default_std__string(soap, &a->sessionId);
	soap_default_std__string(soap, &a->controlURL);
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ZQ2__setupResponse(struct soap *soap, const struct ZQ2__setupResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToZQ2__map(soap, &a->resource);
	soap_serialize_std__string(soap, &a->sessionId);
	soap_serialize_std__string(soap, &a->controlURL);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ZQ2__setupResponse(struct soap *soap, const struct ZQ2__setupResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ZQ2__setupResponse);
	if (soap_out_ZQ2__setupResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ZQ2__setupResponse(struct soap *soap, const char *tag, int id, const struct ZQ2__setupResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ZQ2__setupResponse), type))
		return soap->error;
	if (soap_out_PointerToZQ2__map(soap, "resource", -1, &a->resource, ""))
		return soap->error;
	if (soap_out_std__string(soap, "sessionId", -1, &a->sessionId, ""))
		return soap->error;
	if (soap_out_std__string(soap, "controlURL", -1, &a->controlURL, ""))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ZQ2__setupResponse * SOAP_FMAC4 soap_get_ZQ2__setupResponse(struct soap *soap, struct ZQ2__setupResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ZQ2__setupResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ZQ2__setupResponse * SOAP_FMAC4 soap_in_ZQ2__setupResponse(struct soap *soap, const char *tag, struct ZQ2__setupResponse *a, const char *type)
{
	short soap_flag_resource = 1, soap_flag_sessionId = 1, soap_flag_controlURL = 1, soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ZQ2__setupResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ZQ2__setupResponse, sizeof(struct ZQ2__setupResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ZQ2__setupResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_resource && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToZQ2__map(soap, "resource", &a->resource, "ZQ2:map"))
				{	soap_flag_resource--;
					continue;
				}
			if (soap_flag_sessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sessionId", &a->sessionId, "xsd:string"))
				{	soap_flag_sessionId--;
					continue;
				}
			if (soap_flag_controlURL && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "controlURL", &a->controlURL, "xsd:string"))
				{	soap_flag_controlURL--;
					continue;
				}
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ZQ2__setupResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ZQ2__setupResponse, 0, sizeof(struct ZQ2__setupResponse), 0, soap_copy_ZQ2__setupResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId > 0 || soap_flag_controlURL > 0 || soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ZQ2__setupResponse * SOAP_FMAC6 soap_new_ZQ2__setupResponse(struct soap *soap, int n)
{	return soap_instantiate_ZQ2__setupResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ZQ2__setupResponse(struct soap *soap, struct ZQ2__setupResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ZQ2__setupResponse * SOAP_FMAC4 soap_instantiate_ZQ2__setupResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ZQ2__setupResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ZQ2__setupResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ZQ2__setupResponse;
		if (size)
			*size = sizeof(struct ZQ2__setupResponse);
	}
	else
	{	cp->ptr = (void*)new struct ZQ2__setupResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ZQ2__setupResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ZQ2__setupResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ZQ2__setupResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ZQ2__setupResponse %p -> %p\n", q, p));
	*(struct ZQ2__setupResponse*)p = *(struct ZQ2__setupResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToZQ2__setupInfo(struct soap *soap, ZQ2__setupInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ZQ2__setupInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToZQ2__setupInfo(struct soap *soap, ZQ2__setupInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToZQ2__setupInfo);
	if (soap_out_PointerToZQ2__setupInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToZQ2__setupInfo(struct soap *soap, const char *tag, int id, ZQ2__setupInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ZQ2__setupInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ZQ2__setupInfo ** SOAP_FMAC4 soap_get_PointerToZQ2__setupInfo(struct soap *soap, ZQ2__setupInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToZQ2__setupInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ZQ2__setupInfo ** SOAP_FMAC4 soap_in_PointerToZQ2__setupInfo(struct soap *soap, const char *tag, ZQ2__setupInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ZQ2__setupInfo **)soap_malloc(soap, sizeof(ZQ2__setupInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ZQ2__setupInfo *)soap_instantiate_ZQ2__setupInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ZQ2__setupInfo ** p = (ZQ2__setupInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ZQ2__setupInfo, sizeof(ZQ2__setupInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToZQ2__map(struct soap *soap, ZQ2__map *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ZQ2__map))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToZQ2__map(struct soap *soap, ZQ2__map *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToZQ2__map);
	if (soap_out_PointerToZQ2__map(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToZQ2__map(struct soap *soap, const char *tag, int id, ZQ2__map *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ZQ2__map);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ZQ2__map ** SOAP_FMAC4 soap_get_PointerToZQ2__map(struct soap *soap, ZQ2__map **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToZQ2__map(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ZQ2__map ** SOAP_FMAC4 soap_in_PointerToZQ2__map(struct soap *soap, const char *tag, ZQ2__map **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ZQ2__map **)soap_malloc(soap, sizeof(ZQ2__map *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ZQ2__map *)soap_instantiate_ZQ2__map(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ZQ2__map ** p = (ZQ2__map **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ZQ2__map, sizeof(ZQ2__map), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToZQ2__pair(struct soap *soap, ZQ2__pair *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ZQ2__pair))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToZQ2__pair(struct soap *soap, ZQ2__pair *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToZQ2__pair);
	if (soap_out_PointerToZQ2__pair(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToZQ2__pair(struct soap *soap, const char *tag, int id, ZQ2__pair *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ZQ2__pair);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ZQ2__pair ** SOAP_FMAC4 soap_get_PointerToZQ2__pair(struct soap *soap, ZQ2__pair **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToZQ2__pair(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ZQ2__pair ** SOAP_FMAC4 soap_in_PointerToZQ2__pair(struct soap *soap, const char *tag, ZQ2__pair **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ZQ2__pair **)soap_malloc(soap, sizeof(ZQ2__pair *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ZQ2__pair *)soap_instantiate_ZQ2__pair(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ZQ2__pair ** p = (ZQ2__pair **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ZQ2__pair, sizeof(ZQ2__pair), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, std::vector<ZQ2__pair * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, const std::vector<ZQ2__pair * >*a)
{
	for (std::vector<ZQ2__pair * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToZQ2__pair(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, const char *tag, int id, const std::vector<ZQ2__pair * >*a, const char *type)
{
	for (std::vector<ZQ2__pair * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToZQ2__pair(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ZQ2__pair * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, const char *tag, std::vector<ZQ2__pair * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToZQ2__pair(soap, -1)))
		return NULL;
	ZQ2__pair *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ZQ2__pair, SOAP_TYPE_std__vectorTemplateOfPointerToZQ2__pair, sizeof(ZQ2__pair), 1))
				break;
			if (!soap_in_PointerToZQ2__pair(soap, tag, NULL, "ZQ2:pair"))
				break;
		}
		else
		{
			if (!soap_in_PointerToZQ2__pair(soap, tag, &n, "ZQ2:pair"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ZQ2__pair * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToZQ2__pair(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, std::vector<ZQ2__pair * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ZQ2__pair * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToZQ2__pair(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToZQ2__pair, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ZQ2__pair * >;
		if (size)
			*size = sizeof(std::vector<ZQ2__pair * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ZQ2__pair * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ZQ2__pair * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ZQ2__pair * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToZQ2__pair(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ZQ2__pair * > %p -> %p\n", q, p));
	*(std::vector<ZQ2__pair * >*)p = *(std::vector<ZQ2__pair * >*)q;
}

/* End of soapC.cpp */
