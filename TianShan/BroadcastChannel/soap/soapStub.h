/* soapStub.h
   Generated by gSOAP 2.7.10 from soapMRT.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ZQ2__Enum_1
#define SOAP_TYPE_ZQ2__Enum_1 (13)
/* ZQ2:Enum-1 */
enum ZQ2__Enum_1 {ZQ2__Enum_1__UNKNOWN = 0, ZQ2__Enum_1__SETUP = 1, ZQ2__Enum_1__TEARDOWM = 2};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ZQ2__pair
#define SOAP_TYPE_ZQ2__pair (10)
/* ZQ2:pair */
class SOAP_CMAC ZQ2__pair
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ZQ2__pair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ZQ2__pair() : soap(NULL) { }
	virtual ~ZQ2__pair() { }
};
#endif

#ifndef SOAP_TYPE_ZQ2__map
#define SOAP_TYPE_ZQ2__map (11)
/* ZQ2:map */
class SOAP_CMAC ZQ2__map
{
public:
	std::vector<ZQ2__pair * >ptr;	/* optional element of type ZQ2:pair */
	int size;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ZQ2__map */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ZQ2__map() : size(0), soap(NULL) { }
	virtual ~ZQ2__map() { }
};
#endif

#ifndef SOAP_TYPE_ZQ2__setupInfo
#define SOAP_TYPE_ZQ2__setupInfo (12)
/* ZQ2:setupInfo */
class SOAP_CMAC ZQ2__setupInfo
{
public:
	std::string asset;	/* required element of type xsd:string */
	ZQ2__map *resource;	/* optional element of type ZQ2:map */
	ZQ2__map *params;	/* optional element of type ZQ2:map */
	std::string cbNotification;	/* required element of type xsd:string */
	std::string ctxNotification;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ZQ2__setupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ZQ2__setupInfo() : resource(NULL), params(NULL), soap(NULL) { }
	virtual ~ZQ2__setupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ZQ2__setupResponse
#define SOAP_TYPE_ZQ2__setupResponse (18)
/* ZQ2:setupResponse */
struct ZQ2__setupResponse
{
public:
	ZQ2__map *resource;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ZQ2:map */
	std::string sessionId;	/* required element of type xsd:string */
	std::string controlURL;	/* required element of type xsd:string */
	bool ret;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_ZQ2__setup
#define SOAP_TYPE_ZQ2__setup (23)
/* ZQ2:setup */
struct ZQ2__setup
{
public:
	ZQ2__setupInfo *setupInfo;	/* optional element of type ZQ2:setupInfo */
};
#endif

#ifndef SOAP_TYPE_ZQ2__teardownResponse
#define SOAP_TYPE_ZQ2__teardownResponse (26)
/* ZQ2:teardownResponse */
struct ZQ2__teardownResponse
{
public:
	bool ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_ZQ2__teardown
#define SOAP_TYPE_ZQ2__teardown (27)
/* ZQ2:teardown */
struct ZQ2__teardown
{
public:
	std::string sessionId;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ZQ2__getStatusResponse
#define SOAP_TYPE_ZQ2__getStatusResponse (28)
/* ZQ2:getStatusResponse */
struct ZQ2__getStatusResponse
{
public:
	LONG64 upTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	std::string state;	/* required element of type wsdl:State */
	std::string lastError;	/* required element of type xsd:string */
	bool ret;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_ZQ2__getStatus
#define SOAP_TYPE_ZQ2__getStatus (32)
/* ZQ2:getStatus */
struct ZQ2__getStatus
{
public:
	std::string sessionId;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ZQ2__notifyStatusResponse
#define SOAP_TYPE_ZQ2__notifyStatusResponse (33)
/* ZQ2:notifyStatusResponse */
struct ZQ2__notifyStatusResponse
{
public:
	std::string ctxNotification;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string sessionId;	/* required element of type xsd:string */
	std::string state;	/* required element of type wsdl:State */
	std::string lastError;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ZQ2__notifyStatus
#define SOAP_TYPE_ZQ2__notifyStatus (36)
/* ZQ2:notifyStatus */
struct ZQ2__notifyStatus
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (37)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (38)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (40)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (43)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (44)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_wsdl__State
#define SOAP_TYPE_wsdl__State (9)
typedef std::string wsdl__State;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ZQ2__setup(struct soap*, ZQ2__setupInfo *setupInfo, struct ZQ2__setupResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 ZQ2__teardown(struct soap*, std::string sessionId, bool &ret);

SOAP_FMAC5 int SOAP_FMAC6 ZQ2__getStatus(struct soap*, std::string sessionId, struct ZQ2__getStatusResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 ZQ2__notifyStatus(struct soap*, struct ZQ2__notifyStatusResponse &_param_3);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ZQ2__setup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ZQ2__setupInfo *setupInfo, struct ZQ2__setupResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ZQ2__teardown(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string sessionId, bool &ret);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ZQ2__getStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string sessionId, struct ZQ2__getStatusResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ZQ2__notifyStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ZQ2__notifyStatusResponse &_param_3);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ZQ2__setup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ZQ2__teardown(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ZQ2__getStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ZQ2__notifyStatus(struct soap*);

#endif

/* End of soapStub.h */
