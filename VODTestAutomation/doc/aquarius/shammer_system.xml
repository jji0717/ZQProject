<!--
********************************************************************************
* TITLE
*
* Sledgehammer System Configuration File
*
* DESCRIPTION
*
* The sledgehammer system configuration file defines low-level system
* configuration data.  DO NOT EDIT THIS FILE unless you absolutely know what you
* are doing.
*
* REVISION
*
* $Id: $
*
* The main sledgehammer tag contains the overall sledgehammer configuration.
* Valid child tags of the sledgehammer tag are:
*
* header        - The header information for the file.
*
* configuration - The configuration section.
*
* simulation    - The simulation section.
********************************************************************************
-->
<sledgehammer>
<!--
The following section configures various information regarding this
configuration file.
-->
  <header>
    <!-- The version is the layout version of the configuration file. -->
    <version value="1"/>
    <!-- Keep track of the last time this file was checked into the Revision
    Control System (RCS). -->
    <rcsmodified value="$Date: $"/>
    <!-- Keep track of the RCSy author (who made the last change.) -->
    <rcsmodifer value="$Author: $"/>
    <!-- Keep track of the RCS revision number. -->
    <rcsversion value="$Revision: $"/>
  </header>
<!--
********************************************************************************
* CONFIGURATION
*
* This is the main configuration section.  Valid sub-tags of the configuration
* section include:
*
* log           - This section allows you to configure the various logging
*                 capabilities of the sledgehammer.
*
* itv           - This section allows you to configure the ITV system.  This
*                 includes defining various standard ITV environments, as well
*                 as various customer environments.
********************************************************************************
-->
  <configuration>
    <log file="yes" screen="yes" database="no">
      <logfile path="%ITVROOT%\log\sledgehammer.log" level="1000" size="50000"/>
      <sqlserver host="localhost" database="SledgeHammerData" user="sa"
       password=""/>
    </log>
<!--
The following section is for configuring ITV system parameters.
-->
    <itv>
<!--
********************************************************************************
* SESSION RESOURCE MANAGEMENT
*
* The session creation aspect of creating a video stream is very diverse across
* many different customer environments.  This section allows the user to
* configure the data that is submitted in various session control signals.
*
* The child tags of the <srm> tag can be any or all of:
*
* <sessionsetup>    - customize the session setup request message
********************************************************************************
-->
      <srm>
<!--
Describe the structure of the session setup message.  More specifically,
define the various types of descriptors to be issued to the SRM in both the
server-data portion, and the private application portion of the message.

Define a session-setup configuration for the OpenITV (DNCSType 1) environment.
-->
        <sessionsetup name="OpenITV Environment">
          <!-- Define the descriptors to appear in the SeaChange vendor required data portion. -->
          <serverdata>
<!--
********************************************************************************
* DESCRIPTORS
*
* Descriptors are the basis for building variable length signaling messages
* between clients and servers in the ITV environment.  Descriptors are
* implemented in a TLV fashion, Type/Length/Void meaing that for every
* descriptor block present in a message, there exists a type specification, a
* length specification, and a void specification that actually defines the value
* of the descriptor.
*
* In order to define both the number of descriptors, and their values, in
* client/server signalling, the <descriptor> XML tag is used.  The <descriptor>
* XML tag has the following format:
*
*   <descriptor id="<id>" size="<length in bytes>" mode="<input mode>"
                type="<data-type>">
*       ...
*   </descriptor>
*
* Where,
*
*   id          - is the unique identifier of the descriptor as found in the CM
*                 header file, "dsmccuser.h".  This value corresponds to the
*                 'type' in the TLV philosophy.  This value can either be a
*                 hexidecimal number, or a well-known string value.  Note: if a
*                 well-known string value is specified, the size is not
*                 necessary.
*
*   size        - is the size in bytes of the associated value portion of the
*                 descriptor.  Typical examples are 4 bytes for unsigned longs,
*                 8 bytes for TYPEINSTs, etc.  This value corresponds to the
*                 'length' in the TLV philosophy.
*
*   mode        - is the input mode the parsing application should employ to
*                 extract the value for the descriptor.  The input mode can
*                 either be 'manual' which implies that the parsing application
*                 should read the value for the descriptor from text portion of
*                 the descriptor tag, or 'prompt' which signals the parsing
*                 application to retrieve the value for the descriptor from user
*                 input.
*
*   type        - this attribute defines the method in which the parsing
*                 application should interpret the data associated with this
*                 tag.
*
* Due to the wide range of data-types employed by the descriptors, several
* type attribute specifications are available for the <descriptor> tag to suit
* this purpose.  The following list describes the various type attributes
* available for the static input mode of descriptor values:
*
*   ulong       - interpret the text as a 4 byte unsigned long.  For example, to
*                 represent a 32 bit Purchase ID, the following text string
*                 could be used: "0x01000032".
*
*   binary      - interpret the text as a string representing an array of
*                 bytes in hexadecimal notation.  For example, to represent a 6
*                 byte MAC address, the following text string could be used:
*                 "0B0A0D0F000D".
*
********************************************************************************
-->
            <!-- SSP_SC_PURCHASETIME, size 4 bytes -->
            <descriptor id="0x04" size="4" mode="manual" type="ulong">
              0
            </descriptor>
          </serverdata>
         
          <applicationdata>
          </applicationdata>

        </sessionsetup>

<!--
Define a session-setup configuration for the CableVision (DNCSType 3)
environment.
-->
        <sessionsetup name="CableVision">
          <serverdata>
            <!-- SSP_SC_HOMEID, size 4 bytes -->
            <descriptor id="homeid" mode="manual" type="ulong">
              0x00EFFFFF
            </descriptor>
            <!-- SSP_SC_SMARTCARDID, size 4 bytes -->
            <descriptor id="smartcardid" mode="manual" type="binary">
              0100000A
            </descriptor>
            <!-- SSP_SC_PURCHASEID, size 4 bytes -->
            <descriptor id="0x08" size="4" mode="manual" type="ulong">0
              <!-- no text here because we are prompting for it -->
            </descriptor>
          </serverdata>
          <applicationdata>
            <!-- SSP_SC_PURCHASEID, size 4 bytes -->
            <descriptor id="0x08" size="4" mode="manual" type="ulong">0
            </descriptor>
          </applicationdata>
        </sessionsetup>
      </srm>
    
    </itv>
    
  </configuration>
<!--
********************************************************************************
* SIMULATION
*
* The simulation section contains Control Sequence sets, Client Group
* configurations.
********************************************************************************
-->
  <simulation>
<!--
********************************************************************************
* CLIENTGROUP
*
* A clientgroup represents a logical configuration of a group of client ITV
* applications.  A real-life example would be to consider a clientgroup to be a
* group of set-tops in a particular neihbourhood, or serving area.
*
* The clientgroup tag can have the following attributes:
*
* count             - The number of clients in this particular group.
*
* name              - The name of the clientgroup.
*
* nodegroup         - The Delivery Network nodegroup ID of the group (if
*                     applicable.)
*
* servingarea       - The Serving Area name of the group (if applicable.)
*
* sessioncontrol    - The session control protocol the clients should use.
*
* streamcontrol     - The stream control protocol the clients should use.
********************************************************************************
-->
<!--
    <clientgroup
      count           = "100"
      name            = "The guys in neighbourhood 1"
      nodegroup       = "1"
      servingarea     = "FOOBAR"
    />
 -->   
<!--
********************************************************************************
* CONTROL SEQUENCE TEST SUITE
*
* A control sequence test suite is conceptually a grouping of commands that
* sledgehammer will execute as part of an overall functionality test.  A control
* sequence test suite is defined by the following XML tag:
*
*   <controlsequence name="<test suite name>" iterations="<N>" sleep="<time>"
*   ...
*   </controlsequence>
*
* Where,
*
*   name        - the name of the test suite so it can be referenced in other
*                 sections of the XML document.
*
*   iterations  - the number of times the suite should be executed.
*
*   sleep       - the amount of time that should pass between iterations of the
*                 test suite.
*
* STREAM OPERATION
*
* A stream operation is a command that is to be issued to the CM for stream
* control.  A stream operation is defined by the following XML tag:
*
*   <sop type="<type>" sleep="<time>" timeout="<time>"/>
*
* Where,
*
*   type        - is the specific stream operation to execute such as "play",
*                 "ff", "rw", "pause", "jump", "status".
*
*   sleep       - the amount of time to wait after executing the stream
*                 operation.
*
*   timeout     - the amount of time to wait for an end-of-stream, or
*                 beginning-of-stream message.
*
* NOTES - TIME AND RANGES
*
* The <time> attribute is specified by a number followed by any of "ms", "s", "m", or
* "h", for seconds, minutes, and hours respectively.  Typical examples would be
* "10s" implying 10 seconds, "5m" implying 5 minutes, and "1h" implying 1 hour.
*
* Ranges can also be specified for both numerical quantities, as well as times.
* For example, when specifying a numerical range as "[10, 100]", this implies
* the parsing application should pick a number in between 10 and 100 inclusive.
*
* The <time> attribute can also consist of a range.  For example, when
* specifying a time range as "[10, 20]s", this implies the parsing application
* should pick a number in between 10 and 20 seconds inclusive.
********************************************************************************
-->
    <controlsequence
      name        = "SOP Test Suite - With Pause -"
      iterations  = "10"
      sleep       = "20s"
    >
      <!-- issue a play request, and then sleep for 10 seconds -->
      <sop type="play" sleep="10s"/>
      <!-- issue a fast-forward request -->
      <sop type="ff" sleep="10s"/>
      <!-- wait for an end-of-stream message, but timeout after waiting for 3
      hours -->
      <sop type="waitforeos" timeout="3h"/>
      <!-- now rewind to the beginning -->
      <sop type="rw" sleep="10s"/>
      <!-- again, wait for the beginning-of-stream message, but timeout after
      waiting for 3 hours -->
      <sop type="waitforbos" timeout="3h"/>
      <!-- issue a play request, and then sleep for 10-100 seconds -->
      <sop type="play" sleep="[10, 100]s"/>
      <controlsequence iterations="[10, 20]" sleep="5s">
        <sop type="ff" sleep="[10, 20]s"/>
        <sop type="rw" sleep="[10, 20]s"/>
      </controlsequence>
      <!-- issue a stop request, then sleep for 5 minutes -->
      <sop type="pause" sleep="10s"/>
    </controlsequence>
  
    <controlsequence
      name        = "SOP Test Suite - No Pause -"
      iterations  = "10"
      sleep       = "20s"
    >
      <!-- issue a play request, and then sleep for 10 seconds -->
      <sop type="play" sleep="10s"/>
      <!-- issue a fast-forward request -->
      <sop type="ff" sleep="10s"/>
      <!-- wait for an end-of-stream message, but timeout after waiting for 3
      hours -->
      <sop type="waitforeos" timeout="3h"/>
      <!-- now rewind to the beginning -->
      <sop type="rw" sleep="10s"/>
      <!-- again, wait for the beginning-of-stream message, but timeout after
      waiting for 3 hours -->
      <sop type="waitforbos" timeout="3h"/>
      <!-- issue a play request, and then sleep for 10-100 seconds -->
      <sop type="play" sleep="[10, 100]s"/>
      <controlsequence iterations="[10, 20]" sleep="5s">
        <sop type="ff" sleep="[10, 20]s"/>
        <sop type="rw" sleep="[10, 20]s"/>
      </controlsequence>
   </controlsequence>
    
    <!--
    ********************************************************************************
    * playtime
    *
    * The predefined time periods for assets to use. Different time periods are specified
    * as different usageclasses, assets belonging to a certain usage class are only allowed 
    * to be used if the time is within its usageclass time period. Three predefined <playtime> 
    * is provided here.  
    *******************************************************************************
    -->
    <playtime id="daytime" hours="[7, 16]" usageclass="1"/>
    <playtime id="primetime" hours="[15, 24]" usageclass="3"/>
    <playtime id="nighttime" hours="[22, 7]" usageclass="2"/>
     
  </simulation>

</sledgehammer>
