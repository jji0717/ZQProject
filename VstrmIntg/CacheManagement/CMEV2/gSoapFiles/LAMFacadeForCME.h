/* LAMFacadeForCME.h
   Generated by wsdl2h 1.2.10 from e:\SourceCode\ZQProjs2.0\TianShan\CacheManagement\CMEV2\wsdl\LAMServiceForCME.wsdl and typemap.dat
   2014-03-29 03:10:22 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'WS/typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://www.i-zq.com/services/LAMServiceForCME                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.i-zq.com/services/LAMServiceForCME"

*/

//gsoap ns1   schema namespace:	http://www.i-zq.com/services/LAMServiceForCME
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__AssetList.
class ns1__AssetList;

//  Forward declaration of class ns1__Asset.
class ns1__Asset;

//  Forward declaration of class ns1__ProviderList.
class ns1__ProviderList;

//  Forward declaration of class ns1__Cluster.
class ns1__Cluster;

//  Forward declaration of class ns1__ClusterList.
class ns1__ClusterList;

/// "http://www.i-zq.com/services/LAMServiceForCME":AssetList is a complexType.
class ns1__AssetList
{ public:
/// Element returnCode of type xs:long.
    LONG64                               returnCode                     1;	///< Required element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > assetID                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.i-zq.com/services/LAMServiceForCME":Asset is a complexType.
class ns1__Asset
{ public:
/// Element returnCode of type xs:long.
    LONG64                               returnCode                     1;	///< Required element.
/// Element providerID of type xs:string.
    std::string                          providerID                     1;	///< Required element.
/// Element providerAssetID of type xs:string.
    std::string                          providerAssetID                1;	///< Required element.
/// Element size of type xs:long.
    LONG64                               size                           1;	///< Required element.
/// Element supportFileSize of type xs:long.
    LONG64                               supportFileSize                1;	///< Required element.
/// Element bitRate of type xs:long.
    LONG64                               bitRate                        1;	///< Required element.
/// Element durationSecond of type xs:long.
    LONG64                               durationSecond                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.i-zq.com/services/LAMServiceForCME":ProviderList is a complexType.
class ns1__ProviderList
{ public:
/// Element returnCode of type xs:long.
    LONG64                               returnCode                     1;	///< Required element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > ProviderID                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.i-zq.com/services/LAMServiceForCME":Cluster is a complexType.
class ns1__Cluster
{ public:
/// Element clusterID of type xs:string.
    std::string                          clusterID                      1;	///< Required element.
/// Element cacheable of type xs:int.
    int                                  cacheable                      1;	///< Required element.
/// Element cacheLevel of type xs:int.
    int                                  cacheLevel                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.i-zq.com/services/LAMServiceForCME":ClusterList is a complexType.
class ns1__ClusterList
{ public:
/// Vector of ns1__Cluster* with length 0..unbounded
    std::vector<ns1__Cluster*          > clusters                       0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns2  service name:	LAMServiceForCMESoapBinding 
//gsoap ns2  service type:	LAMFacadeForCME 
//gsoap ns2  service port:	http://www.i-zq.com/services/LAMServiceForCME 
//gsoap ns2  service namespace:	http://cme.integration.am.izq.com 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref LAMServiceForCMESoapBinding

*/

/**

@page LAMServiceForCMESoapBinding Binding "LAMServiceForCMESoapBinding"

@section LAMServiceForCMESoapBinding_operations Operations of Binding  "LAMServiceForCMESoapBinding"
  - @ref ns2__addCache
  - @ref ns2__deleteCache
  - @ref ns2__getAsset
  - @ref ns2__listAsset
  - @ref ns2__listProvider
  - @ref ns2__getClusterConfig
  - @ref ns2__handshake
  - @ref ns2__listCluster
  - @ref ns2__getExportURL
  - @ref ns2__copyFrom

@section LAMServiceForCMESoapBinding_ports Endpoints of Binding  "LAMServiceForCMESoapBinding"
  - http://www.i-zq.com/services/LAMServiceForCME

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * LAMServiceForCMESoapBinding                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns2__addCache                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns2__addCache" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__addCache(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    LONG64                             &_addCacheReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__addCache(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    LONG64                             &_addCacheReturn
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	addCache rpc
//gsoap ns2  service method-encoding:	addCache http://schemas.xmlsoap.org/soap/encoding/
int ns2__addCache(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    LONG64                             &_addCacheReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__deleteCache                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns2__deleteCache" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__deleteCache(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    LONG64                             &_deleteCacheReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__deleteCache(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    LONG64                             &_deleteCacheReturn
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	deleteCache rpc
//gsoap ns2  service method-encoding:	deleteCache http://schemas.xmlsoap.org/soap/encoding/
int ns2__deleteCache(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    LONG64                             &_deleteCacheReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__getAsset                                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__getAssetResponse" of service binding "LAMServiceForCMESoapBinding" operation "ns2__getAsset"
struct ns2__getAssetResponse
{
    ns1__Asset*                         _getAssetReturn;
};

/// Operation "ns2__getAsset" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__getAsset(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    struct ns2__getAssetResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__getAsset(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    struct ns2__getAssetResponse&
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	getAsset rpc
//gsoap ns2  service method-encoding:	getAsset http://schemas.xmlsoap.org/soap/encoding/
int ns2__getAsset(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    struct ns2__getAssetResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__listAsset                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__listAssetResponse" of service binding "LAMServiceForCMESoapBinding" operation "ns2__listAsset"
struct ns2__listAssetResponse
{
    ns1__AssetList*                     _listAssetReturn;
};

/// Operation "ns2__listAsset" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__listAsset(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         clusterID,
    // response parameters:
    struct ns2__listAssetResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__listAsset(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         clusterID,
    // response parameters:
    struct ns2__listAssetResponse&
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	listAsset rpc
//gsoap ns2  service method-encoding:	listAsset http://schemas.xmlsoap.org/soap/encoding/
int ns2__listAsset(
    std::string                         _providerID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    struct ns2__listAssetResponse      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__listProvider                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__listProviderResponse" of service binding "LAMServiceForCMESoapBinding" operation "ns2__listProvider"
struct ns2__listProviderResponse
{
    ns1__ProviderList*                  listProviderReturn;
};

/// Operation "ns2__listProvider" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__listProvider(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns2__listProviderResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__listProvider(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns2__listProviderResponse&
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	listProvider rpc
//gsoap ns2  service method-encoding:	listProvider http://schemas.xmlsoap.org/soap/encoding/
int ns2__listProvider(
    struct ns2__listProviderResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__getClusterConfig                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__getClusterConfigResponse" of service binding "LAMServiceForCMESoapBinding" operation "ns2__getClusterConfig"
struct ns2__getClusterConfigResponse
{
    LONG64                              state;
    LONG64                              totalSize;
    LONG64                              freeSize;
    std::string                         serviceGroup;
    std::string                         nodeIPs;
};

/// Operation "ns2__getClusterConfig" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__getClusterConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         clusterID,
    // response parameters:
    struct ns2__getClusterConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__getClusterConfig(
    struct soap *soap,
    // request parameters:
    std::string                         clusterID,
    // response parameters:
    struct ns2__getClusterConfigResponse&
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	getClusterConfig rpc
//gsoap ns2  service method-encoding:	getClusterConfig http://schemas.xmlsoap.org/soap/encoding/
int ns2__getClusterConfig(
    std::string                         clusterID,	///< Request parameter
    struct ns2__getClusterConfigResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__handshake                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns2__handshake" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__handshake(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         cmeVersion,
    LONG64                              cmeStatus,
    std::string                         cmeEndPoint,
    // response parameters:
    LONG64                             &_handshakeReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__handshake(
    struct soap *soap,
    // request parameters:
    std::string                         cmeVersion,
    LONG64                              cmeStatus,
    std::string                         cmeEndPoint,
    // response parameters:
    LONG64                             &_handshakeReturn
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	handshake rpc
//gsoap ns2  service method-encoding:	handshake http://schemas.xmlsoap.org/soap/encoding/
int ns2__handshake(
    std::string                         _cmeVersion,	///< Request parameter
    LONG64                              _cmeStatus,	///< Request parameter
    std::string                         _cmeEndPoint,	///< Request parameter
    LONG64                             &_handshakeReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__listCluster                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__listClusterResponse" of service binding "LAMServiceForCMESoapBinding" operation "ns2__listCluster"
struct ns2__listClusterResponse
{
    ns1__ClusterList*                   listClusterReturn;
};

/// Operation "ns2__listCluster" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__listCluster(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns2__listClusterResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__listCluster(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns2__listClusterResponse&
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	listCluster rpc
//gsoap ns2  service method-encoding:	listCluster http://schemas.xmlsoap.org/soap/encoding/
int ns2__listCluster(
    struct ns2__listClusterResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__getExportURL                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__getExportURLResponse" of service binding "LAMServiceForCMESoapBinding" operation "ns2__getExportURL"
struct ns2__getExportURLResponse
{
    LONG64                              _returnCode;
    std::string                         _contentType;
    std::string                         _contentSubtype;
    std::string                         _sourceURL;
    std::string                         _userName;
    std::string                         _password;
    LONG64                              _bitrate;
    std::string                         _windowStart;
    std::string                         _windowEnd;
};

/// Operation "ns2__getExportURL" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__getExportURL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    struct ns2__getExportURLResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__getExportURL(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    struct ns2__getExportURLResponse&
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	getExportURL rpc
//gsoap ns2  service method-encoding:	getExportURL http://schemas.xmlsoap.org/soap/encoding/
int ns2__getExportURL(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    struct ns2__getExportURLResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__copyFrom                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns2__copyFrom" of service binding "LAMServiceForCMESoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__copyFrom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    std::string                         contentType,
    std::string                         contentSubtype,
    std::string                         sourceURL,
    std::string                         userName,
    std::string                         password,
    LONG64                              bitrate,
    std::string                         windowStart,
    std::string                         windowEnd,
    // response parameters:
    LONG64                             &_copyFromReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__copyFrom(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    std::string                         contentType,
    std::string                         contentSubtype,
    std::string                         sourceURL,
    std::string                         userName,
    std::string                         password,
    LONG64                              bitrate,
    std::string                         windowStart,
    std::string                         windowEnd,
    // response parameters:
    LONG64                             &_copyFromReturn
  );
@endcode

C++ proxy class (defined in soapLAMServiceForCMESoapBindingProxy.h):
  class LAMServiceForCMESoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns2  service method-style:	copyFrom rpc
//gsoap ns2  service method-encoding:	copyFrom http://schemas.xmlsoap.org/soap/encoding/
int ns2__copyFrom(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    std::string                         _contentType,	///< Request parameter
    std::string                         _contentSubtype,	///< Request parameter
    std::string                         _sourceURL,	///< Request parameter
    std::string                         _userName,	///< Request parameter
    std::string                         _password,	///< Request parameter
    LONG64                              _bitrate,	///< Request parameter
    std::string                         _windowStart,	///< Request parameter
    std::string                         _windowEnd,	///< Request parameter
    LONG64                             &_copyFromReturn	///< Response parameter
);

/* End of LAMFacadeForCME.h */
