/* CMESOAPServer.cpp
   Generated by gSOAP 2.7.10 from CMESOAPService.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "CMESOAPH.h"

namespace CMESOAP {

SOAP_SOURCE_STAMP("@(#) CMESOAPServer.cpp ver 2.7.10 2014-03-12 02:23:34 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:cacheNotification"))
		return soap_serve_ns1__cacheNotification(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sessionNotification"))
		return soap_serve_ns1__sessionNotification(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:importNotification"))
		return soap_serve_ns1__importNotification(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:deletableNotification"))
		return soap_serve_ns1__deletableNotification(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__cacheNotification(struct soap *soap)
{	struct ns1__cacheNotification soap_tmp_ns1__cacheNotification;
	struct ns1__cacheNotificationResponse _param_1;
	soap_default_ns1__cacheNotificationResponse(soap, &_param_1);
	soap_default_ns1__cacheNotification(soap, &soap_tmp_ns1__cacheNotification);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__cacheNotification(soap, &soap_tmp_ns1__cacheNotification, "ns1:cacheNotification", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__cacheNotification(soap, soap_tmp_ns1__cacheNotification._providerID, soap_tmp_ns1__cacheNotification._providerAssetID, soap_tmp_ns1__cacheNotification._clusterID, soap_tmp_ns1__cacheNotification._status, _param_1);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__cacheNotificationResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cacheNotificationResponse(soap, &_param_1, "ns1:cacheNotificationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cacheNotificationResponse(soap, &_param_1, "ns1:cacheNotificationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__sessionNotification(struct soap *soap)
{	struct ns1__sessionNotification soap_tmp_ns1__sessionNotification;
	struct ns1__sessionNotificationResponse _param_2;
	soap_default_ns1__sessionNotificationResponse(soap, &_param_2);
	soap_default_ns1__sessionNotification(soap, &soap_tmp_ns1__sessionNotification);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__sessionNotification(soap, &soap_tmp_ns1__sessionNotification, "ns1:sessionNotification", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__sessionNotification(soap, soap_tmp_ns1__sessionNotification._providerID, soap_tmp_ns1__sessionNotification._providerAssetID, soap_tmp_ns1__sessionNotification._func, soap_tmp_ns1__sessionNotification._clusterID, soap_tmp_ns1__sessionNotification._sessionID, soap_tmp_ns1__sessionNotification._timeStamp, _param_2);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__sessionNotificationResponse(soap, &_param_2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__sessionNotificationResponse(soap, &_param_2, "ns1:sessionNotificationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__sessionNotificationResponse(soap, &_param_2, "ns1:sessionNotificationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__importNotification(struct soap *soap)
{	struct ns1__importNotification soap_tmp_ns1__importNotification;
	struct ns1__importNotificationResponse soap_tmp_ns1__importNotificationResponse;
	soap_default_ns1__importNotificationResponse(soap, &soap_tmp_ns1__importNotificationResponse);
	soap_default_ns1__importNotification(soap, &soap_tmp_ns1__importNotification);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__importNotification(soap, &soap_tmp_ns1__importNotification, "ns1:importNotification", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__importNotification(soap, soap_tmp_ns1__importNotification._providerID, soap_tmp_ns1__importNotification._providerAssetID, soap_tmp_ns1__importNotification._clusterID, soap_tmp_ns1__importNotification._increment, soap_tmp_ns1__importNotification._lifetime, soap_tmp_ns1__importNotificationResponse._importNotificationReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__importNotificationResponse(soap, &soap_tmp_ns1__importNotificationResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__importNotificationResponse(soap, &soap_tmp_ns1__importNotificationResponse, "ns1:importNotificationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__importNotificationResponse(soap, &soap_tmp_ns1__importNotificationResponse, "ns1:importNotificationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__deletableNotification(struct soap *soap)
{	struct ns1__deletableNotification soap_tmp_ns1__deletableNotification;
	struct ns1__deletableNotificationResponse soap_tmp_ns1__deletableNotificationResponse;
	soap_default_ns1__deletableNotificationResponse(soap, &soap_tmp_ns1__deletableNotificationResponse);
	soap_default_ns1__deletableNotification(soap, &soap_tmp_ns1__deletableNotification);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__deletableNotification(soap, &soap_tmp_ns1__deletableNotification, "ns1:deletableNotification", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__deletableNotification(soap, soap_tmp_ns1__deletableNotification._providerID, soap_tmp_ns1__deletableNotification._providerAssetID, soap_tmp_ns1__deletableNotification._clusterID, soap_tmp_ns1__deletableNotificationResponse._deletableNotificationReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__deletableNotificationResponse(soap, &soap_tmp_ns1__deletableNotificationResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deletableNotificationResponse(soap, &soap_tmp_ns1__deletableNotificationResponse, "ns1:deletableNotificationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deletableNotificationResponse(soap, &soap_tmp_ns1__deletableNotificationResponse, "ns1:deletableNotificationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

} // namespace CMESOAP


/* End of CMESOAPServer.cpp */
