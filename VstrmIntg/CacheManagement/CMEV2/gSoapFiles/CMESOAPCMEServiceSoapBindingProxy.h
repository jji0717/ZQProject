/* CMESOAPCMEServiceSoapBindingProxy.h
   Generated by gSOAP 2.7.10 from CMESOAPService.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef CMESOAPCMEServiceSoapBindingProxy_H
#define CMESOAPCMEServiceSoapBindingProxy_H
#include "CMESOAPH.h"

namespace CMESOAP {
class CMEServiceSoapBinding
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'CMEServiceSoapBinding' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	CMEServiceSoapBinding()
	{ soap = soap_new(); endpoint = "http://www.schange.com/services/CMEService"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://www.schange.com/services/CMEService", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~CMEServiceSoapBinding() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'cacheNotification' of service 'CMEServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__cacheNotification(std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 _status, struct ns1__cacheNotificationResponse &_param_1) { return soap ? soap_call_ns1__cacheNotification(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _status, _param_1) : SOAP_EOM; };
	/// Invoke 'sessionNotification' of service 'CMEServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__sessionNotification(std::string _providerID, std::string _providerAssetID, int _func, std::string _clusterID, std::string _sessionID, std::string _timeStamp, struct ns1__sessionNotificationResponse &_param_2) { return soap ? soap_call_ns1__sessionNotification(soap, endpoint, NULL, _providerID, _providerAssetID, _func, _clusterID, _sessionID, _timeStamp, _param_2) : SOAP_EOM; };
	/// Invoke 'importNotification' of service 'CMEServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__importNotification(std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 _increment, LONG64 _lifetime, LONG64 &_importNotificationReturn) { return soap ? soap_call_ns1__importNotification(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _increment, _lifetime, _importNotificationReturn) : SOAP_EOM; };
	/// Invoke 'deletableNotification' of service 'CMEServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int ns1__deletableNotification(std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_deletableNotificationReturn) { return soap ? soap_call_ns1__deletableNotification(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _deletableNotificationReturn) : SOAP_EOM; };
};

} // namespace CMESOAP

#endif
