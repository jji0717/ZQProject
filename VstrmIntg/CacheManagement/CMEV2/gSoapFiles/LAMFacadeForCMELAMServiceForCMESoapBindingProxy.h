/* LAMFacadeForCMELAMServiceForCMESoapBindingProxy.h
   Generated by gSOAP 2.7.10 from LAMFacadeForCME.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef LAMFacadeForCMELAMServiceForCMESoapBindingProxy_H
#define LAMFacadeForCMELAMServiceForCMESoapBindingProxy_H
#include "LAMFacadeForCMEH.h"
class LAMServiceForCMESoapBinding
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'LAMServiceForCMESoapBinding' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	LAMServiceForCMESoapBinding()
	{ soap = soap_new(); endpoint = "http://www.i-zq.com/services/LAMServiceForCME"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://www.i-zq.com/services/LAMServiceForCME", NULL, NULL},
	{"ns2", "http://cme.integration.am.izq.com", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~LAMServiceForCMESoapBinding() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'addCache' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__addCache(std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_addCacheReturn) { return soap ? soap_call_ns2__addCache(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _addCacheReturn) : SOAP_EOM; };
	/// Invoke 'deleteCache' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__deleteCache(std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_deleteCacheReturn) { return soap ? soap_call_ns2__deleteCache(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _deleteCacheReturn) : SOAP_EOM; };
	/// Invoke 'getAsset' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__getAsset(std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getAssetResponse &_param_1) { return soap ? soap_call_ns2__getAsset(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _param_1) : SOAP_EOM; };
	/// Invoke 'listAsset' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__listAsset(std::string _providerID, std::string _clusterID, struct ns2__listAssetResponse &_param_2) { return soap ? soap_call_ns2__listAsset(soap, endpoint, NULL, _providerID, _clusterID, _param_2) : SOAP_EOM; };
	/// Invoke 'listProvider' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__listProvider(struct ns2__listProviderResponse &_param_3) { return soap ? soap_call_ns2__listProvider(soap, endpoint, NULL, _param_3) : SOAP_EOM; };
	/// Invoke 'getClusterConfig' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__getClusterConfig(std::string clusterID, struct ns2__getClusterConfigResponse &_param_4) { return soap ? soap_call_ns2__getClusterConfig(soap, endpoint, NULL, clusterID, _param_4) : SOAP_EOM; };
	/// Invoke 'handshake' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__handshake(std::string _cmeVersion, LONG64 _cmeStatus, std::string _cmeEndPoint, LONG64 &_handshakeReturn) { return soap ? soap_call_ns2__handshake(soap, endpoint, NULL, _cmeVersion, _cmeStatus, _cmeEndPoint, _handshakeReturn) : SOAP_EOM; };
	/// Invoke 'listCluster' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__listCluster(struct ns2__listClusterResponse &_param_5) { return soap ? soap_call_ns2__listCluster(soap, endpoint, NULL, _param_5) : SOAP_EOM; };
	/// Invoke 'getExportURL' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__getExportURL(std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getExportURLResponse &_param_6) { return soap ? soap_call_ns2__getExportURL(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _param_6) : SOAP_EOM; };
	/// Invoke 'copyFrom' of service 'LAMServiceForCMESoapBinding' and return error code (or SOAP_OK)
	virtual int ns2__copyFrom(std::string _providerID, std::string _providerAssetID, std::string _clusterID, std::string _contentType, std::string _contentSubtype, std::string _sourceURL, std::string _userName, std::string _password, LONG64 _bitrate, std::string _windowStart, std::string _windowEnd, LONG64 &_copyFromReturn) { return soap ? soap_call_ns2__copyFrom(soap, endpoint, NULL, _providerID, _providerAssetID, _clusterID, _contentType, _contentSubtype, _sourceURL, _userName, _password, _bitrate, _windowStart, _windowEnd, _copyFromReturn) : SOAP_EOM; };
};
#endif
