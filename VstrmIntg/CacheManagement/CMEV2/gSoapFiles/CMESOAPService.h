/* CMESOAPService.h
   Generated by wsdl2h 1.2.10 from e:\SourceCode\ZQProjs2.0\TianShan\CacheManagement\CMEV2\wsdl\CMEService.wsdl and typemap.dat
   2014-03-29 03:10:22 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'WS/typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://www.schange.com/services/CMEService                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	CMEServiceSoapBinding 
//gsoap ns1  service type:	CMEService 
//gsoap ns1  service port:	http://www.schange.com/services/CMEService 
//gsoap ns1  service namespace:	http://www.schange.com/services/CMEService 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref CMEServiceSoapBinding

*/

/**

@page CMEServiceSoapBinding Binding "CMEServiceSoapBinding"

@section CMEServiceSoapBinding_operations Operations of Binding  "CMEServiceSoapBinding"
  - @ref ns1__cacheNotification
  - @ref ns1__sessionNotification
  - @ref ns1__importNotification
  - @ref ns1__deletableNotification

@section CMEServiceSoapBinding_ports Endpoints of Binding  "CMEServiceSoapBinding"
  - http://www.schange.com/services/CMEService

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * CMEServiceSoapBinding                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns1__cacheNotification                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__cacheNotificationResponse" of service binding "CMEServiceSoapBinding" operation "ns1__cacheNotification"
struct ns1__cacheNotificationResponse
{
};

/// Operation "ns1__cacheNotification" of service binding "CMEServiceSoapBinding"

/**

Operation details:

Service definition of function cacheNotification
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cacheNotification(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    LONG64                              status,
    // response parameters:
    struct ns1__cacheNotificationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cacheNotification(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    LONG64                              status,
    // response parameters:
    struct ns1__cacheNotificationResponse&
  );
@endcode

C++ proxy class (defined in soapCMEServiceSoapBindingProxy.h):
  class CMEServiceSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	cacheNotification rpc
//gsoap ns1  service method-encoding:	cacheNotification http://schemas.xmlsoap.org/soap/encoding/
int ns1__cacheNotification(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    LONG64                              _status,	///< Request parameter
    struct ns1__cacheNotificationResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__sessionNotification                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__sessionNotificationResponse" of service binding "CMEServiceSoapBinding" operation "ns1__sessionNotification"
struct ns1__sessionNotificationResponse
{
};

/// Operation "ns1__sessionNotification" of service binding "CMEServiceSoapBinding"

/**

Operation details:

Service definition of function sessionNotification
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__sessionNotification(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    int                                 func,
    std::string                         clusterID,
    std::string                         sessionID,
    std::string                         timeStamp,
    // response parameters:
    struct ns1__sessionNotificationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__sessionNotification(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    int                                 func,
    std::string                         clusterID,
    std::string                         sessionID,
    std::string                         timeStamp,
    // response parameters:
    struct ns1__sessionNotificationResponse&
  );
@endcode

C++ proxy class (defined in soapCMEServiceSoapBindingProxy.h):
  class CMEServiceSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	sessionNotification rpc
//gsoap ns1  service method-encoding:	sessionNotification http://schemas.xmlsoap.org/soap/encoding/
int ns1__sessionNotification(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    int                                 _func,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    std::string                         _sessionID,	///< Request parameter
    std::string                         _timeStamp,	///< Request parameter
    struct ns1__sessionNotificationResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__importNotification                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__importNotification" of service binding "CMEServiceSoapBinding"

/**

Operation details:

Service definition of function importNotification
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__importNotification(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    LONG64                              increment,
    LONG64                              lifetime,
    // response parameters:
    LONG64                             &_importNotificationReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__importNotification(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    LONG64                              increment,
    LONG64                              lifetime,
    // response parameters:
    LONG64                             &_importNotificationReturn
  );
@endcode

C++ proxy class (defined in soapCMEServiceSoapBindingProxy.h):
  class CMEServiceSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	importNotification rpc
//gsoap ns1  service method-encoding:	importNotification http://schemas.xmlsoap.org/soap/encoding/
int ns1__importNotification(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    LONG64                              _increment,	///< Request parameter
    LONG64                              _lifetime,	///< Request parameter
    LONG64                             &_importNotificationReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__deletableNotification                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deletableNotification" of service binding "CMEServiceSoapBinding"

/**

Operation details:

Service definition of function deletableNotification
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deletableNotification(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    LONG64                             &_deletableNotificationReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deletableNotification(
    struct soap *soap,
    // request parameters:
    std::string                         providerID,
    std::string                         providerAssetID,
    std::string                         clusterID,
    // response parameters:
    LONG64                             &_deletableNotificationReturn
  );
@endcode

C++ proxy class (defined in soapCMEServiceSoapBindingProxy.h):
  class CMEServiceSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	deletableNotification rpc
//gsoap ns1  service method-encoding:	deletableNotification http://schemas.xmlsoap.org/soap/encoding/
int ns1__deletableNotification(
    std::string                         _providerID,	///< Request parameter
    std::string                         _providerAssetID,	///< Request parameter
    std::string                         _clusterID,	///< Request parameter
    LONG64                             &_deletableNotificationReturn	///< Response parameter
);

/* End of CMESOAPService.h */
