/* LAMFacadeForCMEClient.cpp
   Generated by gSOAP 2.7.10 from LAMFacadeForCME.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "LAMFacadeForCMEH.h"

SOAP_SOURCE_STAMP("@(#) LAMFacadeForCMEClient.cpp ver 2.7.10 2014-03-29 04:11:01 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__addCache(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_addCacheReturn)
{	struct ns2__addCache soap_tmp_ns2__addCache;
	struct ns2__addCacheResponse *soap_tmp_ns2__addCacheResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__addCache._providerID = _providerID;
	soap_tmp_ns2__addCache._providerAssetID = _providerAssetID;
	soap_tmp_ns2__addCache._clusterID = _clusterID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__addCache(soap, &soap_tmp_ns2__addCache);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__addCache(soap, &soap_tmp_ns2__addCache, "ns2:addCache", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__addCache(soap, &soap_tmp_ns2__addCache, "ns2:addCache", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &_addCacheReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns2__addCacheResponse = soap_get_ns2__addCacheResponse(soap, NULL, "ns2:addCacheResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_addCacheReturn = soap_tmp_ns2__addCacheResponse->_addCacheReturn;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__deleteCache(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_deleteCacheReturn)
{	struct ns2__deleteCache soap_tmp_ns2__deleteCache;
	struct ns2__deleteCacheResponse *soap_tmp_ns2__deleteCacheResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__deleteCache._providerID = _providerID;
	soap_tmp_ns2__deleteCache._providerAssetID = _providerAssetID;
	soap_tmp_ns2__deleteCache._clusterID = _clusterID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__deleteCache(soap, &soap_tmp_ns2__deleteCache);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__deleteCache(soap, &soap_tmp_ns2__deleteCache, "ns2:deleteCache", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__deleteCache(soap, &soap_tmp_ns2__deleteCache, "ns2:deleteCache", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &_deleteCacheReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns2__deleteCacheResponse = soap_get_ns2__deleteCacheResponse(soap, NULL, "ns2:deleteCacheResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_deleteCacheReturn = soap_tmp_ns2__deleteCacheResponse->_deleteCacheReturn;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__getAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getAssetResponse &_param_1)
{	struct ns2__getAsset soap_tmp_ns2__getAsset;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__getAsset._providerID = _providerID;
	soap_tmp_ns2__getAsset._providerAssetID = _providerAssetID;
	soap_tmp_ns2__getAsset._clusterID = _clusterID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__getAsset(soap, &soap_tmp_ns2__getAsset);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getAsset(soap, &soap_tmp_ns2__getAsset, "ns2:getAsset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getAsset(soap, &soap_tmp_ns2__getAsset, "ns2:getAsset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns2__getAssetResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__getAssetResponse(soap, &_param_1, "ns2:getAssetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__listAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _clusterID, struct ns2__listAssetResponse &_param_2)
{	struct ns2__listAsset soap_tmp_ns2__listAsset;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__listAsset._providerID = _providerID;
	soap_tmp_ns2__listAsset._clusterID = _clusterID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__listAsset(soap, &soap_tmp_ns2__listAsset);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__listAsset(soap, &soap_tmp_ns2__listAsset, "ns2:listAsset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__listAsset(soap, &soap_tmp_ns2__listAsset, "ns2:listAsset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns2__listAssetResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__listAssetResponse(soap, &_param_2, "ns2:listAssetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__listProvider(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__listProviderResponse &_param_3)
{	struct ns2__listProvider soap_tmp_ns2__listProvider;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__listProvider(soap, &soap_tmp_ns2__listProvider);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__listProvider(soap, &soap_tmp_ns2__listProvider, "ns2:listProvider", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__listProvider(soap, &soap_tmp_ns2__listProvider, "ns2:listProvider", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns2__listProviderResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__listProviderResponse(soap, &_param_3, "ns2:listProviderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__getClusterConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string clusterID, struct ns2__getClusterConfigResponse &_param_4)
{	struct ns2__getClusterConfig soap_tmp_ns2__getClusterConfig;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__getClusterConfig.clusterID = clusterID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__getClusterConfig(soap, &soap_tmp_ns2__getClusterConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getClusterConfig(soap, &soap_tmp_ns2__getClusterConfig, "ns2:getClusterConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getClusterConfig(soap, &soap_tmp_ns2__getClusterConfig, "ns2:getClusterConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns2__getClusterConfigResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__getClusterConfigResponse(soap, &_param_4, "ns2:getClusterConfigResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__handshake(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _cmeVersion, LONG64 _cmeStatus, std::string _cmeEndPoint, LONG64 &_handshakeReturn)
{	struct ns2__handshake soap_tmp_ns2__handshake;
	struct ns2__handshakeResponse *soap_tmp_ns2__handshakeResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__handshake._cmeVersion = _cmeVersion;
	soap_tmp_ns2__handshake._cmeStatus = _cmeStatus;
	soap_tmp_ns2__handshake._cmeEndPoint = _cmeEndPoint;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__handshake(soap, &soap_tmp_ns2__handshake);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__handshake(soap, &soap_tmp_ns2__handshake, "ns2:handshake", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__handshake(soap, &soap_tmp_ns2__handshake, "ns2:handshake", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &_handshakeReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns2__handshakeResponse = soap_get_ns2__handshakeResponse(soap, NULL, "ns2:handshakeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_handshakeReturn = soap_tmp_ns2__handshakeResponse->_handshakeReturn;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__listCluster(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__listClusterResponse &_param_5)
{	struct ns2__listCluster soap_tmp_ns2__listCluster;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__listCluster(soap, &soap_tmp_ns2__listCluster);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__listCluster(soap, &soap_tmp_ns2__listCluster, "ns2:listCluster", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__listCluster(soap, &soap_tmp_ns2__listCluster, "ns2:listCluster", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns2__listClusterResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__listClusterResponse(soap, &_param_5, "ns2:listClusterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__getExportURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getExportURLResponse &_param_6)
{	struct ns2__getExportURL soap_tmp_ns2__getExportURL;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__getExportURL._providerID = _providerID;
	soap_tmp_ns2__getExportURL._providerAssetID = _providerAssetID;
	soap_tmp_ns2__getExportURL._clusterID = _clusterID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__getExportURL(soap, &soap_tmp_ns2__getExportURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getExportURL(soap, &soap_tmp_ns2__getExportURL, "ns2:getExportURL", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getExportURL(soap, &soap_tmp_ns2__getExportURL, "ns2:getExportURL", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns2__getExportURLResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__getExportURLResponse(soap, &_param_6, "ns2:getExportURLResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__copyFrom(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, std::string _contentType, std::string _contentSubtype, std::string _sourceURL, std::string _userName, std::string _password, LONG64 _bitrate, std::string _windowStart, std::string _windowEnd, LONG64 &_copyFromReturn)
{	struct ns2__copyFrom soap_tmp_ns2__copyFrom;
	struct ns2__copyFromResponse *soap_tmp_ns2__copyFromResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://www.i-zq.com/services/LAMServiceForCME";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__copyFrom._providerID = _providerID;
	soap_tmp_ns2__copyFrom._providerAssetID = _providerAssetID;
	soap_tmp_ns2__copyFrom._clusterID = _clusterID;
	soap_tmp_ns2__copyFrom._contentType = _contentType;
	soap_tmp_ns2__copyFrom._contentSubtype = _contentSubtype;
	soap_tmp_ns2__copyFrom._sourceURL = _sourceURL;
	soap_tmp_ns2__copyFrom._userName = _userName;
	soap_tmp_ns2__copyFrom._password = _password;
	soap_tmp_ns2__copyFrom._bitrate = _bitrate;
	soap_tmp_ns2__copyFrom._windowStart = _windowStart;
	soap_tmp_ns2__copyFrom._windowEnd = _windowEnd;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__copyFrom(soap, &soap_tmp_ns2__copyFrom);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__copyFrom(soap, &soap_tmp_ns2__copyFrom, "ns2:copyFrom", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__copyFrom(soap, &soap_tmp_ns2__copyFrom, "ns2:copyFrom", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &_copyFromReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns2__copyFromResponse = soap_get_ns2__copyFromResponse(soap, NULL, "ns2:copyFromResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_copyFromReturn = soap_tmp_ns2__copyFromResponse->_copyFromReturn;
	return soap_closesock(soap);
}

/* End of LAMFacadeForCMEClient.cpp */
