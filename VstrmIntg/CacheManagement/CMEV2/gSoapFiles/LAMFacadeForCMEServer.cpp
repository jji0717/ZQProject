/* LAMFacadeForCMEServer.cpp
   Generated by gSOAP 2.7.10 from LAMFacadeForCME.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "LAMFacadeForCMEH.h"

SOAP_SOURCE_STAMP("@(#) LAMFacadeForCMEServer.cpp ver 2.7.10 2014-03-29 04:11:01 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:addCache"))
		return soap_serve_ns2__addCache(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:deleteCache"))
		return soap_serve_ns2__deleteCache(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:getAsset"))
		return soap_serve_ns2__getAsset(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:listAsset"))
		return soap_serve_ns2__listAsset(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:listProvider"))
		return soap_serve_ns2__listProvider(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:getClusterConfig"))
		return soap_serve_ns2__getClusterConfig(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:handshake"))
		return soap_serve_ns2__handshake(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:listCluster"))
		return soap_serve_ns2__listCluster(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:getExportURL"))
		return soap_serve_ns2__getExportURL(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:copyFrom"))
		return soap_serve_ns2__copyFrom(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__addCache(struct soap *soap)
{	struct ns2__addCache soap_tmp_ns2__addCache;
	struct ns2__addCacheResponse soap_tmp_ns2__addCacheResponse;
	soap_default_ns2__addCacheResponse(soap, &soap_tmp_ns2__addCacheResponse);
	soap_default_ns2__addCache(soap, &soap_tmp_ns2__addCache);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__addCache(soap, &soap_tmp_ns2__addCache, "ns2:addCache", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__addCache(soap, soap_tmp_ns2__addCache._providerID, soap_tmp_ns2__addCache._providerAssetID, soap_tmp_ns2__addCache._clusterID, soap_tmp_ns2__addCacheResponse._addCacheReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__addCacheResponse(soap, &soap_tmp_ns2__addCacheResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__addCacheResponse(soap, &soap_tmp_ns2__addCacheResponse, "ns2:addCacheResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__addCacheResponse(soap, &soap_tmp_ns2__addCacheResponse, "ns2:addCacheResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__deleteCache(struct soap *soap)
{	struct ns2__deleteCache soap_tmp_ns2__deleteCache;
	struct ns2__deleteCacheResponse soap_tmp_ns2__deleteCacheResponse;
	soap_default_ns2__deleteCacheResponse(soap, &soap_tmp_ns2__deleteCacheResponse);
	soap_default_ns2__deleteCache(soap, &soap_tmp_ns2__deleteCache);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__deleteCache(soap, &soap_tmp_ns2__deleteCache, "ns2:deleteCache", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__deleteCache(soap, soap_tmp_ns2__deleteCache._providerID, soap_tmp_ns2__deleteCache._providerAssetID, soap_tmp_ns2__deleteCache._clusterID, soap_tmp_ns2__deleteCacheResponse._deleteCacheReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__deleteCacheResponse(soap, &soap_tmp_ns2__deleteCacheResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__deleteCacheResponse(soap, &soap_tmp_ns2__deleteCacheResponse, "ns2:deleteCacheResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__deleteCacheResponse(soap, &soap_tmp_ns2__deleteCacheResponse, "ns2:deleteCacheResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__getAsset(struct soap *soap)
{	struct ns2__getAsset soap_tmp_ns2__getAsset;
	struct ns2__getAssetResponse _param_1;
	soap_default_ns2__getAssetResponse(soap, &_param_1);
	soap_default_ns2__getAsset(soap, &soap_tmp_ns2__getAsset);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__getAsset(soap, &soap_tmp_ns2__getAsset, "ns2:getAsset", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__getAsset(soap, soap_tmp_ns2__getAsset._providerID, soap_tmp_ns2__getAsset._providerAssetID, soap_tmp_ns2__getAsset._clusterID, _param_1);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__getAssetResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getAssetResponse(soap, &_param_1, "ns2:getAssetResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getAssetResponse(soap, &_param_1, "ns2:getAssetResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__listAsset(struct soap *soap)
{	struct ns2__listAsset soap_tmp_ns2__listAsset;
	struct ns2__listAssetResponse _param_2;
	soap_default_ns2__listAssetResponse(soap, &_param_2);
	soap_default_ns2__listAsset(soap, &soap_tmp_ns2__listAsset);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__listAsset(soap, &soap_tmp_ns2__listAsset, "ns2:listAsset", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__listAsset(soap, soap_tmp_ns2__listAsset._providerID, soap_tmp_ns2__listAsset._clusterID, _param_2);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__listAssetResponse(soap, &_param_2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__listAssetResponse(soap, &_param_2, "ns2:listAssetResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__listAssetResponse(soap, &_param_2, "ns2:listAssetResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__listProvider(struct soap *soap)
{	struct ns2__listProvider soap_tmp_ns2__listProvider;
	struct ns2__listProviderResponse _param_3;
	soap_default_ns2__listProviderResponse(soap, &_param_3);
	soap_default_ns2__listProvider(soap, &soap_tmp_ns2__listProvider);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__listProvider(soap, &soap_tmp_ns2__listProvider, "ns2:listProvider", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__listProvider(soap, _param_3);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__listProviderResponse(soap, &_param_3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__listProviderResponse(soap, &_param_3, "ns2:listProviderResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__listProviderResponse(soap, &_param_3, "ns2:listProviderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__getClusterConfig(struct soap *soap)
{	struct ns2__getClusterConfig soap_tmp_ns2__getClusterConfig;
	struct ns2__getClusterConfigResponse _param_4;
	soap_default_ns2__getClusterConfigResponse(soap, &_param_4);
	soap_default_ns2__getClusterConfig(soap, &soap_tmp_ns2__getClusterConfig);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__getClusterConfig(soap, &soap_tmp_ns2__getClusterConfig, "ns2:getClusterConfig", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__getClusterConfig(soap, soap_tmp_ns2__getClusterConfig.clusterID, _param_4);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__getClusterConfigResponse(soap, &_param_4);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getClusterConfigResponse(soap, &_param_4, "ns2:getClusterConfigResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getClusterConfigResponse(soap, &_param_4, "ns2:getClusterConfigResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__handshake(struct soap *soap)
{	struct ns2__handshake soap_tmp_ns2__handshake;
	struct ns2__handshakeResponse soap_tmp_ns2__handshakeResponse;
	soap_default_ns2__handshakeResponse(soap, &soap_tmp_ns2__handshakeResponse);
	soap_default_ns2__handshake(soap, &soap_tmp_ns2__handshake);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__handshake(soap, &soap_tmp_ns2__handshake, "ns2:handshake", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__handshake(soap, soap_tmp_ns2__handshake._cmeVersion, soap_tmp_ns2__handshake._cmeStatus, soap_tmp_ns2__handshake._cmeEndPoint, soap_tmp_ns2__handshakeResponse._handshakeReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__handshakeResponse(soap, &soap_tmp_ns2__handshakeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__handshakeResponse(soap, &soap_tmp_ns2__handshakeResponse, "ns2:handshakeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__handshakeResponse(soap, &soap_tmp_ns2__handshakeResponse, "ns2:handshakeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__listCluster(struct soap *soap)
{	struct ns2__listCluster soap_tmp_ns2__listCluster;
	struct ns2__listClusterResponse _param_5;
	soap_default_ns2__listClusterResponse(soap, &_param_5);
	soap_default_ns2__listCluster(soap, &soap_tmp_ns2__listCluster);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__listCluster(soap, &soap_tmp_ns2__listCluster, "ns2:listCluster", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__listCluster(soap, _param_5);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__listClusterResponse(soap, &_param_5);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__listClusterResponse(soap, &_param_5, "ns2:listClusterResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__listClusterResponse(soap, &_param_5, "ns2:listClusterResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__getExportURL(struct soap *soap)
{	struct ns2__getExportURL soap_tmp_ns2__getExportURL;
	struct ns2__getExportURLResponse _param_6;
	soap_default_ns2__getExportURLResponse(soap, &_param_6);
	soap_default_ns2__getExportURL(soap, &soap_tmp_ns2__getExportURL);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__getExportURL(soap, &soap_tmp_ns2__getExportURL, "ns2:getExportURL", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__getExportURL(soap, soap_tmp_ns2__getExportURL._providerID, soap_tmp_ns2__getExportURL._providerAssetID, soap_tmp_ns2__getExportURL._clusterID, _param_6);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__getExportURLResponse(soap, &_param_6);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getExportURLResponse(soap, &_param_6, "ns2:getExportURLResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getExportURLResponse(soap, &_param_6, "ns2:getExportURLResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__copyFrom(struct soap *soap)
{	struct ns2__copyFrom soap_tmp_ns2__copyFrom;
	struct ns2__copyFromResponse soap_tmp_ns2__copyFromResponse;
	soap_default_ns2__copyFromResponse(soap, &soap_tmp_ns2__copyFromResponse);
	soap_default_ns2__copyFrom(soap, &soap_tmp_ns2__copyFrom);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns2__copyFrom(soap, &soap_tmp_ns2__copyFrom, "ns2:copyFrom", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__copyFrom(soap, soap_tmp_ns2__copyFrom._providerID, soap_tmp_ns2__copyFrom._providerAssetID, soap_tmp_ns2__copyFrom._clusterID, soap_tmp_ns2__copyFrom._contentType, soap_tmp_ns2__copyFrom._contentSubtype, soap_tmp_ns2__copyFrom._sourceURL, soap_tmp_ns2__copyFrom._userName, soap_tmp_ns2__copyFrom._password, soap_tmp_ns2__copyFrom._bitrate, soap_tmp_ns2__copyFrom._windowStart, soap_tmp_ns2__copyFrom._windowEnd, soap_tmp_ns2__copyFromResponse._copyFromReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__copyFromResponse(soap, &soap_tmp_ns2__copyFromResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__copyFromResponse(soap, &soap_tmp_ns2__copyFromResponse, "ns2:copyFromResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__copyFromResponse(soap, &soap_tmp_ns2__copyFromResponse, "ns2:copyFromResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of LAMFacadeForCMEServer.cpp */
