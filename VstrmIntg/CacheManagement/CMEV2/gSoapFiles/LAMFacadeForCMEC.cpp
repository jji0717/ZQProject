/* LAMFacadeForCMEC.cpp
   Generated by gSOAP 2.7.10 from LAMFacadeForCME.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "LAMFacadeForCMEH.h"

SOAP_SOURCE_STAMP("@(#) LAMFacadeForCMEC.cpp ver 2.7.10 2014-03-29 04:11:01 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__ClusterList:
		return soap_in_ns1__ClusterList(soap, NULL, NULL, "ns1:ClusterList");
	case SOAP_TYPE_ns1__Cluster:
		return soap_in_ns1__Cluster(soap, NULL, NULL, "ns1:Cluster");
	case SOAP_TYPE_ns1__ProviderList:
		return soap_in_ns1__ProviderList(soap, NULL, NULL, "ns1:ProviderList");
	case SOAP_TYPE_ns1__Asset:
		return soap_in_ns1__Asset(soap, NULL, NULL, "ns1:Asset");
	case SOAP_TYPE_ns1__AssetList:
		return soap_in_ns1__AssetList(soap, NULL, NULL, "ns1:AssetList");
	case SOAP_TYPE_ns2__copyFrom:
		return soap_in_ns2__copyFrom(soap, NULL, NULL, "ns2:copyFrom");
	case SOAP_TYPE_ns2__copyFromResponse:
		return soap_in_ns2__copyFromResponse(soap, NULL, NULL, "ns2:copyFromResponse");
	case SOAP_TYPE_ns2__getExportURL:
		return soap_in_ns2__getExportURL(soap, NULL, NULL, "ns2:getExportURL");
	case SOAP_TYPE_ns2__getExportURLResponse:
		return soap_in_ns2__getExportURLResponse(soap, NULL, NULL, "ns2:getExportURLResponse");
	case SOAP_TYPE_ns2__listCluster:
		return soap_in_ns2__listCluster(soap, NULL, NULL, "ns2:listCluster");
	case SOAP_TYPE_ns2__listClusterResponse:
		return soap_in_ns2__listClusterResponse(soap, NULL, NULL, "ns2:listClusterResponse");
	case SOAP_TYPE_ns2__handshake:
		return soap_in_ns2__handshake(soap, NULL, NULL, "ns2:handshake");
	case SOAP_TYPE_ns2__handshakeResponse:
		return soap_in_ns2__handshakeResponse(soap, NULL, NULL, "ns2:handshakeResponse");
	case SOAP_TYPE_ns2__getClusterConfig:
		return soap_in_ns2__getClusterConfig(soap, NULL, NULL, "ns2:getClusterConfig");
	case SOAP_TYPE_ns2__getClusterConfigResponse:
		return soap_in_ns2__getClusterConfigResponse(soap, NULL, NULL, "ns2:getClusterConfigResponse");
	case SOAP_TYPE_ns2__listProvider:
		return soap_in_ns2__listProvider(soap, NULL, NULL, "ns2:listProvider");
	case SOAP_TYPE_ns2__listProviderResponse:
		return soap_in_ns2__listProviderResponse(soap, NULL, NULL, "ns2:listProviderResponse");
	case SOAP_TYPE_ns2__listAsset:
		return soap_in_ns2__listAsset(soap, NULL, NULL, "ns2:listAsset");
	case SOAP_TYPE_ns2__listAssetResponse:
		return soap_in_ns2__listAssetResponse(soap, NULL, NULL, "ns2:listAssetResponse");
	case SOAP_TYPE_ns2__getAsset:
		return soap_in_ns2__getAsset(soap, NULL, NULL, "ns2:getAsset");
	case SOAP_TYPE_ns2__getAssetResponse:
		return soap_in_ns2__getAssetResponse(soap, NULL, NULL, "ns2:getAssetResponse");
	case SOAP_TYPE_ns2__deleteCache:
		return soap_in_ns2__deleteCache(soap, NULL, NULL, "ns2:deleteCache");
	case SOAP_TYPE_ns2__deleteCacheResponse:
		return soap_in_ns2__deleteCacheResponse(soap, NULL, NULL, "ns2:deleteCacheResponse");
	case SOAP_TYPE_ns2__addCache:
		return soap_in_ns2__addCache(soap, NULL, NULL, "ns2:addCache");
	case SOAP_TYPE_ns2__addCacheResponse:
		return soap_in_ns2__addCacheResponse(soap, NULL, NULL, "ns2:addCacheResponse");
	case SOAP_TYPE_PointerTons1__ClusterList:
		return soap_in_PointerTons1__ClusterList(soap, NULL, NULL, "ns1:ClusterList");
	case SOAP_TYPE_PointerTons1__ProviderList:
		return soap_in_PointerTons1__ProviderList(soap, NULL, NULL, "ns1:ProviderList");
	case SOAP_TYPE_PointerTons1__AssetList:
		return soap_in_PointerTons1__AssetList(soap, NULL, NULL, "ns1:AssetList");
	case SOAP_TYPE_PointerTons1__Asset:
		return soap_in_PointerTons1__Asset(soap, NULL, NULL, "ns1:Asset");
	case SOAP_TYPE_PointerTons1__Cluster:
		return soap_in_PointerTons1__Cluster(soap, NULL, NULL, "ns1:Cluster");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ClusterList"))
		{	*type = SOAP_TYPE_ns1__ClusterList;
			return soap_in_ns1__ClusterList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Cluster"))
		{	*type = SOAP_TYPE_ns1__Cluster;
			return soap_in_ns1__Cluster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ProviderList"))
		{	*type = SOAP_TYPE_ns1__ProviderList;
			return soap_in_ns1__ProviderList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Asset"))
		{	*type = SOAP_TYPE_ns1__Asset;
			return soap_in_ns1__Asset(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AssetList"))
		{	*type = SOAP_TYPE_ns1__AssetList;
			return soap_in_ns1__AssetList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:copyFrom"))
		{	*type = SOAP_TYPE_ns2__copyFrom;
			return soap_in_ns2__copyFrom(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:copyFromResponse"))
		{	*type = SOAP_TYPE_ns2__copyFromResponse;
			return soap_in_ns2__copyFromResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getExportURL"))
		{	*type = SOAP_TYPE_ns2__getExportURL;
			return soap_in_ns2__getExportURL(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getExportURLResponse"))
		{	*type = SOAP_TYPE_ns2__getExportURLResponse;
			return soap_in_ns2__getExportURLResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:listCluster"))
		{	*type = SOAP_TYPE_ns2__listCluster;
			return soap_in_ns2__listCluster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:listClusterResponse"))
		{	*type = SOAP_TYPE_ns2__listClusterResponse;
			return soap_in_ns2__listClusterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:handshake"))
		{	*type = SOAP_TYPE_ns2__handshake;
			return soap_in_ns2__handshake(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:handshakeResponse"))
		{	*type = SOAP_TYPE_ns2__handshakeResponse;
			return soap_in_ns2__handshakeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getClusterConfig"))
		{	*type = SOAP_TYPE_ns2__getClusterConfig;
			return soap_in_ns2__getClusterConfig(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getClusterConfigResponse"))
		{	*type = SOAP_TYPE_ns2__getClusterConfigResponse;
			return soap_in_ns2__getClusterConfigResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:listProvider"))
		{	*type = SOAP_TYPE_ns2__listProvider;
			return soap_in_ns2__listProvider(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:listProviderResponse"))
		{	*type = SOAP_TYPE_ns2__listProviderResponse;
			return soap_in_ns2__listProviderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:listAsset"))
		{	*type = SOAP_TYPE_ns2__listAsset;
			return soap_in_ns2__listAsset(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:listAssetResponse"))
		{	*type = SOAP_TYPE_ns2__listAssetResponse;
			return soap_in_ns2__listAssetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getAsset"))
		{	*type = SOAP_TYPE_ns2__getAsset;
			return soap_in_ns2__getAsset(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getAssetResponse"))
		{	*type = SOAP_TYPE_ns2__getAssetResponse;
			return soap_in_ns2__getAssetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:deleteCache"))
		{	*type = SOAP_TYPE_ns2__deleteCache;
			return soap_in_ns2__deleteCache(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:deleteCacheResponse"))
		{	*type = SOAP_TYPE_ns2__deleteCacheResponse;
			return soap_in_ns2__deleteCacheResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:addCache"))
		{	*type = SOAP_TYPE_ns2__addCache;
			return soap_in_ns2__addCache(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:addCacheResponse"))
		{	*type = SOAP_TYPE_ns2__addCacheResponse;
			return soap_in_ns2__addCacheResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns1__ClusterList:
		return ((ns1__ClusterList *)ptr)->soap_out(soap, tag, id, "ns1:ClusterList");
	case SOAP_TYPE_ns1__Cluster:
		return ((ns1__Cluster *)ptr)->soap_out(soap, tag, id, "ns1:Cluster");
	case SOAP_TYPE_ns1__ProviderList:
		return ((ns1__ProviderList *)ptr)->soap_out(soap, tag, id, "ns1:ProviderList");
	case SOAP_TYPE_ns1__Asset:
		return ((ns1__Asset *)ptr)->soap_out(soap, tag, id, "ns1:Asset");
	case SOAP_TYPE_ns1__AssetList:
		return ((ns1__AssetList *)ptr)->soap_out(soap, tag, id, "ns1:AssetList");
	case SOAP_TYPE_ns2__copyFrom:
		return soap_out_ns2__copyFrom(soap, tag, id, (const struct ns2__copyFrom *)ptr, "ns2:copyFrom");
	case SOAP_TYPE_ns2__copyFromResponse:
		return soap_out_ns2__copyFromResponse(soap, tag, id, (const struct ns2__copyFromResponse *)ptr, "ns2:copyFromResponse");
	case SOAP_TYPE_ns2__getExportURL:
		return soap_out_ns2__getExportURL(soap, tag, id, (const struct ns2__getExportURL *)ptr, "ns2:getExportURL");
	case SOAP_TYPE_ns2__getExportURLResponse:
		return soap_out_ns2__getExportURLResponse(soap, tag, id, (const struct ns2__getExportURLResponse *)ptr, "ns2:getExportURLResponse");
	case SOAP_TYPE_ns2__listCluster:
		return soap_out_ns2__listCluster(soap, tag, id, (const struct ns2__listCluster *)ptr, "ns2:listCluster");
	case SOAP_TYPE_ns2__listClusterResponse:
		return soap_out_ns2__listClusterResponse(soap, tag, id, (const struct ns2__listClusterResponse *)ptr, "ns2:listClusterResponse");
	case SOAP_TYPE_ns2__handshake:
		return soap_out_ns2__handshake(soap, tag, id, (const struct ns2__handshake *)ptr, "ns2:handshake");
	case SOAP_TYPE_ns2__handshakeResponse:
		return soap_out_ns2__handshakeResponse(soap, tag, id, (const struct ns2__handshakeResponse *)ptr, "ns2:handshakeResponse");
	case SOAP_TYPE_ns2__getClusterConfig:
		return soap_out_ns2__getClusterConfig(soap, tag, id, (const struct ns2__getClusterConfig *)ptr, "ns2:getClusterConfig");
	case SOAP_TYPE_ns2__getClusterConfigResponse:
		return soap_out_ns2__getClusterConfigResponse(soap, tag, id, (const struct ns2__getClusterConfigResponse *)ptr, "ns2:getClusterConfigResponse");
	case SOAP_TYPE_ns2__listProvider:
		return soap_out_ns2__listProvider(soap, tag, id, (const struct ns2__listProvider *)ptr, "ns2:listProvider");
	case SOAP_TYPE_ns2__listProviderResponse:
		return soap_out_ns2__listProviderResponse(soap, tag, id, (const struct ns2__listProviderResponse *)ptr, "ns2:listProviderResponse");
	case SOAP_TYPE_ns2__listAsset:
		return soap_out_ns2__listAsset(soap, tag, id, (const struct ns2__listAsset *)ptr, "ns2:listAsset");
	case SOAP_TYPE_ns2__listAssetResponse:
		return soap_out_ns2__listAssetResponse(soap, tag, id, (const struct ns2__listAssetResponse *)ptr, "ns2:listAssetResponse");
	case SOAP_TYPE_ns2__getAsset:
		return soap_out_ns2__getAsset(soap, tag, id, (const struct ns2__getAsset *)ptr, "ns2:getAsset");
	case SOAP_TYPE_ns2__getAssetResponse:
		return soap_out_ns2__getAssetResponse(soap, tag, id, (const struct ns2__getAssetResponse *)ptr, "ns2:getAssetResponse");
	case SOAP_TYPE_ns2__deleteCache:
		return soap_out_ns2__deleteCache(soap, tag, id, (const struct ns2__deleteCache *)ptr, "ns2:deleteCache");
	case SOAP_TYPE_ns2__deleteCacheResponse:
		return soap_out_ns2__deleteCacheResponse(soap, tag, id, (const struct ns2__deleteCacheResponse *)ptr, "ns2:deleteCacheResponse");
	case SOAP_TYPE_ns2__addCache:
		return soap_out_ns2__addCache(soap, tag, id, (const struct ns2__addCache *)ptr, "ns2:addCache");
	case SOAP_TYPE_ns2__addCacheResponse:
		return soap_out_ns2__addCacheResponse(soap, tag, id, (const struct ns2__addCacheResponse *)ptr, "ns2:addCacheResponse");
	case SOAP_TYPE_PointerTons1__ClusterList:
		return soap_out_PointerTons1__ClusterList(soap, tag, id, (ns1__ClusterList *const*)ptr, "ns1:ClusterList");
	case SOAP_TYPE_PointerTons1__ProviderList:
		return soap_out_PointerTons1__ProviderList(soap, tag, id, (ns1__ProviderList *const*)ptr, "ns1:ProviderList");
	case SOAP_TYPE_PointerTons1__AssetList:
		return soap_out_PointerTons1__AssetList(soap, tag, id, (ns1__AssetList *const*)ptr, "ns1:AssetList");
	case SOAP_TYPE_PointerTons1__Asset:
		return soap_out_PointerTons1__Asset(soap, tag, id, (ns1__Asset *const*)ptr, "ns1:Asset");
	case SOAP_TYPE_PointerTons1__Cluster:
		return soap_out_PointerTons1__Cluster(soap, tag, id, (ns1__Cluster *const*)ptr, "ns1:Cluster");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__ClusterList:
		((ns1__ClusterList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Cluster:
		((ns1__Cluster *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ProviderList:
		((ns1__ProviderList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Asset:
		((ns1__Asset *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__AssetList:
		((ns1__AssetList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__copyFrom:
		soap_serialize_ns2__copyFrom(soap, (const struct ns2__copyFrom *)ptr);
		break;
	case SOAP_TYPE_ns2__copyFromResponse:
		soap_serialize_ns2__copyFromResponse(soap, (const struct ns2__copyFromResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__getExportURL:
		soap_serialize_ns2__getExportURL(soap, (const struct ns2__getExportURL *)ptr);
		break;
	case SOAP_TYPE_ns2__getExportURLResponse:
		soap_serialize_ns2__getExportURLResponse(soap, (const struct ns2__getExportURLResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__listCluster:
		soap_serialize_ns2__listCluster(soap, (const struct ns2__listCluster *)ptr);
		break;
	case SOAP_TYPE_ns2__listClusterResponse:
		soap_serialize_ns2__listClusterResponse(soap, (const struct ns2__listClusterResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__handshake:
		soap_serialize_ns2__handshake(soap, (const struct ns2__handshake *)ptr);
		break;
	case SOAP_TYPE_ns2__handshakeResponse:
		soap_serialize_ns2__handshakeResponse(soap, (const struct ns2__handshakeResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__getClusterConfig:
		soap_serialize_ns2__getClusterConfig(soap, (const struct ns2__getClusterConfig *)ptr);
		break;
	case SOAP_TYPE_ns2__getClusterConfigResponse:
		soap_serialize_ns2__getClusterConfigResponse(soap, (const struct ns2__getClusterConfigResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__listProvider:
		soap_serialize_ns2__listProvider(soap, (const struct ns2__listProvider *)ptr);
		break;
	case SOAP_TYPE_ns2__listProviderResponse:
		soap_serialize_ns2__listProviderResponse(soap, (const struct ns2__listProviderResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__listAsset:
		soap_serialize_ns2__listAsset(soap, (const struct ns2__listAsset *)ptr);
		break;
	case SOAP_TYPE_ns2__listAssetResponse:
		soap_serialize_ns2__listAssetResponse(soap, (const struct ns2__listAssetResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__getAsset:
		soap_serialize_ns2__getAsset(soap, (const struct ns2__getAsset *)ptr);
		break;
	case SOAP_TYPE_ns2__getAssetResponse:
		soap_serialize_ns2__getAssetResponse(soap, (const struct ns2__getAssetResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__deleteCache:
		soap_serialize_ns2__deleteCache(soap, (const struct ns2__deleteCache *)ptr);
		break;
	case SOAP_TYPE_ns2__deleteCacheResponse:
		soap_serialize_ns2__deleteCacheResponse(soap, (const struct ns2__deleteCacheResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__addCache:
		soap_serialize_ns2__addCache(soap, (const struct ns2__addCache *)ptr);
		break;
	case SOAP_TYPE_ns2__addCacheResponse:
		soap_serialize_ns2__addCacheResponse(soap, (const struct ns2__addCacheResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ClusterList:
		soap_serialize_PointerTons1__ClusterList(soap, (ns1__ClusterList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ProviderList:
		soap_serialize_PointerTons1__ProviderList(soap, (ns1__ProviderList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__AssetList:
		soap_serialize_PointerTons1__AssetList(soap, (ns1__AssetList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Asset:
		soap_serialize_PointerTons1__Asset(soap, (ns1__Asset *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Cluster:
		soap_serialize_PointerTons1__Cluster(soap, (ns1__Cluster *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AssetList:
		return (void*)soap_instantiate_ns1__AssetList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Asset:
		return (void*)soap_instantiate_ns1__Asset(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ProviderList:
		return (void*)soap_instantiate_ns1__ProviderList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Cluster:
		return (void*)soap_instantiate_ns1__Cluster(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ClusterList:
		return (void*)soap_instantiate_ns1__ClusterList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__addCacheResponse:
		return (void*)soap_instantiate_ns2__addCacheResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__addCache:
		return (void*)soap_instantiate_ns2__addCache(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__deleteCacheResponse:
		return (void*)soap_instantiate_ns2__deleteCacheResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__deleteCache:
		return (void*)soap_instantiate_ns2__deleteCache(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getAssetResponse:
		return (void*)soap_instantiate_ns2__getAssetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getAsset:
		return (void*)soap_instantiate_ns2__getAsset(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listAssetResponse:
		return (void*)soap_instantiate_ns2__listAssetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listAsset:
		return (void*)soap_instantiate_ns2__listAsset(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listProviderResponse:
		return (void*)soap_instantiate_ns2__listProviderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listProvider:
		return (void*)soap_instantiate_ns2__listProvider(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getClusterConfigResponse:
		return (void*)soap_instantiate_ns2__getClusterConfigResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getClusterConfig:
		return (void*)soap_instantiate_ns2__getClusterConfig(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__handshakeResponse:
		return (void*)soap_instantiate_ns2__handshakeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__handshake:
		return (void*)soap_instantiate_ns2__handshake(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listClusterResponse:
		return (void*)soap_instantiate_ns2__listClusterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listCluster:
		return (void*)soap_instantiate_ns2__listCluster(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getExportURLResponse:
		return (void*)soap_instantiate_ns2__getExportURLResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getExportURL:
		return (void*)soap_instantiate_ns2__getExportURL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__copyFromResponse:
		return (void*)soap_instantiate_ns2__copyFromResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__copyFrom:
		return (void*)soap_instantiate_ns2__copyFrom(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Cluster:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__Cluster(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__AssetList:
		if (p->size < 0)
			delete (ns1__AssetList*)p->ptr;
		else
			delete[] (ns1__AssetList*)p->ptr;
		break;
	case SOAP_TYPE_ns1__Asset:
		if (p->size < 0)
			delete (ns1__Asset*)p->ptr;
		else
			delete[] (ns1__Asset*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ProviderList:
		if (p->size < 0)
			delete (ns1__ProviderList*)p->ptr;
		else
			delete[] (ns1__ProviderList*)p->ptr;
		break;
	case SOAP_TYPE_ns1__Cluster:
		if (p->size < 0)
			delete (ns1__Cluster*)p->ptr;
		else
			delete[] (ns1__Cluster*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ClusterList:
		if (p->size < 0)
			delete (ns1__ClusterList*)p->ptr;
		else
			delete[] (ns1__ClusterList*)p->ptr;
		break;
	case SOAP_TYPE_ns2__addCacheResponse:
		if (p->size < 0)
			delete (struct ns2__addCacheResponse*)p->ptr;
		else
			delete[] (struct ns2__addCacheResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__addCache:
		if (p->size < 0)
			delete (struct ns2__addCache*)p->ptr;
		else
			delete[] (struct ns2__addCache*)p->ptr;
		break;
	case SOAP_TYPE_ns2__deleteCacheResponse:
		if (p->size < 0)
			delete (struct ns2__deleteCacheResponse*)p->ptr;
		else
			delete[] (struct ns2__deleteCacheResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__deleteCache:
		if (p->size < 0)
			delete (struct ns2__deleteCache*)p->ptr;
		else
			delete[] (struct ns2__deleteCache*)p->ptr;
		break;
	case SOAP_TYPE_ns2__getAssetResponse:
		if (p->size < 0)
			delete (struct ns2__getAssetResponse*)p->ptr;
		else
			delete[] (struct ns2__getAssetResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__getAsset:
		if (p->size < 0)
			delete (struct ns2__getAsset*)p->ptr;
		else
			delete[] (struct ns2__getAsset*)p->ptr;
		break;
	case SOAP_TYPE_ns2__listAssetResponse:
		if (p->size < 0)
			delete (struct ns2__listAssetResponse*)p->ptr;
		else
			delete[] (struct ns2__listAssetResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__listAsset:
		if (p->size < 0)
			delete (struct ns2__listAsset*)p->ptr;
		else
			delete[] (struct ns2__listAsset*)p->ptr;
		break;
	case SOAP_TYPE_ns2__listProviderResponse:
		if (p->size < 0)
			delete (struct ns2__listProviderResponse*)p->ptr;
		else
			delete[] (struct ns2__listProviderResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__listProvider:
		if (p->size < 0)
			delete (struct ns2__listProvider*)p->ptr;
		else
			delete[] (struct ns2__listProvider*)p->ptr;
		break;
	case SOAP_TYPE_ns2__getClusterConfigResponse:
		if (p->size < 0)
			delete (struct ns2__getClusterConfigResponse*)p->ptr;
		else
			delete[] (struct ns2__getClusterConfigResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__getClusterConfig:
		if (p->size < 0)
			delete (struct ns2__getClusterConfig*)p->ptr;
		else
			delete[] (struct ns2__getClusterConfig*)p->ptr;
		break;
	case SOAP_TYPE_ns2__handshakeResponse:
		if (p->size < 0)
			delete (struct ns2__handshakeResponse*)p->ptr;
		else
			delete[] (struct ns2__handshakeResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__handshake:
		if (p->size < 0)
			delete (struct ns2__handshake*)p->ptr;
		else
			delete[] (struct ns2__handshake*)p->ptr;
		break;
	case SOAP_TYPE_ns2__listClusterResponse:
		if (p->size < 0)
			delete (struct ns2__listClusterResponse*)p->ptr;
		else
			delete[] (struct ns2__listClusterResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__listCluster:
		if (p->size < 0)
			delete (struct ns2__listCluster*)p->ptr;
		else
			delete[] (struct ns2__listCluster*)p->ptr;
		break;
	case SOAP_TYPE_ns2__getExportURLResponse:
		if (p->size < 0)
			delete (struct ns2__getExportURLResponse*)p->ptr;
		else
			delete[] (struct ns2__getExportURLResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__getExportURL:
		if (p->size < 0)
			delete (struct ns2__getExportURL*)p->ptr;
		else
			delete[] (struct ns2__getExportURL*)p->ptr;
		break;
	case SOAP_TYPE_ns2__copyFromResponse:
		if (p->size < 0)
			delete (struct ns2__copyFromResponse*)p->ptr;
		else
			delete[] (struct ns2__copyFromResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__copyFrom:
		if (p->size < 0)
			delete (struct ns2__copyFrom*)p->ptr;
		else
			delete[] (struct ns2__copyFrom*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Cluster:
		if (p->size < 0)
			delete (std::vector<ns1__Cluster * >*)p->ptr;
		else
			delete[] (std::vector<ns1__Cluster * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			delete (std::vector<std::string >*)p->ptr;
		else
			delete[] (std::vector<std::string >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Cluster:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__Cluster * >*)p)[len] = *(ns1__Cluster **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns1__ClusterList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__Cluster(soap, &this->ns1__ClusterList::clusters);
	/* transient soap skipped */
}

void ns1__ClusterList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__Cluster(soap, &this->ns1__ClusterList::clusters);
	/* transient soap skipped */
}

int ns1__ClusterList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ClusterList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ClusterList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ClusterList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClusterList(struct soap *soap, const char *tag, int id, const ns1__ClusterList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ClusterList), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__Cluster(soap, "clusters", -1, &(a->ns1__ClusterList::clusters), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ClusterList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ClusterList(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ClusterList * SOAP_FMAC4 soap_get_ns1__ClusterList(struct soap *soap, ns1__ClusterList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ClusterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ClusterList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ClusterList(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ClusterList * SOAP_FMAC4 soap_in_ns1__ClusterList(struct soap *soap, const char *tag, ns1__ClusterList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ClusterList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ClusterList, sizeof(ns1__ClusterList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ClusterList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ClusterList *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__Cluster(soap, "clusters", &(a->ns1__ClusterList::clusters), "ns1:Cluster"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ClusterList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ClusterList, 0, sizeof(ns1__ClusterList), 0, soap_copy_ns1__ClusterList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ClusterList * SOAP_FMAC6 soap_new_ns1__ClusterList(struct soap *soap, int n)
{	return soap_instantiate_ns1__ClusterList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ClusterList(struct soap *soap, ns1__ClusterList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ClusterList * SOAP_FMAC4 soap_instantiate_ns1__ClusterList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ClusterList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ClusterList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ClusterList;
		if (size)
			*size = sizeof(ns1__ClusterList);
		((ns1__ClusterList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ClusterList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ClusterList);
		for (int i = 0; i < n; i++)
			((ns1__ClusterList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ClusterList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ClusterList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ClusterList %p -> %p\n", q, p));
	*(ns1__ClusterList*)p = *(ns1__ClusterList*)q;
}

void ns1__Cluster::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__Cluster::clusterID);
	soap_default_int(soap, &this->ns1__Cluster::cacheable);
	soap_default_int(soap, &this->ns1__Cluster::cacheLevel);
	/* transient soap skipped */
}

void ns1__Cluster::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__Cluster::clusterID);
	/* transient soap skipped */
}

int ns1__Cluster::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Cluster);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__Cluster::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Cluster(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Cluster(struct soap *soap, const char *tag, int id, const ns1__Cluster *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Cluster), type))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &(a->ns1__Cluster::clusterID), ""))
		return soap->error;
	if (soap_out_int(soap, "cacheable", -1, &(a->ns1__Cluster::cacheable), ""))
		return soap->error;
	if (soap_out_int(soap, "cacheLevel", -1, &(a->ns1__Cluster::cacheLevel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Cluster::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Cluster(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Cluster * SOAP_FMAC4 soap_get_ns1__Cluster(struct soap *soap, ns1__Cluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Cluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__Cluster::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Cluster(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Cluster * SOAP_FMAC4 soap_in_ns1__Cluster(struct soap *soap, const char *tag, ns1__Cluster *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Cluster *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Cluster, sizeof(ns1__Cluster), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Cluster)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Cluster *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_clusterID1 = 1, soap_flag_cacheable1 = 1, soap_flag_cacheLevel1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clusterID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "clusterID", &(a->ns1__Cluster::clusterID), "xsd:string"))
				{	soap_flag_clusterID1--;
					continue;
				}
			if (soap_flag_cacheable1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cacheable", &(a->ns1__Cluster::cacheable), "xsd:int"))
				{	soap_flag_cacheable1--;
					continue;
				}
			if (soap_flag_cacheLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cacheLevel", &(a->ns1__Cluster::cacheLevel), "xsd:int"))
				{	soap_flag_cacheLevel1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Cluster *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Cluster, 0, sizeof(ns1__Cluster), 0, soap_copy_ns1__Cluster);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clusterID1 > 0 || soap_flag_cacheable1 > 0 || soap_flag_cacheLevel1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__Cluster * SOAP_FMAC6 soap_new_ns1__Cluster(struct soap *soap, int n)
{	return soap_instantiate_ns1__Cluster(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__Cluster(struct soap *soap, ns1__Cluster *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__Cluster * SOAP_FMAC4 soap_instantiate_ns1__Cluster(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Cluster(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Cluster, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__Cluster;
		if (size)
			*size = sizeof(ns1__Cluster);
		((ns1__Cluster*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__Cluster[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Cluster);
		for (int i = 0; i < n; i++)
			((ns1__Cluster*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Cluster*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Cluster(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Cluster %p -> %p\n", q, p));
	*(ns1__Cluster*)p = *(ns1__Cluster*)q;
}

void ns1__ProviderList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->ns1__ProviderList::returnCode);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns1__ProviderList::ProviderID);
	/* transient soap skipped */
}

void ns1__ProviderList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns1__ProviderList::ProviderID);
	/* transient soap skipped */
}

int ns1__ProviderList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ProviderList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ProviderList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ProviderList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProviderList(struct soap *soap, const char *tag, int id, const ns1__ProviderList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ProviderList), type))
		return soap->error;
	if (soap_out_LONG64(soap, "returnCode", -1, &(a->ns1__ProviderList::returnCode), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ProviderID", -1, &(a->ns1__ProviderList::ProviderID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ProviderList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ProviderList(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ProviderList * SOAP_FMAC4 soap_get_ns1__ProviderList(struct soap *soap, ns1__ProviderList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ProviderList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ProviderList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ProviderList(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ProviderList * SOAP_FMAC4 soap_in_ns1__ProviderList(struct soap *soap, const char *tag, ns1__ProviderList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ProviderList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ProviderList, sizeof(ns1__ProviderList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ProviderList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ProviderList *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_returnCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_returnCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "returnCode", &(a->ns1__ProviderList::returnCode), "xsd:long"))
				{	soap_flag_returnCode1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ProviderID", &(a->ns1__ProviderList::ProviderID), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ProviderList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ProviderList, 0, sizeof(ns1__ProviderList), 0, soap_copy_ns1__ProviderList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_returnCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ProviderList * SOAP_FMAC6 soap_new_ns1__ProviderList(struct soap *soap, int n)
{	return soap_instantiate_ns1__ProviderList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ProviderList(struct soap *soap, ns1__ProviderList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ProviderList * SOAP_FMAC4 soap_instantiate_ns1__ProviderList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ProviderList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ProviderList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ProviderList;
		if (size)
			*size = sizeof(ns1__ProviderList);
		((ns1__ProviderList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ProviderList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ProviderList);
		for (int i = 0; i < n; i++)
			((ns1__ProviderList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ProviderList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ProviderList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ProviderList %p -> %p\n", q, p));
	*(ns1__ProviderList*)p = *(ns1__ProviderList*)q;
}

void ns1__Asset::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->ns1__Asset::returnCode);
	soap_default_std__string(soap, &this->ns1__Asset::providerID);
	soap_default_std__string(soap, &this->ns1__Asset::providerAssetID);
	soap_default_LONG64(soap, &this->ns1__Asset::size);
	soap_default_LONG64(soap, &this->ns1__Asset::supportFileSize);
	soap_default_LONG64(soap, &this->ns1__Asset::bitRate);
	soap_default_LONG64(soap, &this->ns1__Asset::durationSecond);
	/* transient soap skipped */
}

void ns1__Asset::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__Asset::providerID);
	soap_serialize_std__string(soap, &this->ns1__Asset::providerAssetID);
	/* transient soap skipped */
}

int ns1__Asset::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Asset);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__Asset::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Asset(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Asset(struct soap *soap, const char *tag, int id, const ns1__Asset *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Asset), type))
		return soap->error;
	if (soap_out_LONG64(soap, "returnCode", -1, &(a->ns1__Asset::returnCode), ""))
		return soap->error;
	if (soap_out_std__string(soap, "providerID", -1, &(a->ns1__Asset::providerID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "providerAssetID", -1, &(a->ns1__Asset::providerAssetID), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "size", -1, &(a->ns1__Asset::size), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "supportFileSize", -1, &(a->ns1__Asset::supportFileSize), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "bitRate", -1, &(a->ns1__Asset::bitRate), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "durationSecond", -1, &(a->ns1__Asset::durationSecond), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Asset::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Asset(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Asset * SOAP_FMAC4 soap_get_ns1__Asset(struct soap *soap, ns1__Asset *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Asset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__Asset::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Asset(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Asset * SOAP_FMAC4 soap_in_ns1__Asset(struct soap *soap, const char *tag, ns1__Asset *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Asset *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Asset, sizeof(ns1__Asset), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Asset)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Asset *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_returnCode1 = 1, soap_flag_providerID1 = 1, soap_flag_providerAssetID1 = 1, soap_flag_size1 = 1, soap_flag_supportFileSize1 = 1, soap_flag_bitRate1 = 1, soap_flag_durationSecond1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_returnCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "returnCode", &(a->ns1__Asset::returnCode), "xsd:long"))
				{	soap_flag_returnCode1--;
					continue;
				}
			if (soap_flag_providerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "providerID", &(a->ns1__Asset::providerID), "xsd:string"))
				{	soap_flag_providerID1--;
					continue;
				}
			if (soap_flag_providerAssetID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "providerAssetID", &(a->ns1__Asset::providerAssetID), "xsd:string"))
				{	soap_flag_providerAssetID1--;
					continue;
				}
			if (soap_flag_size1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "size", &(a->ns1__Asset::size), "xsd:long"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap_flag_supportFileSize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "supportFileSize", &(a->ns1__Asset::supportFileSize), "xsd:long"))
				{	soap_flag_supportFileSize1--;
					continue;
				}
			if (soap_flag_bitRate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "bitRate", &(a->ns1__Asset::bitRate), "xsd:long"))
				{	soap_flag_bitRate1--;
					continue;
				}
			if (soap_flag_durationSecond1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "durationSecond", &(a->ns1__Asset::durationSecond), "xsd:long"))
				{	soap_flag_durationSecond1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Asset *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Asset, 0, sizeof(ns1__Asset), 0, soap_copy_ns1__Asset);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_returnCode1 > 0 || soap_flag_providerID1 > 0 || soap_flag_providerAssetID1 > 0 || soap_flag_size1 > 0 || soap_flag_supportFileSize1 > 0 || soap_flag_bitRate1 > 0 || soap_flag_durationSecond1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__Asset * SOAP_FMAC6 soap_new_ns1__Asset(struct soap *soap, int n)
{	return soap_instantiate_ns1__Asset(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__Asset(struct soap *soap, ns1__Asset *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__Asset * SOAP_FMAC4 soap_instantiate_ns1__Asset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Asset(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Asset, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__Asset;
		if (size)
			*size = sizeof(ns1__Asset);
		((ns1__Asset*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__Asset[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Asset);
		for (int i = 0; i < n; i++)
			((ns1__Asset*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Asset*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Asset(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Asset %p -> %p\n", q, p));
	*(ns1__Asset*)p = *(ns1__Asset*)q;
}

void ns1__AssetList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->ns1__AssetList::returnCode);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns1__AssetList::assetID);
	/* transient soap skipped */
}

void ns1__AssetList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns1__AssetList::assetID);
	/* transient soap skipped */
}

int ns1__AssetList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__AssetList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__AssetList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AssetList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AssetList(struct soap *soap, const char *tag, int id, const ns1__AssetList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AssetList), type))
		return soap->error;
	if (soap_out_LONG64(soap, "returnCode", -1, &(a->ns1__AssetList::returnCode), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "assetID", -1, &(a->ns1__AssetList::assetID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__AssetList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AssetList(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AssetList * SOAP_FMAC4 soap_get_ns1__AssetList(struct soap *soap, ns1__AssetList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AssetList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__AssetList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AssetList(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AssetList * SOAP_FMAC4 soap_in_ns1__AssetList(struct soap *soap, const char *tag, ns1__AssetList *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AssetList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AssetList, sizeof(ns1__AssetList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__AssetList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__AssetList *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_returnCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_returnCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "returnCode", &(a->ns1__AssetList::returnCode), "xsd:long"))
				{	soap_flag_returnCode1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "assetID", &(a->ns1__AssetList::assetID), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__AssetList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AssetList, 0, sizeof(ns1__AssetList), 0, soap_copy_ns1__AssetList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_returnCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__AssetList * SOAP_FMAC6 soap_new_ns1__AssetList(struct soap *soap, int n)
{	return soap_instantiate_ns1__AssetList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__AssetList(struct soap *soap, ns1__AssetList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__AssetList * SOAP_FMAC4 soap_instantiate_ns1__AssetList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AssetList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__AssetList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__AssetList;
		if (size)
			*size = sizeof(ns1__AssetList);
		((ns1__AssetList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__AssetList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__AssetList);
		for (int i = 0; i < n; i++)
			((ns1__AssetList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__AssetList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AssetList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__AssetList %p -> %p\n", q, p));
	*(ns1__AssetList*)p = *(ns1__AssetList*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__copyFrom(struct soap *soap, struct ns2__copyFrom *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_providerID);
	soap_default_std__string(soap, &a->_providerAssetID);
	soap_default_std__string(soap, &a->_clusterID);
	soap_default_std__string(soap, &a->_contentType);
	soap_default_std__string(soap, &a->_contentSubtype);
	soap_default_std__string(soap, &a->_sourceURL);
	soap_default_std__string(soap, &a->_userName);
	soap_default_std__string(soap, &a->_password);
	soap_default_LONG64(soap, &a->_bitrate);
	soap_default_std__string(soap, &a->_windowStart);
	soap_default_std__string(soap, &a->_windowEnd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__copyFrom(struct soap *soap, const struct ns2__copyFrom *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_providerID);
	soap_serialize_std__string(soap, &a->_providerAssetID);
	soap_serialize_std__string(soap, &a->_clusterID);
	soap_serialize_std__string(soap, &a->_contentType);
	soap_serialize_std__string(soap, &a->_contentSubtype);
	soap_serialize_std__string(soap, &a->_sourceURL);
	soap_serialize_std__string(soap, &a->_userName);
	soap_serialize_std__string(soap, &a->_password);
	soap_serialize_std__string(soap, &a->_windowStart);
	soap_serialize_std__string(soap, &a->_windowEnd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__copyFrom(struct soap *soap, const struct ns2__copyFrom *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__copyFrom);
	if (soap_out_ns2__copyFrom(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__copyFrom(struct soap *soap, const char *tag, int id, const struct ns2__copyFrom *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__copyFrom), type))
		return soap->error;
	if (soap_out_std__string(soap, "providerID", -1, &a->_providerID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "providerAssetID", -1, &a->_providerAssetID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &a->_clusterID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contentType", -1, &a->_contentType, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contentSubtype", -1, &a->_contentSubtype, ""))
		return soap->error;
	if (soap_out_std__string(soap, "sourceURL", -1, &a->_sourceURL, ""))
		return soap->error;
	if (soap_out_std__string(soap, "userName", -1, &a->_userName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "password", -1, &a->_password, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "bitrate", -1, &a->_bitrate, ""))
		return soap->error;
	if (soap_out_std__string(soap, "windowStart", -1, &a->_windowStart, ""))
		return soap->error;
	if (soap_out_std__string(soap, "windowEnd", -1, &a->_windowEnd, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__copyFrom * SOAP_FMAC4 soap_get_ns2__copyFrom(struct soap *soap, struct ns2__copyFrom *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__copyFrom(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__copyFrom * SOAP_FMAC4 soap_in_ns2__copyFrom(struct soap *soap, const char *tag, struct ns2__copyFrom *a, const char *type)
{
	short soap_flag__providerID = 1, soap_flag__providerAssetID = 1, soap_flag__clusterID = 1, soap_flag__contentType = 1, soap_flag__contentSubtype = 1, soap_flag__sourceURL = 1, soap_flag__userName = 1, soap_flag__password = 1, soap_flag__bitrate = 1, soap_flag__windowStart = 1, soap_flag__windowEnd = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__copyFrom *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__copyFrom, sizeof(struct ns2__copyFrom), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__copyFrom(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__providerID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerID, "xsd:string"))
				{	soap_flag__providerID--;
					continue;
				}
			if (soap_flag__providerAssetID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerAssetID, "xsd:string"))
				{	soap_flag__providerAssetID--;
					continue;
				}
			if (soap_flag__clusterID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_clusterID, "xsd:string"))
				{	soap_flag__clusterID--;
					continue;
				}
			if (soap_flag__contentType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_contentType, "xsd:string"))
				{	soap_flag__contentType--;
					continue;
				}
			if (soap_flag__contentSubtype && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_contentSubtype, "xsd:string"))
				{	soap_flag__contentSubtype--;
					continue;
				}
			if (soap_flag__sourceURL && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_sourceURL, "xsd:string"))
				{	soap_flag__sourceURL--;
					continue;
				}
			if (soap_flag__userName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_userName, "xsd:string"))
				{	soap_flag__userName--;
					continue;
				}
			if (soap_flag__password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_password, "xsd:string"))
				{	soap_flag__password--;
					continue;
				}
			if (soap_flag__bitrate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_bitrate, "xsd:long"))
				{	soap_flag__bitrate--;
					continue;
				}
			if (soap_flag__windowStart && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_windowStart, "xsd:string"))
				{	soap_flag__windowStart--;
					continue;
				}
			if (soap_flag__windowEnd && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_windowEnd, "xsd:string"))
				{	soap_flag__windowEnd--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__copyFrom *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__copyFrom, 0, sizeof(struct ns2__copyFrom), 0, soap_copy_ns2__copyFrom);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__providerID > 0 || soap_flag__providerAssetID > 0 || soap_flag__clusterID > 0 || soap_flag__contentType > 0 || soap_flag__contentSubtype > 0 || soap_flag__sourceURL > 0 || soap_flag__userName > 0 || soap_flag__password > 0 || soap_flag__bitrate > 0 || soap_flag__windowStart > 0 || soap_flag__windowEnd > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__copyFrom * SOAP_FMAC6 soap_new_ns2__copyFrom(struct soap *soap, int n)
{	return soap_instantiate_ns2__copyFrom(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__copyFrom(struct soap *soap, struct ns2__copyFrom *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__copyFrom * SOAP_FMAC4 soap_instantiate_ns2__copyFrom(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__copyFrom(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__copyFrom, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__copyFrom;
		if (size)
			*size = sizeof(struct ns2__copyFrom);
	}
	else
	{	cp->ptr = (void*)new struct ns2__copyFrom[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__copyFrom);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__copyFrom*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__copyFrom(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__copyFrom %p -> %p\n", q, p));
	*(struct ns2__copyFrom*)p = *(struct ns2__copyFrom*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__copyFromResponse(struct soap *soap, struct ns2__copyFromResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_copyFromReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__copyFromResponse(struct soap *soap, const struct ns2__copyFromResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__copyFromResponse(struct soap *soap, const struct ns2__copyFromResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__copyFromResponse);
	if (soap_out_ns2__copyFromResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__copyFromResponse(struct soap *soap, const char *tag, int id, const struct ns2__copyFromResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__copyFromResponse), type))
		return soap->error;
	if (soap_out_LONG64(soap, "copyFromReturn", -1, &a->_copyFromReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__copyFromResponse * SOAP_FMAC4 soap_get_ns2__copyFromResponse(struct soap *soap, struct ns2__copyFromResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__copyFromResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__copyFromResponse * SOAP_FMAC4 soap_in_ns2__copyFromResponse(struct soap *soap, const char *tag, struct ns2__copyFromResponse *a, const char *type)
{
	short soap_flag__copyFromReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__copyFromResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__copyFromResponse, sizeof(struct ns2__copyFromResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__copyFromResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__copyFromReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_copyFromReturn, "xsd:long"))
				{	soap_flag__copyFromReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__copyFromResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__copyFromResponse, 0, sizeof(struct ns2__copyFromResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__copyFromReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__copyFromResponse * SOAP_FMAC6 soap_new_ns2__copyFromResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__copyFromResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__copyFromResponse(struct soap *soap, struct ns2__copyFromResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__copyFromResponse * SOAP_FMAC4 soap_instantiate_ns2__copyFromResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__copyFromResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__copyFromResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__copyFromResponse;
		if (size)
			*size = sizeof(struct ns2__copyFromResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__copyFromResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__copyFromResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__copyFromResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__copyFromResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__copyFromResponse %p -> %p\n", q, p));
	*(struct ns2__copyFromResponse*)p = *(struct ns2__copyFromResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getExportURL(struct soap *soap, struct ns2__getExportURL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_providerID);
	soap_default_std__string(soap, &a->_providerAssetID);
	soap_default_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getExportURL(struct soap *soap, const struct ns2__getExportURL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_providerID);
	soap_serialize_std__string(soap, &a->_providerAssetID);
	soap_serialize_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getExportURL(struct soap *soap, const struct ns2__getExportURL *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__getExportURL);
	if (soap_out_ns2__getExportURL(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getExportURL(struct soap *soap, const char *tag, int id, const struct ns2__getExportURL *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getExportURL), type))
		return soap->error;
	if (soap_out_std__string(soap, "providerID", -1, &a->_providerID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "providerAssetID", -1, &a->_providerAssetID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &a->_clusterID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getExportURL * SOAP_FMAC4 soap_get_ns2__getExportURL(struct soap *soap, struct ns2__getExportURL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getExportURL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__getExportURL * SOAP_FMAC4 soap_in_ns2__getExportURL(struct soap *soap, const char *tag, struct ns2__getExportURL *a, const char *type)
{
	short soap_flag__providerID = 1, soap_flag__providerAssetID = 1, soap_flag__clusterID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__getExportURL *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getExportURL, sizeof(struct ns2__getExportURL), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__getExportURL(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__providerID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerID, "xsd:string"))
				{	soap_flag__providerID--;
					continue;
				}
			if (soap_flag__providerAssetID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerAssetID, "xsd:string"))
				{	soap_flag__providerAssetID--;
					continue;
				}
			if (soap_flag__clusterID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_clusterID, "xsd:string"))
				{	soap_flag__clusterID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__getExportURL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getExportURL, 0, sizeof(struct ns2__getExportURL), 0, soap_copy_ns2__getExportURL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__providerID > 0 || soap_flag__providerAssetID > 0 || soap_flag__clusterID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__getExportURL * SOAP_FMAC6 soap_new_ns2__getExportURL(struct soap *soap, int n)
{	return soap_instantiate_ns2__getExportURL(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__getExportURL(struct soap *soap, struct ns2__getExportURL *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__getExportURL * SOAP_FMAC4 soap_instantiate_ns2__getExportURL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getExportURL(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__getExportURL, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__getExportURL;
		if (size)
			*size = sizeof(struct ns2__getExportURL);
	}
	else
	{	cp->ptr = (void*)new struct ns2__getExportURL[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__getExportURL);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__getExportURL*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__getExportURL(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__getExportURL %p -> %p\n", q, p));
	*(struct ns2__getExportURL*)p = *(struct ns2__getExportURL*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getExportURLResponse(struct soap *soap, struct ns2__getExportURLResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_returnCode);
	soap_default_std__string(soap, &a->_contentType);
	soap_default_std__string(soap, &a->_contentSubtype);
	soap_default_std__string(soap, &a->_sourceURL);
	soap_default_std__string(soap, &a->_userName);
	soap_default_std__string(soap, &a->_password);
	soap_default_LONG64(soap, &a->_bitrate);
	soap_default_std__string(soap, &a->_windowStart);
	soap_default_std__string(soap, &a->_windowEnd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getExportURLResponse(struct soap *soap, const struct ns2__getExportURLResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_contentType);
	soap_serialize_std__string(soap, &a->_contentSubtype);
	soap_serialize_std__string(soap, &a->_sourceURL);
	soap_serialize_std__string(soap, &a->_userName);
	soap_serialize_std__string(soap, &a->_password);
	soap_serialize_std__string(soap, &a->_windowStart);
	soap_serialize_std__string(soap, &a->_windowEnd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getExportURLResponse(struct soap *soap, const struct ns2__getExportURLResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__getExportURLResponse);
	if (soap_out_ns2__getExportURLResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getExportURLResponse(struct soap *soap, const char *tag, int id, const struct ns2__getExportURLResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getExportURLResponse), type))
		return soap->error;
	if (soap_out_LONG64(soap, "returnCode", -1, &a->_returnCode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contentType", -1, &a->_contentType, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contentSubtype", -1, &a->_contentSubtype, ""))
		return soap->error;
	if (soap_out_std__string(soap, "sourceURL", -1, &a->_sourceURL, ""))
		return soap->error;
	if (soap_out_std__string(soap, "userName", -1, &a->_userName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "password", -1, &a->_password, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "bitrate", -1, &a->_bitrate, ""))
		return soap->error;
	if (soap_out_std__string(soap, "windowStart", -1, &a->_windowStart, ""))
		return soap->error;
	if (soap_out_std__string(soap, "windowEnd", -1, &a->_windowEnd, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getExportURLResponse * SOAP_FMAC4 soap_get_ns2__getExportURLResponse(struct soap *soap, struct ns2__getExportURLResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getExportURLResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__getExportURLResponse * SOAP_FMAC4 soap_in_ns2__getExportURLResponse(struct soap *soap, const char *tag, struct ns2__getExportURLResponse *a, const char *type)
{
	short soap_flag__returnCode = 1, soap_flag__contentType = 1, soap_flag__contentSubtype = 1, soap_flag__sourceURL = 1, soap_flag__userName = 1, soap_flag__password = 1, soap_flag__bitrate = 1, soap_flag__windowStart = 1, soap_flag__windowEnd = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__getExportURLResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getExportURLResponse, sizeof(struct ns2__getExportURLResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__getExportURLResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__returnCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_returnCode, "xsd:long"))
				{	soap_flag__returnCode--;
					continue;
				}
			if (soap_flag__contentType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_contentType, "xsd:string"))
				{	soap_flag__contentType--;
					continue;
				}
			if (soap_flag__contentSubtype && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_contentSubtype, "xsd:string"))
				{	soap_flag__contentSubtype--;
					continue;
				}
			if (soap_flag__sourceURL && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_sourceURL, "xsd:string"))
				{	soap_flag__sourceURL--;
					continue;
				}
			if (soap_flag__userName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_userName, "xsd:string"))
				{	soap_flag__userName--;
					continue;
				}
			if (soap_flag__password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_password, "xsd:string"))
				{	soap_flag__password--;
					continue;
				}
			if (soap_flag__bitrate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_bitrate, "xsd:long"))
				{	soap_flag__bitrate--;
					continue;
				}
			if (soap_flag__windowStart && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_windowStart, "xsd:string"))
				{	soap_flag__windowStart--;
					continue;
				}
			if (soap_flag__windowEnd && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_windowEnd, "xsd:string"))
				{	soap_flag__windowEnd--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__getExportURLResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getExportURLResponse, 0, sizeof(struct ns2__getExportURLResponse), 0, soap_copy_ns2__getExportURLResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__returnCode > 0 || soap_flag__contentType > 0 || soap_flag__contentSubtype > 0 || soap_flag__sourceURL > 0 || soap_flag__userName > 0 || soap_flag__password > 0 || soap_flag__bitrate > 0 || soap_flag__windowStart > 0 || soap_flag__windowEnd > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__getExportURLResponse * SOAP_FMAC6 soap_new_ns2__getExportURLResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__getExportURLResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__getExportURLResponse(struct soap *soap, struct ns2__getExportURLResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__getExportURLResponse * SOAP_FMAC4 soap_instantiate_ns2__getExportURLResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getExportURLResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__getExportURLResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__getExportURLResponse;
		if (size)
			*size = sizeof(struct ns2__getExportURLResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__getExportURLResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__getExportURLResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__getExportURLResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__getExportURLResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__getExportURLResponse %p -> %p\n", q, p));
	*(struct ns2__getExportURLResponse*)p = *(struct ns2__getExportURLResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__listCluster(struct soap *soap, struct ns2__listCluster *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listCluster(struct soap *soap, const struct ns2__listCluster *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listCluster(struct soap *soap, const struct ns2__listCluster *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listCluster);
	if (soap_out_ns2__listCluster(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listCluster(struct soap *soap, const char *tag, int id, const struct ns2__listCluster *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__listCluster), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__listCluster * SOAP_FMAC4 soap_get_ns2__listCluster(struct soap *soap, struct ns2__listCluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listCluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__listCluster * SOAP_FMAC4 soap_in_ns2__listCluster(struct soap *soap, const char *tag, struct ns2__listCluster *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__listCluster *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__listCluster, sizeof(struct ns2__listCluster), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__listCluster(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__listCluster *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__listCluster, 0, sizeof(struct ns2__listCluster), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__listCluster * SOAP_FMAC6 soap_new_ns2__listCluster(struct soap *soap, int n)
{	return soap_instantiate_ns2__listCluster(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__listCluster(struct soap *soap, struct ns2__listCluster *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__listCluster * SOAP_FMAC4 soap_instantiate_ns2__listCluster(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__listCluster(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__listCluster, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__listCluster;
		if (size)
			*size = sizeof(struct ns2__listCluster);
	}
	else
	{	cp->ptr = (void*)new struct ns2__listCluster[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__listCluster);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__listCluster*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__listCluster(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__listCluster %p -> %p\n", q, p));
	*(struct ns2__listCluster*)p = *(struct ns2__listCluster*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__listClusterResponse(struct soap *soap, struct ns2__listClusterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->listClusterReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listClusterResponse(struct soap *soap, const struct ns2__listClusterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ClusterList(soap, &a->listClusterReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listClusterResponse(struct soap *soap, const struct ns2__listClusterResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listClusterResponse);
	if (soap_out_ns2__listClusterResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listClusterResponse(struct soap *soap, const char *tag, int id, const struct ns2__listClusterResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__listClusterResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__ClusterList(soap, "listClusterReturn", -1, &a->listClusterReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__listClusterResponse * SOAP_FMAC4 soap_get_ns2__listClusterResponse(struct soap *soap, struct ns2__listClusterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listClusterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__listClusterResponse * SOAP_FMAC4 soap_in_ns2__listClusterResponse(struct soap *soap, const char *tag, struct ns2__listClusterResponse *a, const char *type)
{
	short soap_flag_listClusterReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__listClusterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__listClusterResponse, sizeof(struct ns2__listClusterResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__listClusterResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listClusterReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ClusterList(soap, "listClusterReturn", &a->listClusterReturn, "ns1:ClusterList"))
				{	soap_flag_listClusterReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__listClusterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__listClusterResponse, 0, sizeof(struct ns2__listClusterResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__listClusterResponse * SOAP_FMAC6 soap_new_ns2__listClusterResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__listClusterResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__listClusterResponse(struct soap *soap, struct ns2__listClusterResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__listClusterResponse * SOAP_FMAC4 soap_instantiate_ns2__listClusterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__listClusterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__listClusterResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__listClusterResponse;
		if (size)
			*size = sizeof(struct ns2__listClusterResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__listClusterResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__listClusterResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__listClusterResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__listClusterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__listClusterResponse %p -> %p\n", q, p));
	*(struct ns2__listClusterResponse*)p = *(struct ns2__listClusterResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__handshake(struct soap *soap, struct ns2__handshake *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_cmeVersion);
	soap_default_LONG64(soap, &a->_cmeStatus);
	soap_default_std__string(soap, &a->_cmeEndPoint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__handshake(struct soap *soap, const struct ns2__handshake *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_cmeVersion);
	soap_serialize_std__string(soap, &a->_cmeEndPoint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__handshake(struct soap *soap, const struct ns2__handshake *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__handshake);
	if (soap_out_ns2__handshake(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__handshake(struct soap *soap, const char *tag, int id, const struct ns2__handshake *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__handshake), type))
		return soap->error;
	if (soap_out_std__string(soap, "cmeVersion", -1, &a->_cmeVersion, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "cmeStatus", -1, &a->_cmeStatus, ""))
		return soap->error;
	if (soap_out_std__string(soap, "cmeEndPoint", -1, &a->_cmeEndPoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__handshake * SOAP_FMAC4 soap_get_ns2__handshake(struct soap *soap, struct ns2__handshake *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__handshake(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__handshake * SOAP_FMAC4 soap_in_ns2__handshake(struct soap *soap, const char *tag, struct ns2__handshake *a, const char *type)
{
	short soap_flag__cmeVersion = 1, soap_flag__cmeStatus = 1, soap_flag__cmeEndPoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__handshake *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__handshake, sizeof(struct ns2__handshake), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__handshake(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__cmeVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_cmeVersion, "xsd:string"))
				{	soap_flag__cmeVersion--;
					continue;
				}
			if (soap_flag__cmeStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_cmeStatus, "xsd:long"))
				{	soap_flag__cmeStatus--;
					continue;
				}
			if (soap_flag__cmeEndPoint && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_cmeEndPoint, "xsd:string"))
				{	soap_flag__cmeEndPoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__handshake *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__handshake, 0, sizeof(struct ns2__handshake), 0, soap_copy_ns2__handshake);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__cmeVersion > 0 || soap_flag__cmeStatus > 0 || soap_flag__cmeEndPoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__handshake * SOAP_FMAC6 soap_new_ns2__handshake(struct soap *soap, int n)
{	return soap_instantiate_ns2__handshake(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__handshake(struct soap *soap, struct ns2__handshake *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__handshake * SOAP_FMAC4 soap_instantiate_ns2__handshake(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__handshake(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__handshake, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__handshake;
		if (size)
			*size = sizeof(struct ns2__handshake);
	}
	else
	{	cp->ptr = (void*)new struct ns2__handshake[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__handshake);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__handshake*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__handshake(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__handshake %p -> %p\n", q, p));
	*(struct ns2__handshake*)p = *(struct ns2__handshake*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__handshakeResponse(struct soap *soap, struct ns2__handshakeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_handshakeReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__handshakeResponse(struct soap *soap, const struct ns2__handshakeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__handshakeResponse(struct soap *soap, const struct ns2__handshakeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__handshakeResponse);
	if (soap_out_ns2__handshakeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__handshakeResponse(struct soap *soap, const char *tag, int id, const struct ns2__handshakeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__handshakeResponse), type))
		return soap->error;
	if (soap_out_LONG64(soap, "handshakeReturn", -1, &a->_handshakeReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__handshakeResponse * SOAP_FMAC4 soap_get_ns2__handshakeResponse(struct soap *soap, struct ns2__handshakeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__handshakeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__handshakeResponse * SOAP_FMAC4 soap_in_ns2__handshakeResponse(struct soap *soap, const char *tag, struct ns2__handshakeResponse *a, const char *type)
{
	short soap_flag__handshakeReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__handshakeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__handshakeResponse, sizeof(struct ns2__handshakeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__handshakeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__handshakeReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_handshakeReturn, "xsd:long"))
				{	soap_flag__handshakeReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__handshakeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__handshakeResponse, 0, sizeof(struct ns2__handshakeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__handshakeReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__handshakeResponse * SOAP_FMAC6 soap_new_ns2__handshakeResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__handshakeResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__handshakeResponse(struct soap *soap, struct ns2__handshakeResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__handshakeResponse * SOAP_FMAC4 soap_instantiate_ns2__handshakeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__handshakeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__handshakeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__handshakeResponse;
		if (size)
			*size = sizeof(struct ns2__handshakeResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__handshakeResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__handshakeResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__handshakeResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__handshakeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__handshakeResponse %p -> %p\n", q, p));
	*(struct ns2__handshakeResponse*)p = *(struct ns2__handshakeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getClusterConfig(struct soap *soap, struct ns2__getClusterConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->clusterID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getClusterConfig(struct soap *soap, const struct ns2__getClusterConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->clusterID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getClusterConfig(struct soap *soap, const struct ns2__getClusterConfig *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__getClusterConfig);
	if (soap_out_ns2__getClusterConfig(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClusterConfig(struct soap *soap, const char *tag, int id, const struct ns2__getClusterConfig *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getClusterConfig), type))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &a->clusterID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getClusterConfig * SOAP_FMAC4 soap_get_ns2__getClusterConfig(struct soap *soap, struct ns2__getClusterConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getClusterConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__getClusterConfig * SOAP_FMAC4 soap_in_ns2__getClusterConfig(struct soap *soap, const char *tag, struct ns2__getClusterConfig *a, const char *type)
{
	short soap_flag_clusterID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__getClusterConfig *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getClusterConfig, sizeof(struct ns2__getClusterConfig), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__getClusterConfig(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clusterID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "clusterID", &a->clusterID, "xsd:string"))
				{	soap_flag_clusterID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__getClusterConfig *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getClusterConfig, 0, sizeof(struct ns2__getClusterConfig), 0, soap_copy_ns2__getClusterConfig);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clusterID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__getClusterConfig * SOAP_FMAC6 soap_new_ns2__getClusterConfig(struct soap *soap, int n)
{	return soap_instantiate_ns2__getClusterConfig(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__getClusterConfig(struct soap *soap, struct ns2__getClusterConfig *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__getClusterConfig * SOAP_FMAC4 soap_instantiate_ns2__getClusterConfig(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getClusterConfig(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__getClusterConfig, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__getClusterConfig;
		if (size)
			*size = sizeof(struct ns2__getClusterConfig);
	}
	else
	{	cp->ptr = (void*)new struct ns2__getClusterConfig[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__getClusterConfig);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__getClusterConfig*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__getClusterConfig(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__getClusterConfig %p -> %p\n", q, p));
	*(struct ns2__getClusterConfig*)p = *(struct ns2__getClusterConfig*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getClusterConfigResponse(struct soap *soap, struct ns2__getClusterConfigResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->state);
	soap_default_LONG64(soap, &a->totalSize);
	soap_default_LONG64(soap, &a->freeSize);
	soap_default_std__string(soap, &a->serviceGroup);
	soap_default_std__string(soap, &a->nodeIPs);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getClusterConfigResponse(struct soap *soap, const struct ns2__getClusterConfigResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->serviceGroup);
	soap_serialize_std__string(soap, &a->nodeIPs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getClusterConfigResponse(struct soap *soap, const struct ns2__getClusterConfigResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__getClusterConfigResponse);
	if (soap_out_ns2__getClusterConfigResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getClusterConfigResponse(struct soap *soap, const char *tag, int id, const struct ns2__getClusterConfigResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getClusterConfigResponse), type))
		return soap->error;
	if (soap_out_LONG64(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "totalSize", -1, &a->totalSize, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "freeSize", -1, &a->freeSize, ""))
		return soap->error;
	if (soap_out_std__string(soap, "serviceGroup", -1, &a->serviceGroup, ""))
		return soap->error;
	if (soap_out_std__string(soap, "nodeIPs", -1, &a->nodeIPs, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getClusterConfigResponse * SOAP_FMAC4 soap_get_ns2__getClusterConfigResponse(struct soap *soap, struct ns2__getClusterConfigResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getClusterConfigResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__getClusterConfigResponse * SOAP_FMAC4 soap_in_ns2__getClusterConfigResponse(struct soap *soap, const char *tag, struct ns2__getClusterConfigResponse *a, const char *type)
{
	short soap_flag_state = 1, soap_flag_totalSize = 1, soap_flag_freeSize = 1, soap_flag_serviceGroup = 1, soap_flag_nodeIPs = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__getClusterConfigResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getClusterConfigResponse, sizeof(struct ns2__getClusterConfigResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__getClusterConfigResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_state && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "state", &a->state, "xsd:long"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_totalSize && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "totalSize", &a->totalSize, "xsd:long"))
				{	soap_flag_totalSize--;
					continue;
				}
			if (soap_flag_freeSize && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "freeSize", &a->freeSize, "xsd:long"))
				{	soap_flag_freeSize--;
					continue;
				}
			if (soap_flag_serviceGroup && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "serviceGroup", &a->serviceGroup, "xsd:string"))
				{	soap_flag_serviceGroup--;
					continue;
				}
			if (soap_flag_nodeIPs && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "nodeIPs", &a->nodeIPs, "xsd:string"))
				{	soap_flag_nodeIPs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__getClusterConfigResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getClusterConfigResponse, 0, sizeof(struct ns2__getClusterConfigResponse), 0, soap_copy_ns2__getClusterConfigResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_state > 0 || soap_flag_totalSize > 0 || soap_flag_freeSize > 0 || soap_flag_serviceGroup > 0 || soap_flag_nodeIPs > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__getClusterConfigResponse * SOAP_FMAC6 soap_new_ns2__getClusterConfigResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__getClusterConfigResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__getClusterConfigResponse(struct soap *soap, struct ns2__getClusterConfigResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__getClusterConfigResponse * SOAP_FMAC4 soap_instantiate_ns2__getClusterConfigResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getClusterConfigResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__getClusterConfigResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__getClusterConfigResponse;
		if (size)
			*size = sizeof(struct ns2__getClusterConfigResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__getClusterConfigResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__getClusterConfigResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__getClusterConfigResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__getClusterConfigResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__getClusterConfigResponse %p -> %p\n", q, p));
	*(struct ns2__getClusterConfigResponse*)p = *(struct ns2__getClusterConfigResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__listProvider(struct soap *soap, struct ns2__listProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listProvider(struct soap *soap, const struct ns2__listProvider *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listProvider(struct soap *soap, const struct ns2__listProvider *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listProvider);
	if (soap_out_ns2__listProvider(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listProvider(struct soap *soap, const char *tag, int id, const struct ns2__listProvider *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__listProvider), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__listProvider * SOAP_FMAC4 soap_get_ns2__listProvider(struct soap *soap, struct ns2__listProvider *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listProvider(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__listProvider * SOAP_FMAC4 soap_in_ns2__listProvider(struct soap *soap, const char *tag, struct ns2__listProvider *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__listProvider *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__listProvider, sizeof(struct ns2__listProvider), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__listProvider(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__listProvider *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__listProvider, 0, sizeof(struct ns2__listProvider), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__listProvider * SOAP_FMAC6 soap_new_ns2__listProvider(struct soap *soap, int n)
{	return soap_instantiate_ns2__listProvider(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__listProvider(struct soap *soap, struct ns2__listProvider *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__listProvider * SOAP_FMAC4 soap_instantiate_ns2__listProvider(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__listProvider(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__listProvider, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__listProvider;
		if (size)
			*size = sizeof(struct ns2__listProvider);
	}
	else
	{	cp->ptr = (void*)new struct ns2__listProvider[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__listProvider);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__listProvider*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__listProvider(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__listProvider %p -> %p\n", q, p));
	*(struct ns2__listProvider*)p = *(struct ns2__listProvider*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__listProviderResponse(struct soap *soap, struct ns2__listProviderResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->listProviderReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listProviderResponse(struct soap *soap, const struct ns2__listProviderResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ProviderList(soap, &a->listProviderReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listProviderResponse(struct soap *soap, const struct ns2__listProviderResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listProviderResponse);
	if (soap_out_ns2__listProviderResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listProviderResponse(struct soap *soap, const char *tag, int id, const struct ns2__listProviderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__listProviderResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__ProviderList(soap, "listProviderReturn", -1, &a->listProviderReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__listProviderResponse * SOAP_FMAC4 soap_get_ns2__listProviderResponse(struct soap *soap, struct ns2__listProviderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listProviderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__listProviderResponse * SOAP_FMAC4 soap_in_ns2__listProviderResponse(struct soap *soap, const char *tag, struct ns2__listProviderResponse *a, const char *type)
{
	short soap_flag_listProviderReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__listProviderResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__listProviderResponse, sizeof(struct ns2__listProviderResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__listProviderResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listProviderReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ProviderList(soap, "listProviderReturn", &a->listProviderReturn, "ns1:ProviderList"))
				{	soap_flag_listProviderReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__listProviderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__listProviderResponse, 0, sizeof(struct ns2__listProviderResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__listProviderResponse * SOAP_FMAC6 soap_new_ns2__listProviderResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__listProviderResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__listProviderResponse(struct soap *soap, struct ns2__listProviderResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__listProviderResponse * SOAP_FMAC4 soap_instantiate_ns2__listProviderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__listProviderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__listProviderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__listProviderResponse;
		if (size)
			*size = sizeof(struct ns2__listProviderResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__listProviderResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__listProviderResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__listProviderResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__listProviderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__listProviderResponse %p -> %p\n", q, p));
	*(struct ns2__listProviderResponse*)p = *(struct ns2__listProviderResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__listAsset(struct soap *soap, struct ns2__listAsset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_providerID);
	soap_default_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listAsset(struct soap *soap, const struct ns2__listAsset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_providerID);
	soap_serialize_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listAsset(struct soap *soap, const struct ns2__listAsset *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listAsset);
	if (soap_out_ns2__listAsset(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listAsset(struct soap *soap, const char *tag, int id, const struct ns2__listAsset *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__listAsset), type))
		return soap->error;
	if (soap_out_std__string(soap, "providerID", -1, &a->_providerID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &a->_clusterID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__listAsset * SOAP_FMAC4 soap_get_ns2__listAsset(struct soap *soap, struct ns2__listAsset *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listAsset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__listAsset * SOAP_FMAC4 soap_in_ns2__listAsset(struct soap *soap, const char *tag, struct ns2__listAsset *a, const char *type)
{
	short soap_flag__providerID = 1, soap_flag__clusterID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__listAsset *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__listAsset, sizeof(struct ns2__listAsset), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__listAsset(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__providerID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerID, "xsd:string"))
				{	soap_flag__providerID--;
					continue;
				}
			if (soap_flag__clusterID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_clusterID, "xsd:string"))
				{	soap_flag__clusterID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__listAsset *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__listAsset, 0, sizeof(struct ns2__listAsset), 0, soap_copy_ns2__listAsset);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__providerID > 0 || soap_flag__clusterID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__listAsset * SOAP_FMAC6 soap_new_ns2__listAsset(struct soap *soap, int n)
{	return soap_instantiate_ns2__listAsset(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__listAsset(struct soap *soap, struct ns2__listAsset *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__listAsset * SOAP_FMAC4 soap_instantiate_ns2__listAsset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__listAsset(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__listAsset, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__listAsset;
		if (size)
			*size = sizeof(struct ns2__listAsset);
	}
	else
	{	cp->ptr = (void*)new struct ns2__listAsset[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__listAsset);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__listAsset*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__listAsset(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__listAsset %p -> %p\n", q, p));
	*(struct ns2__listAsset*)p = *(struct ns2__listAsset*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__listAssetResponse(struct soap *soap, struct ns2__listAssetResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_listAssetReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listAssetResponse(struct soap *soap, const struct ns2__listAssetResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__AssetList(soap, &a->_listAssetReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listAssetResponse(struct soap *soap, const struct ns2__listAssetResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listAssetResponse);
	if (soap_out_ns2__listAssetResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listAssetResponse(struct soap *soap, const char *tag, int id, const struct ns2__listAssetResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__listAssetResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__AssetList(soap, "listAssetReturn", -1, &a->_listAssetReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__listAssetResponse * SOAP_FMAC4 soap_get_ns2__listAssetResponse(struct soap *soap, struct ns2__listAssetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listAssetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__listAssetResponse * SOAP_FMAC4 soap_in_ns2__listAssetResponse(struct soap *soap, const char *tag, struct ns2__listAssetResponse *a, const char *type)
{
	short soap_flag__listAssetReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__listAssetResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__listAssetResponse, sizeof(struct ns2__listAssetResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__listAssetResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__listAssetReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__AssetList(soap, NULL, &a->_listAssetReturn, "ns1:AssetList"))
				{	soap_flag__listAssetReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__listAssetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__listAssetResponse, 0, sizeof(struct ns2__listAssetResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__listAssetResponse * SOAP_FMAC6 soap_new_ns2__listAssetResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__listAssetResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__listAssetResponse(struct soap *soap, struct ns2__listAssetResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__listAssetResponse * SOAP_FMAC4 soap_instantiate_ns2__listAssetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__listAssetResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__listAssetResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__listAssetResponse;
		if (size)
			*size = sizeof(struct ns2__listAssetResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__listAssetResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__listAssetResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__listAssetResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__listAssetResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__listAssetResponse %p -> %p\n", q, p));
	*(struct ns2__listAssetResponse*)p = *(struct ns2__listAssetResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getAsset(struct soap *soap, struct ns2__getAsset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_providerID);
	soap_default_std__string(soap, &a->_providerAssetID);
	soap_default_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getAsset(struct soap *soap, const struct ns2__getAsset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_providerID);
	soap_serialize_std__string(soap, &a->_providerAssetID);
	soap_serialize_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getAsset(struct soap *soap, const struct ns2__getAsset *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__getAsset);
	if (soap_out_ns2__getAsset(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getAsset(struct soap *soap, const char *tag, int id, const struct ns2__getAsset *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getAsset), type))
		return soap->error;
	if (soap_out_std__string(soap, "providerID", -1, &a->_providerID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "providerAssetID", -1, &a->_providerAssetID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &a->_clusterID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getAsset * SOAP_FMAC4 soap_get_ns2__getAsset(struct soap *soap, struct ns2__getAsset *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getAsset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__getAsset * SOAP_FMAC4 soap_in_ns2__getAsset(struct soap *soap, const char *tag, struct ns2__getAsset *a, const char *type)
{
	short soap_flag__providerID = 1, soap_flag__providerAssetID = 1, soap_flag__clusterID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__getAsset *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getAsset, sizeof(struct ns2__getAsset), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__getAsset(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__providerID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerID, "xsd:string"))
				{	soap_flag__providerID--;
					continue;
				}
			if (soap_flag__providerAssetID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerAssetID, "xsd:string"))
				{	soap_flag__providerAssetID--;
					continue;
				}
			if (soap_flag__clusterID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_clusterID, "xsd:string"))
				{	soap_flag__clusterID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__getAsset *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getAsset, 0, sizeof(struct ns2__getAsset), 0, soap_copy_ns2__getAsset);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__providerID > 0 || soap_flag__providerAssetID > 0 || soap_flag__clusterID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__getAsset * SOAP_FMAC6 soap_new_ns2__getAsset(struct soap *soap, int n)
{	return soap_instantiate_ns2__getAsset(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__getAsset(struct soap *soap, struct ns2__getAsset *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__getAsset * SOAP_FMAC4 soap_instantiate_ns2__getAsset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getAsset(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__getAsset, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__getAsset;
		if (size)
			*size = sizeof(struct ns2__getAsset);
	}
	else
	{	cp->ptr = (void*)new struct ns2__getAsset[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__getAsset);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__getAsset*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__getAsset(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__getAsset %p -> %p\n", q, p));
	*(struct ns2__getAsset*)p = *(struct ns2__getAsset*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getAssetResponse(struct soap *soap, struct ns2__getAssetResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_getAssetReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getAssetResponse(struct soap *soap, const struct ns2__getAssetResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Asset(soap, &a->_getAssetReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getAssetResponse(struct soap *soap, const struct ns2__getAssetResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__getAssetResponse);
	if (soap_out_ns2__getAssetResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getAssetResponse(struct soap *soap, const char *tag, int id, const struct ns2__getAssetResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getAssetResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__Asset(soap, "getAssetReturn", -1, &a->_getAssetReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getAssetResponse * SOAP_FMAC4 soap_get_ns2__getAssetResponse(struct soap *soap, struct ns2__getAssetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getAssetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__getAssetResponse * SOAP_FMAC4 soap_in_ns2__getAssetResponse(struct soap *soap, const char *tag, struct ns2__getAssetResponse *a, const char *type)
{
	short soap_flag__getAssetReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__getAssetResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getAssetResponse, sizeof(struct ns2__getAssetResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__getAssetResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__getAssetReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Asset(soap, NULL, &a->_getAssetReturn, "ns1:Asset"))
				{	soap_flag__getAssetReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__getAssetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getAssetResponse, 0, sizeof(struct ns2__getAssetResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__getAssetResponse * SOAP_FMAC6 soap_new_ns2__getAssetResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__getAssetResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__getAssetResponse(struct soap *soap, struct ns2__getAssetResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__getAssetResponse * SOAP_FMAC4 soap_instantiate_ns2__getAssetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getAssetResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__getAssetResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__getAssetResponse;
		if (size)
			*size = sizeof(struct ns2__getAssetResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__getAssetResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__getAssetResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__getAssetResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__getAssetResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__getAssetResponse %p -> %p\n", q, p));
	*(struct ns2__getAssetResponse*)p = *(struct ns2__getAssetResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__deleteCache(struct soap *soap, struct ns2__deleteCache *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_providerID);
	soap_default_std__string(soap, &a->_providerAssetID);
	soap_default_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__deleteCache(struct soap *soap, const struct ns2__deleteCache *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_providerID);
	soap_serialize_std__string(soap, &a->_providerAssetID);
	soap_serialize_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__deleteCache(struct soap *soap, const struct ns2__deleteCache *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__deleteCache);
	if (soap_out_ns2__deleteCache(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteCache(struct soap *soap, const char *tag, int id, const struct ns2__deleteCache *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__deleteCache), type))
		return soap->error;
	if (soap_out_std__string(soap, "providerID", -1, &a->_providerID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "providerAssetID", -1, &a->_providerAssetID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &a->_clusterID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__deleteCache * SOAP_FMAC4 soap_get_ns2__deleteCache(struct soap *soap, struct ns2__deleteCache *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__deleteCache(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__deleteCache * SOAP_FMAC4 soap_in_ns2__deleteCache(struct soap *soap, const char *tag, struct ns2__deleteCache *a, const char *type)
{
	short soap_flag__providerID = 1, soap_flag__providerAssetID = 1, soap_flag__clusterID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__deleteCache *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__deleteCache, sizeof(struct ns2__deleteCache), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__deleteCache(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__providerID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerID, "xsd:string"))
				{	soap_flag__providerID--;
					continue;
				}
			if (soap_flag__providerAssetID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerAssetID, "xsd:string"))
				{	soap_flag__providerAssetID--;
					continue;
				}
			if (soap_flag__clusterID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_clusterID, "xsd:string"))
				{	soap_flag__clusterID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__deleteCache *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__deleteCache, 0, sizeof(struct ns2__deleteCache), 0, soap_copy_ns2__deleteCache);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__providerID > 0 || soap_flag__providerAssetID > 0 || soap_flag__clusterID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__deleteCache * SOAP_FMAC6 soap_new_ns2__deleteCache(struct soap *soap, int n)
{	return soap_instantiate_ns2__deleteCache(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__deleteCache(struct soap *soap, struct ns2__deleteCache *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__deleteCache * SOAP_FMAC4 soap_instantiate_ns2__deleteCache(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__deleteCache(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__deleteCache, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__deleteCache;
		if (size)
			*size = sizeof(struct ns2__deleteCache);
	}
	else
	{	cp->ptr = (void*)new struct ns2__deleteCache[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__deleteCache);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__deleteCache*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__deleteCache(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__deleteCache %p -> %p\n", q, p));
	*(struct ns2__deleteCache*)p = *(struct ns2__deleteCache*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__deleteCacheResponse(struct soap *soap, struct ns2__deleteCacheResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_deleteCacheReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__deleteCacheResponse(struct soap *soap, const struct ns2__deleteCacheResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__deleteCacheResponse(struct soap *soap, const struct ns2__deleteCacheResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__deleteCacheResponse);
	if (soap_out_ns2__deleteCacheResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__deleteCacheResponse(struct soap *soap, const char *tag, int id, const struct ns2__deleteCacheResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__deleteCacheResponse), type))
		return soap->error;
	if (soap_out_LONG64(soap, "deleteCacheReturn", -1, &a->_deleteCacheReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__deleteCacheResponse * SOAP_FMAC4 soap_get_ns2__deleteCacheResponse(struct soap *soap, struct ns2__deleteCacheResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__deleteCacheResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__deleteCacheResponse * SOAP_FMAC4 soap_in_ns2__deleteCacheResponse(struct soap *soap, const char *tag, struct ns2__deleteCacheResponse *a, const char *type)
{
	short soap_flag__deleteCacheReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__deleteCacheResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__deleteCacheResponse, sizeof(struct ns2__deleteCacheResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__deleteCacheResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__deleteCacheReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_deleteCacheReturn, "xsd:long"))
				{	soap_flag__deleteCacheReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__deleteCacheResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__deleteCacheResponse, 0, sizeof(struct ns2__deleteCacheResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__deleteCacheReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__deleteCacheResponse * SOAP_FMAC6 soap_new_ns2__deleteCacheResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__deleteCacheResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__deleteCacheResponse(struct soap *soap, struct ns2__deleteCacheResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__deleteCacheResponse * SOAP_FMAC4 soap_instantiate_ns2__deleteCacheResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__deleteCacheResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__deleteCacheResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__deleteCacheResponse;
		if (size)
			*size = sizeof(struct ns2__deleteCacheResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__deleteCacheResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__deleteCacheResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__deleteCacheResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__deleteCacheResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__deleteCacheResponse %p -> %p\n", q, p));
	*(struct ns2__deleteCacheResponse*)p = *(struct ns2__deleteCacheResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__addCache(struct soap *soap, struct ns2__addCache *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_providerID);
	soap_default_std__string(soap, &a->_providerAssetID);
	soap_default_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__addCache(struct soap *soap, const struct ns2__addCache *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_providerID);
	soap_serialize_std__string(soap, &a->_providerAssetID);
	soap_serialize_std__string(soap, &a->_clusterID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__addCache(struct soap *soap, const struct ns2__addCache *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__addCache);
	if (soap_out_ns2__addCache(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addCache(struct soap *soap, const char *tag, int id, const struct ns2__addCache *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__addCache), type))
		return soap->error;
	if (soap_out_std__string(soap, "providerID", -1, &a->_providerID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "providerAssetID", -1, &a->_providerAssetID, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clusterID", -1, &a->_clusterID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__addCache * SOAP_FMAC4 soap_get_ns2__addCache(struct soap *soap, struct ns2__addCache *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__addCache(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__addCache * SOAP_FMAC4 soap_in_ns2__addCache(struct soap *soap, const char *tag, struct ns2__addCache *a, const char *type)
{
	short soap_flag__providerID = 1, soap_flag__providerAssetID = 1, soap_flag__clusterID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__addCache *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__addCache, sizeof(struct ns2__addCache), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__addCache(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__providerID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerID, "xsd:string"))
				{	soap_flag__providerID--;
					continue;
				}
			if (soap_flag__providerAssetID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_providerAssetID, "xsd:string"))
				{	soap_flag__providerAssetID--;
					continue;
				}
			if (soap_flag__clusterID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_clusterID, "xsd:string"))
				{	soap_flag__clusterID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__addCache *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__addCache, 0, sizeof(struct ns2__addCache), 0, soap_copy_ns2__addCache);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__providerID > 0 || soap_flag__providerAssetID > 0 || soap_flag__clusterID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__addCache * SOAP_FMAC6 soap_new_ns2__addCache(struct soap *soap, int n)
{	return soap_instantiate_ns2__addCache(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__addCache(struct soap *soap, struct ns2__addCache *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__addCache * SOAP_FMAC4 soap_instantiate_ns2__addCache(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__addCache(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__addCache, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__addCache;
		if (size)
			*size = sizeof(struct ns2__addCache);
	}
	else
	{	cp->ptr = (void*)new struct ns2__addCache[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__addCache);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__addCache*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__addCache(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__addCache %p -> %p\n", q, p));
	*(struct ns2__addCache*)p = *(struct ns2__addCache*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__addCacheResponse(struct soap *soap, struct ns2__addCacheResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_addCacheReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__addCacheResponse(struct soap *soap, const struct ns2__addCacheResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__addCacheResponse(struct soap *soap, const struct ns2__addCacheResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__addCacheResponse);
	if (soap_out_ns2__addCacheResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__addCacheResponse(struct soap *soap, const char *tag, int id, const struct ns2__addCacheResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__addCacheResponse), type))
		return soap->error;
	if (soap_out_LONG64(soap, "addCacheReturn", -1, &a->_addCacheReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__addCacheResponse * SOAP_FMAC4 soap_get_ns2__addCacheResponse(struct soap *soap, struct ns2__addCacheResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__addCacheResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__addCacheResponse * SOAP_FMAC4 soap_in_ns2__addCacheResponse(struct soap *soap, const char *tag, struct ns2__addCacheResponse *a, const char *type)
{
	short soap_flag__addCacheReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__addCacheResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__addCacheResponse, sizeof(struct ns2__addCacheResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__addCacheResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__addCacheReturn && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_addCacheReturn, "xsd:long"))
				{	soap_flag__addCacheReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__addCacheResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__addCacheResponse, 0, sizeof(struct ns2__addCacheResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__addCacheReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct ns2__addCacheResponse * SOAP_FMAC6 soap_new_ns2__addCacheResponse(struct soap *soap, int n)
{	return soap_instantiate_ns2__addCacheResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns2__addCacheResponse(struct soap *soap, struct ns2__addCacheResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct ns2__addCacheResponse * SOAP_FMAC4 soap_instantiate_ns2__addCacheResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__addCacheResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__addCacheResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__addCacheResponse;
		if (size)
			*size = sizeof(struct ns2__addCacheResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__addCacheResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__addCacheResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__addCacheResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__addCacheResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__addCacheResponse %p -> %p\n", q, p));
	*(struct ns2__addCacheResponse*)p = *(struct ns2__addCacheResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ClusterList(struct soap *soap, ns1__ClusterList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ClusterList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ClusterList(struct soap *soap, ns1__ClusterList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ClusterList);
	if (soap_out_PointerTons1__ClusterList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ClusterList(struct soap *soap, const char *tag, int id, ns1__ClusterList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ClusterList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ClusterList ** SOAP_FMAC4 soap_get_PointerTons1__ClusterList(struct soap *soap, ns1__ClusterList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ClusterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ClusterList ** SOAP_FMAC4 soap_in_PointerTons1__ClusterList(struct soap *soap, const char *tag, ns1__ClusterList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ClusterList **)soap_malloc(soap, sizeof(ns1__ClusterList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ClusterList *)soap_instantiate_ns1__ClusterList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ClusterList ** p = (ns1__ClusterList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ClusterList, sizeof(ns1__ClusterList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProviderList(struct soap *soap, ns1__ProviderList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ProviderList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProviderList(struct soap *soap, ns1__ProviderList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ProviderList);
	if (soap_out_PointerTons1__ProviderList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProviderList(struct soap *soap, const char *tag, int id, ns1__ProviderList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ProviderList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ProviderList ** SOAP_FMAC4 soap_get_PointerTons1__ProviderList(struct soap *soap, ns1__ProviderList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ProviderList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ProviderList ** SOAP_FMAC4 soap_in_PointerTons1__ProviderList(struct soap *soap, const char *tag, ns1__ProviderList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ProviderList **)soap_malloc(soap, sizeof(ns1__ProviderList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ProviderList *)soap_instantiate_ns1__ProviderList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ProviderList ** p = (ns1__ProviderList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ProviderList, sizeof(ns1__ProviderList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AssetList(struct soap *soap, ns1__AssetList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__AssetList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AssetList(struct soap *soap, ns1__AssetList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__AssetList);
	if (soap_out_PointerTons1__AssetList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AssetList(struct soap *soap, const char *tag, int id, ns1__AssetList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__AssetList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AssetList ** SOAP_FMAC4 soap_get_PointerTons1__AssetList(struct soap *soap, ns1__AssetList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AssetList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__AssetList ** SOAP_FMAC4 soap_in_PointerTons1__AssetList(struct soap *soap, const char *tag, ns1__AssetList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AssetList **)soap_malloc(soap, sizeof(ns1__AssetList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AssetList *)soap_instantiate_ns1__AssetList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__AssetList ** p = (ns1__AssetList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__AssetList, sizeof(ns1__AssetList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Asset(struct soap *soap, ns1__Asset *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Asset))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Asset(struct soap *soap, ns1__Asset *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Asset);
	if (soap_out_PointerTons1__Asset(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Asset(struct soap *soap, const char *tag, int id, ns1__Asset *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Asset);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Asset ** SOAP_FMAC4 soap_get_PointerTons1__Asset(struct soap *soap, ns1__Asset **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Asset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__Asset ** SOAP_FMAC4 soap_in_PointerTons1__Asset(struct soap *soap, const char *tag, ns1__Asset **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Asset **)soap_malloc(soap, sizeof(ns1__Asset *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Asset *)soap_instantiate_ns1__Asset(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Asset ** p = (ns1__Asset **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Asset, sizeof(ns1__Asset), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Cluster(struct soap *soap, ns1__Cluster *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Cluster))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Cluster(struct soap *soap, ns1__Cluster *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Cluster);
	if (soap_out_PointerTons1__Cluster(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Cluster(struct soap *soap, const char *tag, int id, ns1__Cluster *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Cluster);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Cluster ** SOAP_FMAC4 soap_get_PointerTons1__Cluster(struct soap *soap, ns1__Cluster **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Cluster(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__Cluster ** SOAP_FMAC4 soap_in_PointerTons1__Cluster(struct soap *soap, const char *tag, ns1__Cluster **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Cluster **)soap_malloc(soap, sizeof(ns1__Cluster *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Cluster *)soap_instantiate_ns1__Cluster(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Cluster ** p = (ns1__Cluster **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Cluster, sizeof(ns1__Cluster), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, std::vector<ns1__Cluster * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, const std::vector<ns1__Cluster * >*a)
{
	for (std::vector<ns1__Cluster * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__Cluster(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, const char *tag, int id, const std::vector<ns1__Cluster * >*a, const char *type)
{
	for (std::vector<ns1__Cluster * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__Cluster(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__Cluster * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, const char *tag, std::vector<ns1__Cluster * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__Cluster(soap, -1)))
		return NULL;
	ns1__Cluster *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__Cluster, SOAP_TYPE_std__vectorTemplateOfPointerTons1__Cluster, sizeof(ns1__Cluster), 1))
				break;
			if (!soap_in_PointerTons1__Cluster(soap, tag, NULL, "ns1:Cluster"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__Cluster(soap, tag, &n, "ns1:Cluster"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__Cluster * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__Cluster(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, std::vector<ns1__Cluster * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__Cluster * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__Cluster(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__Cluster, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__Cluster * >;
		if (size)
			*size = sizeof(std::vector<ns1__Cluster * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__Cluster * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__Cluster * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__Cluster * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__Cluster(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__Cluster * > %p -> %p\n", q, p));
	*(std::vector<ns1__Cluster * >*)p = *(std::vector<ns1__Cluster * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<std::string > * SOAP_FMAC6 soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<std::string > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<std::string >;
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)new std::vector<std::string >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

/* End of LAMFacadeForCMEC.cpp */
