/* LAMFacadeForCMEStub.h
   Generated by gSOAP 2.7.10 from LAMFacadeForCME.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef LAMFacadeForCMEStub_H
#define LAMFacadeForCMEStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns1__AssetList
#define SOAP_TYPE_ns1__AssetList (8)
/* ns1:AssetList */
class SOAP_CMAC ns1__AssetList
{
public:
	LONG64 returnCode;	/* required element of type xsd:long */
	std::vector<std::string >assetID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__AssetList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AssetList() : returnCode(0), soap(NULL) { }
	virtual ~ns1__AssetList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Asset
#define SOAP_TYPE_ns1__Asset (9)
/* ns1:Asset */
class SOAP_CMAC ns1__Asset
{
public:
	LONG64 returnCode;	/* required element of type xsd:long */
	std::string providerID;	/* required element of type xsd:string */
	std::string providerAssetID;	/* required element of type xsd:string */
	LONG64 size;	/* required element of type xsd:long */
	LONG64 supportFileSize;	/* required element of type xsd:long */
	LONG64 bitRate;	/* required element of type xsd:long */
	LONG64 durationSecond;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__Asset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Asset() : returnCode(0), size(0), supportFileSize(0), bitRate(0), durationSecond(0), soap(NULL) { }
	virtual ~ns1__Asset() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProviderList
#define SOAP_TYPE_ns1__ProviderList (10)
/* ns1:ProviderList */
class SOAP_CMAC ns1__ProviderList
{
public:
	LONG64 returnCode;	/* required element of type xsd:long */
	std::vector<std::string >ProviderID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__ProviderList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProviderList() : returnCode(0), soap(NULL) { }
	virtual ~ns1__ProviderList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Cluster
#define SOAP_TYPE_ns1__Cluster (11)
/* ns1:Cluster */
class SOAP_CMAC ns1__Cluster
{
public:
	std::string clusterID;	/* required element of type xsd:string */
	int cacheable;	/* required element of type xsd:int */
	int cacheLevel;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__Cluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Cluster() : cacheable(0), cacheLevel(0), soap(NULL) { }
	virtual ~ns1__Cluster() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterList
#define SOAP_TYPE_ns1__ClusterList (12)
/* ns1:ClusterList */
class SOAP_CMAC ns1__ClusterList
{
public:
	std::vector<ns1__Cluster * >clusters;	/* optional element of type ns1:Cluster */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__ClusterList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterList() : soap(NULL) { }
	virtual ~ns1__ClusterList() { }
};
#endif

#ifndef SOAP_TYPE_ns2__addCacheResponse
#define SOAP_TYPE_ns2__addCacheResponse (21)
/* ns2:addCacheResponse */
struct ns2__addCacheResponse
{
public:
	LONG64 _addCacheReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_ns2__addCache
#define SOAP_TYPE_ns2__addCache (22)
/* ns2:addCache */
struct ns2__addCache
{
public:
	std::string _providerID;	/* required element of type xsd:string */
	std::string _providerAssetID;	/* required element of type xsd:string */
	std::string _clusterID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__deleteCacheResponse
#define SOAP_TYPE_ns2__deleteCacheResponse (24)
/* ns2:deleteCacheResponse */
struct ns2__deleteCacheResponse
{
public:
	LONG64 _deleteCacheReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_ns2__deleteCache
#define SOAP_TYPE_ns2__deleteCache (25)
/* ns2:deleteCache */
struct ns2__deleteCache
{
public:
	std::string _providerID;	/* required element of type xsd:string */
	std::string _providerAssetID;	/* required element of type xsd:string */
	std::string _clusterID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__getAssetResponse
#define SOAP_TYPE_ns2__getAssetResponse (26)
/* ns2:getAssetResponse */
struct ns2__getAssetResponse
{
public:
	ns1__Asset *_getAssetReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Asset */
};
#endif

#ifndef SOAP_TYPE_ns2__getAsset
#define SOAP_TYPE_ns2__getAsset (30)
/* ns2:getAsset */
struct ns2__getAsset
{
public:
	std::string _providerID;	/* required element of type xsd:string */
	std::string _providerAssetID;	/* required element of type xsd:string */
	std::string _clusterID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__listAssetResponse
#define SOAP_TYPE_ns2__listAssetResponse (31)
/* ns2:listAssetResponse */
struct ns2__listAssetResponse
{
public:
	ns1__AssetList *_listAssetReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AssetList */
};
#endif

#ifndef SOAP_TYPE_ns2__listAsset
#define SOAP_TYPE_ns2__listAsset (35)
/* ns2:listAsset */
struct ns2__listAsset
{
public:
	std::string _providerID;	/* required element of type xsd:string */
	std::string _clusterID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__listProviderResponse
#define SOAP_TYPE_ns2__listProviderResponse (36)
/* ns2:listProviderResponse */
struct ns2__listProviderResponse
{
public:
	ns1__ProviderList *listProviderReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProviderList */
};
#endif

#ifndef SOAP_TYPE_ns2__listProvider
#define SOAP_TYPE_ns2__listProvider (40)
/* ns2:listProvider */
struct ns2__listProvider
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns2__getClusterConfigResponse
#define SOAP_TYPE_ns2__getClusterConfigResponse (41)
/* ns2:getClusterConfigResponse */
struct ns2__getClusterConfigResponse
{
public:
	LONG64 state;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	LONG64 totalSize;	/* required element of type xsd:long */
	LONG64 freeSize;	/* required element of type xsd:long */
	std::string serviceGroup;	/* required element of type xsd:string */
	std::string nodeIPs;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__getClusterConfig
#define SOAP_TYPE_ns2__getClusterConfig (44)
/* ns2:getClusterConfig */
struct ns2__getClusterConfig
{
public:
	std::string clusterID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__handshakeResponse
#define SOAP_TYPE_ns2__handshakeResponse (46)
/* ns2:handshakeResponse */
struct ns2__handshakeResponse
{
public:
	LONG64 _handshakeReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_ns2__handshake
#define SOAP_TYPE_ns2__handshake (47)
/* ns2:handshake */
struct ns2__handshake
{
public:
	std::string _cmeVersion;	/* required element of type xsd:string */
	LONG64 _cmeStatus;	/* required element of type xsd:long */
	std::string _cmeEndPoint;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__listClusterResponse
#define SOAP_TYPE_ns2__listClusterResponse (48)
/* ns2:listClusterResponse */
struct ns2__listClusterResponse
{
public:
	ns1__ClusterList *listClusterReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ClusterList */
};
#endif

#ifndef SOAP_TYPE_ns2__listCluster
#define SOAP_TYPE_ns2__listCluster (52)
/* ns2:listCluster */
struct ns2__listCluster
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns2__getExportURLResponse
#define SOAP_TYPE_ns2__getExportURLResponse (53)
/* ns2:getExportURLResponse */
struct ns2__getExportURLResponse
{
public:
	LONG64 _returnCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	std::string _contentType;	/* required element of type xsd:string */
	std::string _contentSubtype;	/* required element of type xsd:string */
	std::string _sourceURL;	/* required element of type xsd:string */
	std::string _userName;	/* required element of type xsd:string */
	std::string _password;	/* required element of type xsd:string */
	LONG64 _bitrate;	/* required element of type xsd:long */
	std::string _windowStart;	/* required element of type xsd:string */
	std::string _windowEnd;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__getExportURL
#define SOAP_TYPE_ns2__getExportURL (56)
/* ns2:getExportURL */
struct ns2__getExportURL
{
public:
	std::string _providerID;	/* required element of type xsd:string */
	std::string _providerAssetID;	/* required element of type xsd:string */
	std::string _clusterID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__copyFromResponse
#define SOAP_TYPE_ns2__copyFromResponse (58)
/* ns2:copyFromResponse */
struct ns2__copyFromResponse
{
public:
	LONG64 _copyFromReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_ns2__copyFrom
#define SOAP_TYPE_ns2__copyFrom (59)
/* ns2:copyFrom */
struct ns2__copyFrom
{
public:
	std::string _providerID;	/* required element of type xsd:string */
	std::string _providerAssetID;	/* required element of type xsd:string */
	std::string _clusterID;	/* required element of type xsd:string */
	std::string _contentType;	/* required element of type xsd:string */
	std::string _contentSubtype;	/* required element of type xsd:string */
	std::string _sourceURL;	/* required element of type xsd:string */
	std::string _userName;	/* required element of type xsd:string */
	std::string _password;	/* required element of type xsd:string */
	LONG64 _bitrate;	/* required element of type xsd:long */
	std::string _windowStart;	/* required element of type xsd:string */
	std::string _windowEnd;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (60)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (61)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (63)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (66)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (67)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns2__addCache(struct soap*, std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_addCacheReturn);

SOAP_FMAC5 int SOAP_FMAC6 ns2__deleteCache(struct soap*, std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_deleteCacheReturn);

SOAP_FMAC5 int SOAP_FMAC6 ns2__getAsset(struct soap*, std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getAssetResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 ns2__listAsset(struct soap*, std::string _providerID, std::string _clusterID, struct ns2__listAssetResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 ns2__listProvider(struct soap*, struct ns2__listProviderResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 ns2__getClusterConfig(struct soap*, std::string clusterID, struct ns2__getClusterConfigResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 ns2__handshake(struct soap*, std::string _cmeVersion, LONG64 _cmeStatus, std::string _cmeEndPoint, LONG64 &_handshakeReturn);

SOAP_FMAC5 int SOAP_FMAC6 ns2__listCluster(struct soap*, struct ns2__listClusterResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 ns2__getExportURL(struct soap*, std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getExportURLResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 ns2__copyFrom(struct soap*, std::string _providerID, std::string _providerAssetID, std::string _clusterID, std::string _contentType, std::string _contentSubtype, std::string _sourceURL, std::string _userName, std::string _password, LONG64 _bitrate, std::string _windowStart, std::string _windowEnd, LONG64 &_copyFromReturn);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__addCache(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_addCacheReturn);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__deleteCache(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, LONG64 &_deleteCacheReturn);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__getAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getAssetResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__listAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _clusterID, struct ns2__listAssetResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__listProvider(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__listProviderResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__getClusterConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string clusterID, struct ns2__getClusterConfigResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__handshake(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _cmeVersion, LONG64 _cmeStatus, std::string _cmeEndPoint, LONG64 &_handshakeReturn);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__listCluster(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__listClusterResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__getExportURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, struct ns2__getExportURLResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__copyFrom(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _providerID, std::string _providerAssetID, std::string _clusterID, std::string _contentType, std::string _contentSubtype, std::string _sourceURL, std::string _userName, std::string _password, LONG64 _bitrate, std::string _windowStart, std::string _windowEnd, LONG64 &_copyFromReturn);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__addCache(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__deleteCache(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__getAsset(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__listAsset(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__listProvider(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__getClusterConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__handshake(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__listCluster(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__getExportURL(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__copyFrom(struct soap*);

#endif

/* End of LAMFacadeForCMEStub.h */
