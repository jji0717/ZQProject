/* XplannerSOAPClient.cpp
   Generated by gSOAP 2.7.10 from Xplanner.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "XplannerSOAPH.h"

SOAP_SOURCE_STAMP("@(#) XplannerSOAPClient.cpp ver 2.7.10 2015-02-02 06:05:40 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _objectId, struct ns6__getAttributesResponse &_param_1)
{	struct ns6__getAttributes soap_tmp_ns6__getAttributes;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getAttributes._objectId = _objectId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getAttributes(soap, &soap_tmp_ns6__getAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getAttributes(soap, &soap_tmp_ns6__getAttributes, "ns6:getAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getAttributes(soap, &soap_tmp_ns6__getAttributes, "ns6:getAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getAttributesResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getAttributesResponse(soap, &_param_1, "ns6:getAttributesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__update(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__updateResponse &_param_2)
{	struct ns6__update soap_tmp_ns6__update;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__update._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__update(soap, &soap_tmp_ns6__update);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__update(soap, &soap_tmp_ns6__update, "ns6:update", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__update(soap, &soap_tmp_ns6__update, "ns6:update", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__updateResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__updateResponse(soap, &_param_2, "ns6:updateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__update_(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__updateResponse_ &_param_3)
{	struct ns6__update_ soap_tmp_ns6__update_;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__update_._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__update_(soap, &soap_tmp_ns6__update_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__update_(soap, &soap_tmp_ns6__update_, "ns6:update", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__update_(soap, &soap_tmp_ns6__update_, "ns6:update", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__updateResponse_(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__updateResponse_(soap, &_param_3, "ns6:updateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__update__(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__updateResponse__ &_param_4)
{	struct ns6__update__ soap_tmp_ns6__update__;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__update__._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__update__(soap, &soap_tmp_ns6__update__);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__update__(soap, &soap_tmp_ns6__update__, "ns6:update", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__update__(soap, &soap_tmp_ns6__update__, "ns6:update", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__updateResponse__(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__updateResponse__(soap, &_param_4, "ns6:updateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__update___(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__updateResponse___ &_param_5)
{	struct ns6__update___ soap_tmp_ns6__update___;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__update___._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__update___(soap, &soap_tmp_ns6__update___);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__update___(soap, &soap_tmp_ns6__update___, "ns6:update", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__update___(soap, &soap_tmp_ns6__update___, "ns6:update", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__updateResponse___(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__updateResponse___(soap, &_param_5, "ns6:updateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__update____(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__updateResponse____ &_param_6)
{	struct ns6__update____ soap_tmp_ns6__update____;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__update____._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__update____(soap, &soap_tmp_ns6__update____);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__update____(soap, &soap_tmp_ns6__update____, "ns6:update", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__update____(soap, &soap_tmp_ns6__update____, "ns6:update", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__updateResponse____(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__updateResponse____(soap, &_param_6, "ns6:updateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__update_____(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__updateResponse_____ &_param_7)
{	struct ns6__update_____ soap_tmp_ns6__update_____;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__update_____._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__update_____(soap, &soap_tmp_ns6__update_____);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__update_____(soap, &soap_tmp_ns6__update_____, "ns6:update", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__update_____(soap, &soap_tmp_ns6__update_____, "ns6:update", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__updateResponse_____(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__updateResponse_____(soap, &_param_7, "ns6:updateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__update______(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__updateResponse______ &_param_8)
{	struct ns6__update______ soap_tmp_ns6__update______;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__update______._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__update______(soap, &soap_tmp_ns6__update______);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__update______(soap, &soap_tmp_ns6__update______, "ns6:update", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__update______(soap, &soap_tmp_ns6__update______, "ns6:update", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__updateResponse______(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__updateResponse______(soap, &_param_8, "ns6:updateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getAttribute(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _objectId, char *_key, char *&_getAttributeReturn)
{	struct ns6__getAttribute soap_tmp_ns6__getAttribute;
	struct ns6__getAttributeResponse *soap_tmp_ns6__getAttributeResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getAttribute._objectId = _objectId;
	soap_tmp_ns6__getAttribute._key = _key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getAttribute(soap, &soap_tmp_ns6__getAttribute);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getAttribute(soap, &soap_tmp_ns6__getAttribute, "ns6:getAttribute", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getAttribute(soap, &soap_tmp_ns6__getAttribute, "ns6:getAttribute", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	_getAttributeReturn = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns6__getAttributeResponse = soap_get_ns6__getAttributeResponse(soap, NULL, "ns6:getAttributeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_getAttributeReturn = soap_tmp_ns6__getAttributeResponse->_getAttributeReturn;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__setAttribute(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _objectId, char *_key, char *_value, struct ns6__setAttributeResponse &_param_9)
{	struct ns6__setAttribute soap_tmp_ns6__setAttribute;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__setAttribute._objectId = _objectId;
	soap_tmp_ns6__setAttribute._key = _key;
	soap_tmp_ns6__setAttribute._value = _value;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__setAttribute(soap, &soap_tmp_ns6__setAttribute);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__setAttribute(soap, &soap_tmp_ns6__setAttribute, "ns6:setAttribute", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__setAttribute(soap, &soap_tmp_ns6__setAttribute, "ns6:setAttribute", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__setAttributeResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__setAttributeResponse(soap, &_param_9, "ns6:setAttributeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getNote(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__getNoteResponse &_param_10)
{	struct ns6__getNote soap_tmp_ns6__getNote;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getNote._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getNote(soap, &soap_tmp_ns6__getNote);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getNote(soap, &soap_tmp_ns6__getNote, "ns6:getNote", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getNote(soap, &soap_tmp_ns6__getNote, "ns6:getNote", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getNoteResponse(soap, &_param_10);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getNoteResponse(soap, &_param_10, "ns6:getNoteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__removeNote(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__removeNoteResponse &_param_11)
{	struct ns6__removeNote soap_tmp_ns6__removeNote;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__removeNote._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__removeNote(soap, &soap_tmp_ns6__removeNote);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__removeNote(soap, &soap_tmp_ns6__removeNote, "ns6:removeNote", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__removeNote(soap, &soap_tmp_ns6__removeNote, "ns6:removeNote", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__removeNoteResponse(soap, &_param_11);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__removeNoteResponse(soap, &_param_11, "ns6:removeNoteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getPerson(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__getPersonResponse &_param_12)
{	struct ns6__getPerson soap_tmp_ns6__getPerson;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getPerson._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getPerson(soap, &soap_tmp_ns6__getPerson);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getPerson(soap, &soap_tmp_ns6__getPerson, "ns6:getPerson", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getPerson(soap, &soap_tmp_ns6__getPerson, "ns6:getPerson", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getPersonResponse(soap, &_param_12);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getPersonResponse(soap, &_param_12, "ns6:getPersonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getIterations(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _projectId, struct ns6__getIterationsResponse &_param_13)
{	struct ns6__getIterations soap_tmp_ns6__getIterations;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getIterations._projectId = _projectId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getIterations(soap, &soap_tmp_ns6__getIterations);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getIterations(soap, &soap_tmp_ns6__getIterations, "ns6:getIterations", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getIterations(soap, &soap_tmp_ns6__getIterations, "ns6:getIterations", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getIterationsResponse(soap, &_param_13);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getIterationsResponse(soap, &_param_13, "ns6:getIterationsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getCurrentIteration(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _projectId, struct ns6__getCurrentIterationResponse &_param_14)
{	struct ns6__getCurrentIteration soap_tmp_ns6__getCurrentIteration;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getCurrentIteration._projectId = _projectId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getCurrentIteration(soap, &soap_tmp_ns6__getCurrentIteration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getCurrentIteration(soap, &soap_tmp_ns6__getCurrentIteration, "ns6:getCurrentIteration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getCurrentIteration(soap, &soap_tmp_ns6__getCurrentIteration, "ns6:getCurrentIteration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getCurrentIterationResponse(soap, &_param_14);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getCurrentIterationResponse(soap, &_param_14, "ns6:getCurrentIterationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getUserStories(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _containerId, struct ns6__getUserStoriesResponse &_param_15)
{	struct ns6__getUserStories soap_tmp_ns6__getUserStories;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getUserStories._containerId = _containerId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getUserStories(soap, &soap_tmp_ns6__getUserStories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getUserStories(soap, &soap_tmp_ns6__getUserStories, "ns6:getUserStories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getUserStories(soap, &soap_tmp_ns6__getUserStories, "ns6:getUserStories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getUserStoriesResponse(soap, &_param_15);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getUserStoriesResponse(soap, &_param_15, "ns6:getUserStoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getTasks(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _containerId, struct ns6__getTasksResponse &_param_16)
{	struct ns6__getTasks soap_tmp_ns6__getTasks;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getTasks._containerId = _containerId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getTasks(soap, &soap_tmp_ns6__getTasks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getTasks(soap, &soap_tmp_ns6__getTasks, "ns6:getTasks", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getTasks(soap, &soap_tmp_ns6__getTasks, "ns6:getTasks", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getTasksResponse(soap, &_param_16);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getTasksResponse(soap, &_param_16, "ns6:getTasksResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getTimeEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _containerId, struct ns6__getTimeEntriesResponse &_param_17)
{	struct ns6__getTimeEntries soap_tmp_ns6__getTimeEntries;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getTimeEntries._containerId = _containerId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getTimeEntries(soap, &soap_tmp_ns6__getTimeEntries);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getTimeEntries(soap, &soap_tmp_ns6__getTimeEntries, "ns6:getTimeEntries", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getTimeEntries(soap, &soap_tmp_ns6__getTimeEntries, "ns6:getTimeEntries", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getTimeEntriesResponse(soap, &_param_17);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getTimeEntriesResponse(soap, &_param_17, "ns6:getTimeEntriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getCurrentTasksForPerson(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _personId, struct ns6__getCurrentTasksForPersonResponse &_param_18)
{	struct ns6__getCurrentTasksForPerson soap_tmp_ns6__getCurrentTasksForPerson;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getCurrentTasksForPerson._personId = _personId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getCurrentTasksForPerson(soap, &soap_tmp_ns6__getCurrentTasksForPerson);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getCurrentTasksForPerson(soap, &soap_tmp_ns6__getCurrentTasksForPerson, "ns6:getCurrentTasksForPerson", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getCurrentTasksForPerson(soap, &soap_tmp_ns6__getCurrentTasksForPerson, "ns6:getCurrentTasksForPerson", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getCurrentTasksForPersonResponse(soap, &_param_18);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getCurrentTasksForPersonResponse(soap, &_param_18, "ns6:getCurrentTasksForPersonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__addTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__TaskData *_task, struct ns6__addTaskResponse &_param_19)
{	struct ns6__addTask soap_tmp_ns6__addTask;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__addTask._task = _task;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__addTask(soap, &soap_tmp_ns6__addTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__addTask(soap, &soap_tmp_ns6__addTask, "ns6:addTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__addTask(soap, &soap_tmp_ns6__addTask, "ns6:addTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__addTaskResponse(soap, &_param_19);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__addTaskResponse(soap, &_param_19, "ns6:addTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getPeople(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns6__getPeopleResponse &_param_20)
{	struct ns6__getPeople soap_tmp_ns6__getPeople;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getPeople(soap, &soap_tmp_ns6__getPeople);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getPeople(soap, &soap_tmp_ns6__getPeople, "ns6:getPeople", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getPeople(soap, &soap_tmp_ns6__getPeople, "ns6:getPeople", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getPeopleResponse(soap, &_param_20);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getPeopleResponse(soap, &_param_20, "ns6:getPeopleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getProject(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__getProjectResponse &_param_21)
{	struct ns6__getProject soap_tmp_ns6__getProject;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getProject._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getProject(soap, &soap_tmp_ns6__getProject);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getProject(soap, &soap_tmp_ns6__getProject, "ns6:getProject", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getProject(soap, &soap_tmp_ns6__getProject, "ns6:getProject", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getProjectResponse(soap, &_param_21);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getProjectResponse(soap, &_param_21, "ns6:getProjectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getIteration(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__getIterationResponse &_param_22)
{	struct ns6__getIteration soap_tmp_ns6__getIteration;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getIteration._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getIteration(soap, &soap_tmp_ns6__getIteration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getIteration(soap, &soap_tmp_ns6__getIteration, "ns6:getIteration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getIteration(soap, &soap_tmp_ns6__getIteration, "ns6:getIteration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getIterationResponse(soap, &_param_22);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getIterationResponse(soap, &_param_22, "ns6:getIterationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__getTaskResponse &_param_23)
{	struct ns6__getTask soap_tmp_ns6__getTask;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getTask._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getTask(soap, &soap_tmp_ns6__getTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getTask(soap, &soap_tmp_ns6__getTask, "ns6:getTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getTask(soap, &soap_tmp_ns6__getTask, "ns6:getTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getTaskResponse(soap, &_param_23);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getTaskResponse(soap, &_param_23, "ns6:getTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getUserStory(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__getUserStoryResponse &_param_24)
{	struct ns6__getUserStory soap_tmp_ns6__getUserStory;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getUserStory._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getUserStory(soap, &soap_tmp_ns6__getUserStory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getUserStory(soap, &soap_tmp_ns6__getUserStory, "ns6:getUserStory", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getUserStory(soap, &soap_tmp_ns6__getUserStory, "ns6:getUserStory", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getUserStoryResponse(soap, &_param_24);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getUserStoryResponse(soap, &_param_24, "ns6:getUserStoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getProjects(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns6__getProjectsResponse &_param_25)
{	struct ns6__getProjects soap_tmp_ns6__getProjects;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getProjects(soap, &soap_tmp_ns6__getProjects);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getProjects(soap, &soap_tmp_ns6__getProjects, "ns6:getProjects", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getProjects(soap, &soap_tmp_ns6__getProjects, "ns6:getProjects", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getProjectsResponse(soap, &_param_25);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getProjectsResponse(soap, &_param_25, "ns6:getProjectsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__addProject(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__ProjectData *_project, struct ns6__addProjectResponse &_param_26)
{	struct ns6__addProject soap_tmp_ns6__addProject;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__addProject._project = _project;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__addProject(soap, &soap_tmp_ns6__addProject);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__addProject(soap, &soap_tmp_ns6__addProject, "ns6:addProject", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__addProject(soap, &soap_tmp_ns6__addProject, "ns6:addProject", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__addProjectResponse(soap, &_param_26);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__addProjectResponse(soap, &_param_26, "ns6:addProjectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__removeProject(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__removeProjectResponse &_param_27)
{	struct ns6__removeProject soap_tmp_ns6__removeProject;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__removeProject._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__removeProject(soap, &soap_tmp_ns6__removeProject);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__removeProject(soap, &soap_tmp_ns6__removeProject, "ns6:removeProject", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__removeProject(soap, &soap_tmp_ns6__removeProject, "ns6:removeProject", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__removeProjectResponse(soap, &_param_27);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__removeProjectResponse(soap, &_param_27, "ns6:removeProjectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__addIteration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__IterationData *_iteration, struct ns6__addIterationResponse &_param_28)
{	struct ns6__addIteration soap_tmp_ns6__addIteration;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__addIteration._iteration = _iteration;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__addIteration(soap, &soap_tmp_ns6__addIteration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__addIteration(soap, &soap_tmp_ns6__addIteration, "ns6:addIteration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__addIteration(soap, &soap_tmp_ns6__addIteration, "ns6:addIteration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__addIterationResponse(soap, &_param_28);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__addIterationResponse(soap, &_param_28, "ns6:addIterationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__removeIteration(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__removeIterationResponse &_param_29)
{	struct ns6__removeIteration soap_tmp_ns6__removeIteration;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__removeIteration._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__removeIteration(soap, &soap_tmp_ns6__removeIteration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__removeIteration(soap, &soap_tmp_ns6__removeIteration, "ns6:removeIteration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__removeIteration(soap, &soap_tmp_ns6__removeIteration, "ns6:removeIteration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__removeIterationResponse(soap, &_param_29);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__removeIterationResponse(soap, &_param_29, "ns6:removeIterationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__addUserStory(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__UserStoryData *_story, struct ns6__addUserStoryResponse &_param_30)
{	struct ns6__addUserStory soap_tmp_ns6__addUserStory;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__addUserStory._story = _story;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__addUserStory(soap, &soap_tmp_ns6__addUserStory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__addUserStory(soap, &soap_tmp_ns6__addUserStory, "ns6:addUserStory", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__addUserStory(soap, &soap_tmp_ns6__addUserStory, "ns6:addUserStory", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__addUserStoryResponse(soap, &_param_30);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__addUserStoryResponse(soap, &_param_30, "ns6:addUserStoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__removeUserStory(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__removeUserStoryResponse &_param_31)
{	struct ns6__removeUserStory soap_tmp_ns6__removeUserStory;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__removeUserStory._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__removeUserStory(soap, &soap_tmp_ns6__removeUserStory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__removeUserStory(soap, &soap_tmp_ns6__removeUserStory, "ns6:removeUserStory", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__removeUserStory(soap, &soap_tmp_ns6__removeUserStory, "ns6:removeUserStory", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__removeUserStoryResponse(soap, &_param_31);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__removeUserStoryResponse(soap, &_param_31, "ns6:removeUserStoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getPlannedTasksForPerson(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _personId, struct ns6__getPlannedTasksForPersonResponse &_param_32)
{	struct ns6__getPlannedTasksForPerson soap_tmp_ns6__getPlannedTasksForPerson;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getPlannedTasksForPerson._personId = _personId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getPlannedTasksForPerson(soap, &soap_tmp_ns6__getPlannedTasksForPerson);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getPlannedTasksForPerson(soap, &soap_tmp_ns6__getPlannedTasksForPerson, "ns6:getPlannedTasksForPerson", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getPlannedTasksForPerson(soap, &soap_tmp_ns6__getPlannedTasksForPerson, "ns6:getPlannedTasksForPerson", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getPlannedTasksForPersonResponse(soap, &_param_32);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getPlannedTasksForPersonResponse(soap, &_param_32, "ns6:getPlannedTasksForPersonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__removeTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__removeTaskResponse &_param_33)
{	struct ns6__removeTask soap_tmp_ns6__removeTask;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__removeTask._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__removeTask(soap, &soap_tmp_ns6__removeTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__removeTask(soap, &soap_tmp_ns6__removeTask, "ns6:removeTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__removeTask(soap, &soap_tmp_ns6__removeTask, "ns6:removeTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__removeTaskResponse(soap, &_param_33);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__removeTaskResponse(soap, &_param_33, "ns6:removeTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getTimeEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__getTimeEntryResponse &_param_34)
{	struct ns6__getTimeEntry soap_tmp_ns6__getTimeEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getTimeEntry._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getTimeEntry(soap, &soap_tmp_ns6__getTimeEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getTimeEntry(soap, &soap_tmp_ns6__getTimeEntry, "ns6:getTimeEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getTimeEntry(soap, &soap_tmp_ns6__getTimeEntry, "ns6:getTimeEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getTimeEntryResponse(soap, &_param_34);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getTimeEntryResponse(soap, &_param_34, "ns6:getTimeEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__addTimeEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__TimeEntryData *_timeEntry, struct ns6__addTimeEntryResponse &_param_35)
{	struct ns6__addTimeEntry soap_tmp_ns6__addTimeEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__addTimeEntry._timeEntry = _timeEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__addTimeEntry(soap, &soap_tmp_ns6__addTimeEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__addTimeEntry(soap, &soap_tmp_ns6__addTimeEntry, "ns6:addTimeEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__addTimeEntry(soap, &soap_tmp_ns6__addTimeEntry, "ns6:addTimeEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__addTimeEntryResponse(soap, &_param_35);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__addTimeEntryResponse(soap, &_param_35, "ns6:addTimeEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__removeTimeEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__removeTimeEntryResponse &_param_36)
{	struct ns6__removeTimeEntry soap_tmp_ns6__removeTimeEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__removeTimeEntry._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__removeTimeEntry(soap, &soap_tmp_ns6__removeTimeEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__removeTimeEntry(soap, &soap_tmp_ns6__removeTimeEntry, "ns6:removeTimeEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__removeTimeEntry(soap, &soap_tmp_ns6__removeTimeEntry, "ns6:removeTimeEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__removeTimeEntryResponse(soap, &_param_36);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__removeTimeEntryResponse(soap, &_param_36, "ns6:removeTimeEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__addNote(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__NoteData *_note, struct ns6__addNoteResponse &_param_37)
{	struct ns6__addNote soap_tmp_ns6__addNote;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__addNote._note = _note;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__addNote(soap, &soap_tmp_ns6__addNote);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__addNote(soap, &soap_tmp_ns6__addNote, "ns6:addNote", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__addNote(soap, &soap_tmp_ns6__addNote, "ns6:addNote", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__addNoteResponse(soap, &_param_37);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__addNoteResponse(soap, &_param_37, "ns6:addNoteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getNotesForObject(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _attachedToId, struct ns6__getNotesForObjectResponse &_param_38)
{	struct ns6__getNotesForObject soap_tmp_ns6__getNotesForObject;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getNotesForObject._attachedToId = _attachedToId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getNotesForObject(soap, &soap_tmp_ns6__getNotesForObject);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getNotesForObject(soap, &soap_tmp_ns6__getNotesForObject, "ns6:getNotesForObject", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getNotesForObject(soap, &soap_tmp_ns6__getNotesForObject, "ns6:getNotesForObject", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getNotesForObjectResponse(soap, &_param_38);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getNotesForObjectResponse(soap, &_param_38, "ns6:getNotesForObjectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__addPerson(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__PersonData *_object, struct ns6__addPersonResponse &_param_39)
{	struct ns6__addPerson soap_tmp_ns6__addPerson;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__addPerson._object = _object;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__addPerson(soap, &soap_tmp_ns6__addPerson);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__addPerson(soap, &soap_tmp_ns6__addPerson, "ns6:addPerson", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__addPerson(soap, &soap_tmp_ns6__addPerson, "ns6:addPerson", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__addPersonResponse(soap, &_param_39);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__addPersonResponse(soap, &_param_39, "ns6:addPersonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__removePerson(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, struct ns6__removePersonResponse &_param_40)
{	struct ns6__removePerson soap_tmp_ns6__removePerson;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__removePerson._id = _id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__removePerson(soap, &soap_tmp_ns6__removePerson);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__removePerson(soap, &soap_tmp_ns6__removePerson, "ns6:removePerson", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__removePerson(soap, &soap_tmp_ns6__removePerson, "ns6:removePerson", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__removePersonResponse(soap, &_param_40);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__removePersonResponse(soap, &_param_40, "ns6:removePersonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__deleteAttribute(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _objectId, char *_key, struct ns6__deleteAttributeResponse &_param_41)
{	struct ns6__deleteAttribute soap_tmp_ns6__deleteAttribute;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__deleteAttribute._objectId = _objectId;
	soap_tmp_ns6__deleteAttribute._key = _key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__deleteAttribute(soap, &soap_tmp_ns6__deleteAttribute);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__deleteAttribute(soap, &soap_tmp_ns6__deleteAttribute, "ns6:deleteAttribute", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__deleteAttribute(soap, &soap_tmp_ns6__deleteAttribute, "ns6:deleteAttribute", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__deleteAttributeResponse(soap, &_param_41);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__deleteAttributeResponse(soap, &_param_41, "ns6:deleteAttributeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns6__getAttributesWithPrefix(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _objectId, char *_prefix, struct ns6__getAttributesWithPrefixResponse &_param_42)
{	struct ns6__getAttributesWithPrefix soap_tmp_ns6__getAttributesWithPrefix;
	if (!soap_endpoint)
		soap_endpoint = "http://sp-server:9090/soap/XPlanner";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns6__getAttributesWithPrefix._objectId = _objectId;
	soap_tmp_ns6__getAttributesWithPrefix._prefix = _prefix;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns6__getAttributesWithPrefix(soap, &soap_tmp_ns6__getAttributesWithPrefix);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns6__getAttributesWithPrefix(soap, &soap_tmp_ns6__getAttributesWithPrefix, "ns6:getAttributesWithPrefix", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns6__getAttributesWithPrefix(soap, &soap_tmp_ns6__getAttributesWithPrefix, "ns6:getAttributesWithPrefix", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns6__getAttributesWithPrefixResponse(soap, &_param_42);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns6__getAttributesWithPrefixResponse(soap, &_param_42, "ns6:getAttributesWithPrefixResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of XplannerSOAPClient.cpp */
