/* Xplanner.h
   Generated by wsdl2h 1.2.10 from Xplanner.wsdl and typemap.dat
   2015-02-02 06:05:39 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'WS/typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://sp-server:9090/soap/XPlanner                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://sp-server:9090/soap/XPlanner"
ns2 = "http://xml.apache.org/xml-soap"
ns3 = "http://domain.soap.xplanner.technoetic.com"
ns4 = "http://xplanner.org/soap"
ns5 = "http://db.xplanner.technoetic.com"

*/

//gsoap ns2   schema namespace:	http://xml.apache.org/xml-soap
//gsoap ns3   schema namespace:	http://domain.soap.xplanner.technoetic.com
//gsoap ns4   schema namespace:	http://xplanner.org/soap
//gsoap ns1   schema namespace:	http://sp-server:9090/soap/XPlanner
//gsoap ns5   schema namespace:	http://db.xplanner.technoetic.com
//gsoap ns2   schema form:	unqualified
//gsoap ns3   schema form:	unqualified
//gsoap ns4   schema form:	unqualified
//gsoap ns1   schema form:	unqualified
//gsoap ns5   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/

class xsd__anyType { _XML __item; struct soap *soap; };

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};


//  Forward declaration of class ns2__mapItem.
class ns2__mapItem;

//  Forward declaration of class ns2__Map.
class ns2__Map;

//  Forward declaration of class ns3__DomainData.
class ns3__DomainData;

//  Forward declaration of class ns4__NoteData.
class ns4__NoteData;

//  Forward declaration of class ns4__ProjectData.
class ns4__ProjectData;

//  Forward declaration of class ns4__UserStoryData.
class ns4__UserStoryData;

//  Forward declaration of class ns4__PersonData.
class ns4__PersonData;

//  Forward declaration of class ns4__TimeEntryData.
class ns4__TimeEntryData;

//  Forward declaration of class ns4__TaskData.
class ns4__TaskData;

//  Forward declaration of class ns4__IterationData.
class ns4__IterationData;

//  Forward declaration of class ArrayOf_USCOREtns1_USCOREIterationData.
class ArrayOf_USCOREtns1_USCOREIterationData;

//  Forward declaration of class ArrayOf_USCOREtns1_USCOREUserStoryData.
class ArrayOf_USCOREtns1_USCOREUserStoryData;

//  Forward declaration of class ArrayOf_USCOREtns1_USCORETaskData.
class ArrayOf_USCOREtns1_USCORETaskData;

//  Forward declaration of class ArrayOf_USCOREtns1_USCORETimeEntryData.
class ArrayOf_USCOREtns1_USCORETimeEntryData;

//  Forward declaration of class ArrayOf_USCOREtns1_USCOREPersonData.
class ArrayOf_USCOREtns1_USCOREPersonData;

//  Forward declaration of class ArrayOf_USCOREtns1_USCOREProjectData.
class ArrayOf_USCOREtns1_USCOREProjectData;

//  Forward declaration of class ArrayOf_USCOREtns1_USCORENoteData.
class ArrayOf_USCOREtns1_USCORENoteData;

//  Forward declaration of class ns5__QueryException.
class ns5__QueryException;

/// "http://xml.apache.org/xml-soap":mapItem is a complexType.
class ns2__mapItem : public xsd__anyType
{ public:
/// Element key of type xs:anyType.
    xsd__anyType*                        key                           ;	///< Nullable pointer.
/// Element value of type xs:anyType.
    xsd__anyType*                        value                         ;	///< Nullable pointer.
};

/// "http://xml.apache.org/xml-soap":Map is a complexType.
class ns2__Map : public xsd__anyType
{ public:
/// Size of array of ns2__mapItem* is 0..unbounded
    int                                  __sizeitem                    ;
/// Pointer to array of length 0..unbounded
    ns2__mapItem*                       *item                           0;
};

/// "http://domain.soap.xplanner.technoetic.com":DomainData is an abstract complexType.
class ns3__DomainData : public xsd__anyType
{ public:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
};

/// "http://db.xplanner.technoetic.com":QueryException is a complexType.
class ns5__QueryException : public xsd__anyType
{ public:
};

/// "http://xplanner.org/soap":NoteData is a complexType with complexContent extension of "http://domain.soap.xplanner.technoetic.com":DomainData.
class ns4__NoteData
{ public:
/// INHERITED FROM ns3__DomainData:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
//  END OF INHERITED
/// Element attachedToId of type xs:int.
    int                                  attachedToId                   1;	///< Required element.
/// Element attachmentId of type xs:int.
    int                                  attachmentId                   1;	///< Required element.
/// Element authorId of type xs:int.
    int                                  authorId                       1;	///< Required element.
/// Element body of type SOAP-ENC:string.
    char*                                body                          ;	///< Nullable pointer.
/// Element subject of type SOAP-ENC:string.
    char*                                subject                       ;	///< Nullable pointer.
/// Element submissionTime of type xs:dateTime.
    time_t*                              submissionTime                ;	///< Nullable pointer.
};

/// "http://xplanner.org/soap":ProjectData is a complexType with complexContent extension of "http://domain.soap.xplanner.technoetic.com":DomainData.
class ns4__ProjectData
{ public:
/// INHERITED FROM ns3__DomainData:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
//  END OF INHERITED
/// Element description of type SOAP-ENC:string.
    char*                                description                   ;	///< Nullable pointer.
/// Element name of type SOAP-ENC:string.
    char*                                name                          ;	///< Nullable pointer.
};

/// "http://xplanner.org/soap":UserStoryData is a complexType with complexContent extension of "http://domain.soap.xplanner.technoetic.com":DomainData.
class ns4__UserStoryData
{ public:
/// INHERITED FROM ns3__DomainData:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
//  END OF INHERITED
/// Element actualHours of type xs:double.
    double                               actualHours                    1;	///< Required element.
/// Element adjustedEstimatedHours of type xs:double.
    double                               adjustedEstimatedHours         1;	///< Required element.
/// Element completed of type xs:boolean.
    bool                                 completed                      1;	///< Required element.
/// Element customerId of type xs:int.
    int                                  customerId                     1;	///< Required element.
/// Element description of type SOAP-ENC:string.
    char*                                description                   ;	///< Nullable pointer.
/// Element dispositionName of type SOAP-ENC:string.
    char*                                dispositionName               ;	///< Nullable pointer.
/// Element estimatedHours of type xs:double.
    double                               estimatedHours                 1;	///< Required element.
/// Element estimatedOriginalHours of type xs:double.
    double                               estimatedOriginalHours         1;	///< Required element.
/// Element iterationId of type xs:int.
    int                                  iterationId                    1;	///< Required element.
/// Element name of type SOAP-ENC:string.
    char*                                name                          ;	///< Nullable pointer.
/// Element postponedHours of type xs:double.
    double                               postponedHours                 1;	///< Required element.
/// Element priority of type xs:int.
    int                                  priority                       1;	///< Required element.
/// Element remainingHours of type xs:double.
    double                               remainingHours                 1;	///< Required element.
/// Element trackerId of type xs:int.
    int                                  trackerId                      1;	///< Required element.
};

/// "http://xplanner.org/soap":PersonData is a complexType with complexContent extension of "http://domain.soap.xplanner.technoetic.com":DomainData.
class ns4__PersonData
{ public:
/// INHERITED FROM ns3__DomainData:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
//  END OF INHERITED
/// Element email of type SOAP-ENC:string.
    char*                                email                         ;	///< Nullable pointer.
/// Element initials of type SOAP-ENC:string.
    char*                                initials                      ;	///< Nullable pointer.
/// Element name of type SOAP-ENC:string.
    char*                                name                          ;	///< Nullable pointer.
/// Element phone of type SOAP-ENC:string.
    char*                                phone                         ;	///< Nullable pointer.
/// Element userId of type SOAP-ENC:string.
    char*                                userId                        ;	///< Nullable pointer.
};

/// "http://xplanner.org/soap":TimeEntryData is a complexType with complexContent extension of "http://domain.soap.xplanner.technoetic.com":DomainData.
class ns4__TimeEntryData
{ public:
/// INHERITED FROM ns3__DomainData:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
//  END OF INHERITED
/// Element description of type SOAP-ENC:string.
    char*                                description                   ;	///< Nullable pointer.
/// Element duration of type xs:double.
    double                               duration                       1;	///< Required element.
/// Element endTime of type xs:dateTime.
    time_t*                              endTime                       ;	///< Nullable pointer.
/// Element person1Id of type xs:int.
    int                                  person1Id                      1;	///< Required element.
/// Element person2Id of type xs:int.
    int                                  person2Id                      1;	///< Required element.
/// Element reportDate of type xs:dateTime.
    time_t*                              reportDate                    ;	///< Nullable pointer.
/// Element startTime of type xs:dateTime.
    time_t*                              startTime                     ;	///< Nullable pointer.
/// Element taskId of type xs:int.
    int                                  taskId                         1;	///< Required element.
};

/// "http://xplanner.org/soap":TaskData is a complexType with complexContent extension of "http://domain.soap.xplanner.technoetic.com":DomainData.
class ns4__TaskData
{ public:
/// INHERITED FROM ns3__DomainData:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
//  END OF INHERITED
/// Element acceptorId of type xs:int.
    int                                  acceptorId                     1;	///< Required element.
/// Element actualHours of type xs:double.
    double                               actualHours                    1;	///< Required element.
/// Element adjustedEstimatedHours of type xs:double.
    double                               adjustedEstimatedHours         1;	///< Required element.
/// Element completed of type xs:boolean.
    bool                                 completed                      1;	///< Required element.
/// Element createdDate of type xs:dateTime.
    time_t*                              createdDate                   ;	///< Nullable pointer.
/// Element description of type SOAP-ENC:string.
    char*                                description                   ;	///< Nullable pointer.
/// Element dispositionName of type SOAP-ENC:string.
    char*                                dispositionName               ;	///< Nullable pointer.
/// Element estimatedHours of type xs:double.
    double                               estimatedHours                 1;	///< Required element.
/// Element estimatedOriginalHours of type xs:double.
    double                               estimatedOriginalHours         1;	///< Required element.
/// Element name of type SOAP-ENC:string.
    char*                                name                          ;	///< Nullable pointer.
/// Element remainingHours of type xs:double.
    double                               remainingHours                 1;	///< Required element.
/// Element storyId of type xs:int.
    int                                  storyId                        1;	///< Required element.
/// Element type of type SOAP-ENC:string.
    char*                                type                          ;	///< Nullable pointer.
};

/// "http://xplanner.org/soap":IterationData is a complexType with complexContent extension of "http://domain.soap.xplanner.technoetic.com":DomainData.
class ns4__IterationData
{ public:
/// INHERITED FROM ns3__DomainData:
/// Element id of type xs:int.
    int                                  id                             1;	///< Required element.
/// Element lastUpdateTime of type xs:dateTime.
    time_t*                              lastUpdateTime                ;	///< Nullable pointer.
//  END OF INHERITED
/// Element actualHours of type xs:double.
    double                               actualHours                    1;	///< Required element.
/// Element addedHours of type xs:double.
    double                               addedHours                     1;	///< Required element.
/// Element adjustedEstimatedHours of type xs:double.
    double                               adjustedEstimatedHours         1;	///< Required element.
/// Element daysWorked of type xs:double.
    double                               daysWorked                     1;	///< Required element.
/// Element description of type SOAP-ENC:string.
    char*                                description                   ;	///< Nullable pointer.
/// Element endDate of type xs:dateTime.
    time_t*                              endDate                       ;	///< Nullable pointer.
/// Element estimatedHours of type xs:double.
    double                               estimatedHours                 1;	///< Required element.
/// Element name of type SOAP-ENC:string.
    char*                                name                          ;	///< Nullable pointer.
/// Element overestimatedHours of type xs:double.
    double                               overestimatedHours             1;	///< Required element.
/// Element postponedHours of type xs:double.
    double                               postponedHours                 1;	///< Required element.
/// Element projectId of type xs:int.
    int                                  projectId                      1;	///< Required element.
/// Element remainingHours of type xs:double.
    double                               remainingHours                 1;	///< Required element.
/// Element startDate of type xs:dateTime.
    time_t*                              startDate                     ;	///< Nullable pointer.
/// Element statusKey of type SOAP-ENC:string.
    char*                                statusKey                     ;	///< Nullable pointer.
/// Element underestimatedHours of type xs:double.
    double                               underestimatedHours            1;	///< Required element.
};

/// "http://sp-server:9090/soap/XPlanner":ArrayOf_tns1_IterationData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://xplanner.org/soap":IterationData
class ArrayOf_USCOREtns1_USCOREIterationData : public xsd__anyType
{ public:
/// Pointer to array of ns4__IterationData*.
    ns4__IterationData*                 *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// "http://sp-server:9090/soap/XPlanner":ArrayOf_tns1_UserStoryData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://xplanner.org/soap":UserStoryData
class ArrayOf_USCOREtns1_USCOREUserStoryData : public xsd__anyType
{ public:
/// Pointer to array of ns4__UserStoryData*.
    ns4__UserStoryData*                 *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// "http://sp-server:9090/soap/XPlanner":ArrayOf_tns1_TaskData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://xplanner.org/soap":TaskData
class ArrayOf_USCOREtns1_USCORETaskData : public xsd__anyType
{ public:
/// Pointer to array of ns4__TaskData*.
    ns4__TaskData*                      *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// "http://sp-server:9090/soap/XPlanner":ArrayOf_tns1_TimeEntryData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://xplanner.org/soap":TimeEntryData
class ArrayOf_USCOREtns1_USCORETimeEntryData : public xsd__anyType
{ public:
/// Pointer to array of ns4__TimeEntryData*.
    ns4__TimeEntryData*                 *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// "http://sp-server:9090/soap/XPlanner":ArrayOf_tns1_PersonData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://xplanner.org/soap":PersonData
class ArrayOf_USCOREtns1_USCOREPersonData : public xsd__anyType
{ public:
/// Pointer to array of ns4__PersonData*.
    ns4__PersonData*                    *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// "http://sp-server:9090/soap/XPlanner":ArrayOf_tns1_ProjectData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://xplanner.org/soap":ProjectData
class ArrayOf_USCOREtns1_USCOREProjectData : public xsd__anyType
{ public:
/// Pointer to array of ns4__ProjectData*.
    ns4__ProjectData*                   *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// "http://sp-server:9090/soap/XPlanner":ArrayOf_tns1_NoteData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://xplanner.org/soap":NoteData
class ArrayOf_USCOREtns1_USCORENoteData : public xsd__anyType
{ public:
/// Pointer to array of ns4__NoteData*.
    ns4__NoteData*                      *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns6  service name:	XPlannerSoapBinding 
//gsoap ns6  service type:	XPlanner 
//gsoap ns6  service port:	http://sp-server:9090/soap/XPlanner 
//gsoap ns6  service namespace:	http://soap.xplanner.technoetic.com 
//gsoap ns6  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref XPlannerSoapBinding

*/

/**

@page XPlannerSoapBinding Binding "XPlannerSoapBinding"

@section XPlannerSoapBinding_operations Operations of Binding  "XPlannerSoapBinding"
  - @ref ns6__getAttributes
  - @ref ns6__update
  - @ref ns6__update_
  - @ref ns6__update__
  - @ref ns6__update___
  - @ref ns6__update____
  - @ref ns6__update_____
  - @ref ns6__update______
  - @ref ns6__getAttribute
  - @ref ns6__setAttribute
  - @ref ns6__getNote
  - @ref ns6__removeNote
  - @ref ns6__getPerson
  - @ref ns6__getIterations
  - @ref ns6__getCurrentIteration
  - @ref ns6__getUserStories
  - @ref ns6__getTasks
  - @ref ns6__getTimeEntries
  - @ref ns6__getCurrentTasksForPerson
  - @ref ns6__addTask
  - @ref ns6__getPeople
  - @ref ns6__getProject
  - @ref ns6__getIteration
  - @ref ns6__getTask
  - @ref ns6__getUserStory
  - @ref ns6__getProjects
  - @ref ns6__addProject
  - @ref ns6__removeProject
  - @ref ns6__addIteration
  - @ref ns6__removeIteration
  - @ref ns6__addUserStory
  - @ref ns6__removeUserStory
  - @ref ns6__getPlannedTasksForPerson
  - @ref ns6__removeTask
  - @ref ns6__getTimeEntry
  - @ref ns6__addTimeEntry
  - @ref ns6__removeTimeEntry
  - @ref ns6__addNote
  - @ref ns6__getNotesForObject
  - @ref ns6__addPerson
  - @ref ns6__removePerson
  - @ref ns6__deleteAttribute
  - @ref ns6__getAttributesWithPrefix

@section XPlannerSoapBinding_ports Endpoints of Binding  "XPlannerSoapBinding"
  - http://sp-server:9090/soap/XPlanner

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail Message                                                  *
 *                                                                            *
\******************************************************************************/

/// SOAP Fault detail message "http://sp-server:9090/soap/XPlanner:QueryException"
class _ns1__QueryException
{ public:
    ns5__QueryException*                fault;
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
    _ns1__QueryException                *ns1__QueryException           ;	///< SOAP Fault detail message "http://sp-server:9090/soap/XPlanner":QueryException
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
    _XML                                 __any                         ;	///< Catch any element content in XML string.
};

/******************************************************************************\
 *                                                                            *
 * XPlannerSoapBinding                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns6__getAttributes                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getAttributesResponse" of service binding "XPlannerSoapBinding" operation "ns6__getAttributes"
struct ns6__getAttributesResponse
{
    ns2__Map*                           _getAttributesReturn;
};

/// Operation "ns6__getAttributes" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getAttributes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 objectId,
    // response parameters:
    struct ns6__getAttributesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getAttributes(
    struct soap *soap,
    // request parameters:
    int                                 objectId,
    // response parameters:
    struct ns6__getAttributesResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getAttributes rpc
//gsoap ns6  service method-encoding:	getAttributes http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getAttributes ""
int ns6__getAttributes(
    int                                 _objectId,	///< Request parameter
    struct ns6__getAttributesResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__update                                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__updateResponse" of service binding "XPlannerSoapBinding" operation "ns6__update"
struct ns6__updateResponse
{
};

/// Operation "ns6__update" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__update(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__update(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	update rpc
//gsoap ns6  service method-encoding:	update http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	update ""
int ns6__update(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__updateResponse         &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__update_                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__updateResponse_" of service binding "XPlannerSoapBinding" operation "ns6__update_"
struct ns6__updateResponse_
{
};

/// Operation "ns6__update_" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__update_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse_&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__update_(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse_&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	update_ rpc
//gsoap ns6  service method-encoding:	update_ http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	update_ ""
int ns6__update_(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__updateResponse_        &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__update__                                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__updateResponse__" of service binding "XPlannerSoapBinding" operation "ns6__update__"
struct ns6__updateResponse__
{
};

/// Operation "ns6__update__" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__update__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse__&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__update__(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse__&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	update__ rpc
//gsoap ns6  service method-encoding:	update__ http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	update__ ""
int ns6__update__(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__updateResponse__       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__update___                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__updateResponse___" of service binding "XPlannerSoapBinding" operation "ns6__update___"
struct ns6__updateResponse___
{
};

/// Operation "ns6__update___" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__update___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse___&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__update___(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse___&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	update___ rpc
//gsoap ns6  service method-encoding:	update___ http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	update___ ""
int ns6__update___(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__updateResponse___      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__update____                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__updateResponse____" of service binding "XPlannerSoapBinding" operation "ns6__update____"
struct ns6__updateResponse____
{
};

/// Operation "ns6__update____" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__update____(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse____&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__update____(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse____&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	update____ rpc
//gsoap ns6  service method-encoding:	update____ http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	update____ ""
int ns6__update____(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__updateResponse____     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__update_____                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__updateResponse_____" of service binding "XPlannerSoapBinding" operation "ns6__update_____"
struct ns6__updateResponse_____
{
};

/// Operation "ns6__update_____" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__update_____(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse_____&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__update_____(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse_____&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	update_____ rpc
//gsoap ns6  service method-encoding:	update_____ http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	update_____ ""
int ns6__update_____(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__updateResponse_____    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__update______                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__updateResponse______" of service binding "XPlannerSoapBinding" operation "ns6__update______"
struct ns6__updateResponse______
{
};

/// Operation "ns6__update______" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__update______(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse______&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__update______(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__updateResponse______&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	update______ rpc
//gsoap ns6  service method-encoding:	update______ http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	update______ ""
int ns6__update______(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__updateResponse______   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getAttribute                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns6__getAttribute" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getAttribute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 objectId,
    char*                               key,
    // response parameters:
    char*                              &_getAttributeReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getAttribute(
    struct soap *soap,
    // request parameters:
    int                                 objectId,
    char*                               key,
    // response parameters:
    char*                              &_getAttributeReturn
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getAttribute rpc
//gsoap ns6  service method-encoding:	getAttribute http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getAttribute ""
int ns6__getAttribute(
    int                                 _objectId,	///< Request parameter
    char*                               _key,	///< Request parameter
    char*                              &_getAttributeReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__setAttribute                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__setAttributeResponse" of service binding "XPlannerSoapBinding" operation "ns6__setAttribute"
struct ns6__setAttributeResponse
{
};

/// Operation "ns6__setAttribute" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__setAttribute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 objectId,
    char*                               key,
    char*                               value,
    // response parameters:
    struct ns6__setAttributeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__setAttribute(
    struct soap *soap,
    // request parameters:
    int                                 objectId,
    char*                               key,
    char*                               value,
    // response parameters:
    struct ns6__setAttributeResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	setAttribute rpc
//gsoap ns6  service method-encoding:	setAttribute http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	setAttribute ""
int ns6__setAttribute(
    int                                 _objectId,	///< Request parameter
    char*                               _key,	///< Request parameter
    char*                               _value,	///< Request parameter
    struct ns6__setAttributeResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getNote                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getNoteResponse" of service binding "XPlannerSoapBinding" operation "ns6__getNote"
struct ns6__getNoteResponse
{
    ns4__NoteData*                      _getNoteReturn;
};

/// Operation "ns6__getNote" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getNote(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getNoteResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getNote(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getNoteResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getNote rpc
//gsoap ns6  service method-encoding:	getNote http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getNote ""
int ns6__getNote(
    int                                 _id,	///< Request parameter
    struct ns6__getNoteResponse        &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__removeNote                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__removeNoteResponse" of service binding "XPlannerSoapBinding" operation "ns6__removeNote"
struct ns6__removeNoteResponse
{
};

/// Operation "ns6__removeNote" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__removeNote(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeNoteResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__removeNote(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeNoteResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	removeNote rpc
//gsoap ns6  service method-encoding:	removeNote http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	removeNote ""
int ns6__removeNote(
    int                                 _id,	///< Request parameter
    struct ns6__removeNoteResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getPerson                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getPersonResponse" of service binding "XPlannerSoapBinding" operation "ns6__getPerson"
struct ns6__getPersonResponse
{
    ns4__PersonData*                    _getPersonReturn;
};

/// Operation "ns6__getPerson" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getPerson(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getPersonResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getPerson(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getPersonResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getPerson rpc
//gsoap ns6  service method-encoding:	getPerson http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getPerson ""
int ns6__getPerson(
    int                                 _id,	///< Request parameter
    struct ns6__getPersonResponse      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getIterations                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getIterationsResponse" of service binding "XPlannerSoapBinding" operation "ns6__getIterations"
struct ns6__getIterationsResponse
{
    ArrayOf_USCOREtns1_USCOREIterationData* _getIterationsReturn;
};

/// Operation "ns6__getIterations" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getIterations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 projectId,
    // response parameters:
    struct ns6__getIterationsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getIterations(
    struct soap *soap,
    // request parameters:
    int                                 projectId,
    // response parameters:
    struct ns6__getIterationsResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getIterations rpc
//gsoap ns6  service method-encoding:	getIterations http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getIterations ""
int ns6__getIterations(
    int                                 _projectId,	///< Request parameter
    struct ns6__getIterationsResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getCurrentIteration                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getCurrentIterationResponse" of service binding "XPlannerSoapBinding" operation "ns6__getCurrentIteration"
struct ns6__getCurrentIterationResponse
{
    ns4__IterationData*                 _getCurrentIterationReturn;
};

/// Operation "ns6__getCurrentIteration" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getCurrentIteration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 projectId,
    // response parameters:
    struct ns6__getCurrentIterationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getCurrentIteration(
    struct soap *soap,
    // request parameters:
    int                                 projectId,
    // response parameters:
    struct ns6__getCurrentIterationResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getCurrentIteration rpc
//gsoap ns6  service method-encoding:	getCurrentIteration http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getCurrentIteration ""
int ns6__getCurrentIteration(
    int                                 _projectId,	///< Request parameter
    struct ns6__getCurrentIterationResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getUserStories                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getUserStoriesResponse" of service binding "XPlannerSoapBinding" operation "ns6__getUserStories"
struct ns6__getUserStoriesResponse
{
    ArrayOf_USCOREtns1_USCOREUserStoryData* _getUserStoriesReturn;
};

/// Operation "ns6__getUserStories" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getUserStories(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 containerId,
    // response parameters:
    struct ns6__getUserStoriesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getUserStories(
    struct soap *soap,
    // request parameters:
    int                                 containerId,
    // response parameters:
    struct ns6__getUserStoriesResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getUserStories rpc
//gsoap ns6  service method-encoding:	getUserStories http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getUserStories ""
int ns6__getUserStories(
    int                                 _containerId,	///< Request parameter
    struct ns6__getUserStoriesResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getTasks                                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getTasksResponse" of service binding "XPlannerSoapBinding" operation "ns6__getTasks"
struct ns6__getTasksResponse
{
    ArrayOf_USCOREtns1_USCORETaskData*  _getTasksReturn;
};

/// Operation "ns6__getTasks" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getTasks(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 containerId,
    // response parameters:
    struct ns6__getTasksResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getTasks(
    struct soap *soap,
    // request parameters:
    int                                 containerId,
    // response parameters:
    struct ns6__getTasksResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getTasks rpc
//gsoap ns6  service method-encoding:	getTasks http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getTasks ""
int ns6__getTasks(
    int                                 _containerId,	///< Request parameter
    struct ns6__getTasksResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getTimeEntries                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getTimeEntriesResponse" of service binding "XPlannerSoapBinding" operation "ns6__getTimeEntries"
struct ns6__getTimeEntriesResponse
{
    ArrayOf_USCOREtns1_USCORETimeEntryData* _getTimeEntriesReturn;
};

/// Operation "ns6__getTimeEntries" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getTimeEntries(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 containerId,
    // response parameters:
    struct ns6__getTimeEntriesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getTimeEntries(
    struct soap *soap,
    // request parameters:
    int                                 containerId,
    // response parameters:
    struct ns6__getTimeEntriesResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getTimeEntries rpc
//gsoap ns6  service method-encoding:	getTimeEntries http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getTimeEntries ""
int ns6__getTimeEntries(
    int                                 _containerId,	///< Request parameter
    struct ns6__getTimeEntriesResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getCurrentTasksForPerson                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getCurrentTasksForPersonResponse" of service binding "XPlannerSoapBinding" operation "ns6__getCurrentTasksForPerson"
struct ns6__getCurrentTasksForPersonResponse
{
    ArrayOf_USCOREtns1_USCORETaskData*  _getCurrentTasksForPersonReturn;
};

/// Operation "ns6__getCurrentTasksForPerson" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP Fault: _ns1__QueryException

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getCurrentTasksForPerson(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 personId,
    // response parameters:
    struct ns6__getCurrentTasksForPersonResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getCurrentTasksForPerson(
    struct soap *soap,
    // request parameters:
    int                                 personId,
    // response parameters:
    struct ns6__getCurrentTasksForPersonResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getCurrentTasksForPerson rpc
//gsoap ns6  service method-encoding:	getCurrentTasksForPerson http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getCurrentTasksForPerson ""
//gsoap ns6  service method-fault:	getCurrentTasksForPerson _ns1__QueryException
int ns6__getCurrentTasksForPerson(
    int                                 _personId,	///< Request parameter
    struct ns6__getCurrentTasksForPersonResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__addTask                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__addTaskResponse" of service binding "XPlannerSoapBinding" operation "ns6__addTask"
struct ns6__addTaskResponse
{
    ns4__TaskData*                      _addTaskReturn;
};

/// Operation "ns6__addTask" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__addTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__TaskData*                      task,
    // response parameters:
    struct ns6__addTaskResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__addTask(
    struct soap *soap,
    // request parameters:
    ns4__TaskData*                      task,
    // response parameters:
    struct ns6__addTaskResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	addTask rpc
//gsoap ns6  service method-encoding:	addTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	addTask ""
int ns6__addTask(
    ns4__TaskData*                      _task,	///< Request parameter
    struct ns6__addTaskResponse        &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getPeople                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getPeopleResponse" of service binding "XPlannerSoapBinding" operation "ns6__getPeople"
struct ns6__getPeopleResponse
{
    ArrayOf_USCOREtns1_USCOREPersonData* getPeopleReturn;
};

/// Operation "ns6__getPeople" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getPeople(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns6__getPeopleResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getPeople(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns6__getPeopleResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getPeople rpc
//gsoap ns6  service method-encoding:	getPeople http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getPeople ""
int ns6__getPeople(
    struct ns6__getPeopleResponse      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getProject                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getProjectResponse" of service binding "XPlannerSoapBinding" operation "ns6__getProject"
struct ns6__getProjectResponse
{
    ns4__ProjectData*                   _getProjectReturn;
};

/// Operation "ns6__getProject" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getProject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getProjectResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getProject(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getProjectResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getProject rpc
//gsoap ns6  service method-encoding:	getProject http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getProject ""
int ns6__getProject(
    int                                 _id,	///< Request parameter
    struct ns6__getProjectResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getIteration                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getIterationResponse" of service binding "XPlannerSoapBinding" operation "ns6__getIteration"
struct ns6__getIterationResponse
{
    ns4__IterationData*                 _getIterationReturn;
};

/// Operation "ns6__getIteration" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getIteration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getIterationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getIteration(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getIterationResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getIteration rpc
//gsoap ns6  service method-encoding:	getIteration http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getIteration ""
int ns6__getIteration(
    int                                 _id,	///< Request parameter
    struct ns6__getIterationResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getTask                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getTaskResponse" of service binding "XPlannerSoapBinding" operation "ns6__getTask"
struct ns6__getTaskResponse
{
    ns4__TaskData*                      _getTaskReturn;
};

/// Operation "ns6__getTask" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getTaskResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getTask(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getTaskResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getTask rpc
//gsoap ns6  service method-encoding:	getTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getTask ""
int ns6__getTask(
    int                                 _id,	///< Request parameter
    struct ns6__getTaskResponse        &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getUserStory                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getUserStoryResponse" of service binding "XPlannerSoapBinding" operation "ns6__getUserStory"
struct ns6__getUserStoryResponse
{
    ns4__UserStoryData*                 _getUserStoryReturn;
};

/// Operation "ns6__getUserStory" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getUserStory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getUserStoryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getUserStory(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getUserStoryResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getUserStory rpc
//gsoap ns6  service method-encoding:	getUserStory http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getUserStory ""
int ns6__getUserStory(
    int                                 _id,	///< Request parameter
    struct ns6__getUserStoryResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getProjects                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getProjectsResponse" of service binding "XPlannerSoapBinding" operation "ns6__getProjects"
struct ns6__getProjectsResponse
{
    ArrayOf_USCOREtns1_USCOREProjectData* getProjectsReturn;
};

/// Operation "ns6__getProjects" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getProjects(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns6__getProjectsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getProjects(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns6__getProjectsResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getProjects rpc
//gsoap ns6  service method-encoding:	getProjects http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getProjects ""
int ns6__getProjects(
    struct ns6__getProjectsResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__addProject                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__addProjectResponse" of service binding "XPlannerSoapBinding" operation "ns6__addProject"
struct ns6__addProjectResponse
{
    ns4__ProjectData*                   _addProjectReturn;
};

/// Operation "ns6__addProject" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__addProject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__ProjectData*                   project,
    // response parameters:
    struct ns6__addProjectResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__addProject(
    struct soap *soap,
    // request parameters:
    ns4__ProjectData*                   project,
    // response parameters:
    struct ns6__addProjectResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	addProject rpc
//gsoap ns6  service method-encoding:	addProject http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	addProject ""
int ns6__addProject(
    ns4__ProjectData*                   _project,	///< Request parameter
    struct ns6__addProjectResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__removeProject                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__removeProjectResponse" of service binding "XPlannerSoapBinding" operation "ns6__removeProject"
struct ns6__removeProjectResponse
{
};

/// Operation "ns6__removeProject" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__removeProject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeProjectResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__removeProject(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeProjectResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	removeProject rpc
//gsoap ns6  service method-encoding:	removeProject http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	removeProject ""
int ns6__removeProject(
    int                                 _id,	///< Request parameter
    struct ns6__removeProjectResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__addIteration                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__addIterationResponse" of service binding "XPlannerSoapBinding" operation "ns6__addIteration"
struct ns6__addIterationResponse
{
    ns4__IterationData*                 _addIterationReturn;
};

/// Operation "ns6__addIteration" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__addIteration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__IterationData*                 iteration,
    // response parameters:
    struct ns6__addIterationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__addIteration(
    struct soap *soap,
    // request parameters:
    ns4__IterationData*                 iteration,
    // response parameters:
    struct ns6__addIterationResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	addIteration rpc
//gsoap ns6  service method-encoding:	addIteration http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	addIteration ""
int ns6__addIteration(
    ns4__IterationData*                 _iteration,	///< Request parameter
    struct ns6__addIterationResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__removeIteration                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__removeIterationResponse" of service binding "XPlannerSoapBinding" operation "ns6__removeIteration"
struct ns6__removeIterationResponse
{
};

/// Operation "ns6__removeIteration" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__removeIteration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeIterationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__removeIteration(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeIterationResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	removeIteration rpc
//gsoap ns6  service method-encoding:	removeIteration http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	removeIteration ""
int ns6__removeIteration(
    int                                 _id,	///< Request parameter
    struct ns6__removeIterationResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__addUserStory                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__addUserStoryResponse" of service binding "XPlannerSoapBinding" operation "ns6__addUserStory"
struct ns6__addUserStoryResponse
{
    ns4__UserStoryData*                 _addUserStoryReturn;
};

/// Operation "ns6__addUserStory" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__addUserStory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__UserStoryData*                 story,
    // response parameters:
    struct ns6__addUserStoryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__addUserStory(
    struct soap *soap,
    // request parameters:
    ns4__UserStoryData*                 story,
    // response parameters:
    struct ns6__addUserStoryResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	addUserStory rpc
//gsoap ns6  service method-encoding:	addUserStory http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	addUserStory ""
int ns6__addUserStory(
    ns4__UserStoryData*                 _story,	///< Request parameter
    struct ns6__addUserStoryResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__removeUserStory                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__removeUserStoryResponse" of service binding "XPlannerSoapBinding" operation "ns6__removeUserStory"
struct ns6__removeUserStoryResponse
{
};

/// Operation "ns6__removeUserStory" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__removeUserStory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeUserStoryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__removeUserStory(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeUserStoryResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	removeUserStory rpc
//gsoap ns6  service method-encoding:	removeUserStory http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	removeUserStory ""
int ns6__removeUserStory(
    int                                 _id,	///< Request parameter
    struct ns6__removeUserStoryResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getPlannedTasksForPerson                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getPlannedTasksForPersonResponse" of service binding "XPlannerSoapBinding" operation "ns6__getPlannedTasksForPerson"
struct ns6__getPlannedTasksForPersonResponse
{
    ArrayOf_USCOREtns1_USCORETaskData*  _getPlannedTasksForPersonReturn;
};

/// Operation "ns6__getPlannedTasksForPerson" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP Fault: _ns1__QueryException

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getPlannedTasksForPerson(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 personId,
    // response parameters:
    struct ns6__getPlannedTasksForPersonResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getPlannedTasksForPerson(
    struct soap *soap,
    // request parameters:
    int                                 personId,
    // response parameters:
    struct ns6__getPlannedTasksForPersonResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getPlannedTasksForPerson rpc
//gsoap ns6  service method-encoding:	getPlannedTasksForPerson http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getPlannedTasksForPerson ""
//gsoap ns6  service method-fault:	getPlannedTasksForPerson _ns1__QueryException
int ns6__getPlannedTasksForPerson(
    int                                 _personId,	///< Request parameter
    struct ns6__getPlannedTasksForPersonResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__removeTask                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__removeTaskResponse" of service binding "XPlannerSoapBinding" operation "ns6__removeTask"
struct ns6__removeTaskResponse
{
};

/// Operation "ns6__removeTask" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__removeTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeTaskResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__removeTask(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeTaskResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	removeTask rpc
//gsoap ns6  service method-encoding:	removeTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	removeTask ""
int ns6__removeTask(
    int                                 _id,	///< Request parameter
    struct ns6__removeTaskResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getTimeEntry                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getTimeEntryResponse" of service binding "XPlannerSoapBinding" operation "ns6__getTimeEntry"
struct ns6__getTimeEntryResponse
{
    ns4__TimeEntryData*                 _getTimeEntryReturn;
};

/// Operation "ns6__getTimeEntry" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getTimeEntry(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getTimeEntryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getTimeEntry(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__getTimeEntryResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getTimeEntry rpc
//gsoap ns6  service method-encoding:	getTimeEntry http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getTimeEntry ""
int ns6__getTimeEntry(
    int                                 _id,	///< Request parameter
    struct ns6__getTimeEntryResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__addTimeEntry                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__addTimeEntryResponse" of service binding "XPlannerSoapBinding" operation "ns6__addTimeEntry"
struct ns6__addTimeEntryResponse
{
    ns4__TimeEntryData*                 _addTimeEntryReturn;
};

/// Operation "ns6__addTimeEntry" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__addTimeEntry(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__TimeEntryData*                 timeEntry,
    // response parameters:
    struct ns6__addTimeEntryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__addTimeEntry(
    struct soap *soap,
    // request parameters:
    ns4__TimeEntryData*                 timeEntry,
    // response parameters:
    struct ns6__addTimeEntryResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	addTimeEntry rpc
//gsoap ns6  service method-encoding:	addTimeEntry http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	addTimeEntry ""
int ns6__addTimeEntry(
    ns4__TimeEntryData*                 _timeEntry,	///< Request parameter
    struct ns6__addTimeEntryResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__removeTimeEntry                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__removeTimeEntryResponse" of service binding "XPlannerSoapBinding" operation "ns6__removeTimeEntry"
struct ns6__removeTimeEntryResponse
{
};

/// Operation "ns6__removeTimeEntry" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__removeTimeEntry(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeTimeEntryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__removeTimeEntry(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removeTimeEntryResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	removeTimeEntry rpc
//gsoap ns6  service method-encoding:	removeTimeEntry http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	removeTimeEntry ""
int ns6__removeTimeEntry(
    int                                 _id,	///< Request parameter
    struct ns6__removeTimeEntryResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__addNote                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__addNoteResponse" of service binding "XPlannerSoapBinding" operation "ns6__addNote"
struct ns6__addNoteResponse
{
    ns4__NoteData*                      _addNoteReturn;
};

/// Operation "ns6__addNote" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__addNote(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__addNoteResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__addNote(
    struct soap *soap,
    // request parameters:
    ns4__NoteData*                      note,
    // response parameters:
    struct ns6__addNoteResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	addNote rpc
//gsoap ns6  service method-encoding:	addNote http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	addNote ""
int ns6__addNote(
    ns4__NoteData*                      _note,	///< Request parameter
    struct ns6__addNoteResponse        &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getNotesForObject                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getNotesForObjectResponse" of service binding "XPlannerSoapBinding" operation "ns6__getNotesForObject"
struct ns6__getNotesForObjectResponse
{
    ArrayOf_USCOREtns1_USCORENoteData*  _getNotesForObjectReturn;
};

/// Operation "ns6__getNotesForObject" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getNotesForObject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 attachedToId,
    // response parameters:
    struct ns6__getNotesForObjectResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getNotesForObject(
    struct soap *soap,
    // request parameters:
    int                                 attachedToId,
    // response parameters:
    struct ns6__getNotesForObjectResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getNotesForObject rpc
//gsoap ns6  service method-encoding:	getNotesForObject http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getNotesForObject ""
int ns6__getNotesForObject(
    int                                 _attachedToId,	///< Request parameter
    struct ns6__getNotesForObjectResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__addPerson                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__addPersonResponse" of service binding "XPlannerSoapBinding" operation "ns6__addPerson"
struct ns6__addPersonResponse
{
    ns4__PersonData*                    _addPersonReturn;
};

/// Operation "ns6__addPerson" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__addPerson(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__PersonData*                    object,
    // response parameters:
    struct ns6__addPersonResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__addPerson(
    struct soap *soap,
    // request parameters:
    ns4__PersonData*                    object,
    // response parameters:
    struct ns6__addPersonResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	addPerson rpc
//gsoap ns6  service method-encoding:	addPerson http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	addPerson ""
int ns6__addPerson(
    ns4__PersonData*                    _object,	///< Request parameter
    struct ns6__addPersonResponse      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__removePerson                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__removePersonResponse" of service binding "XPlannerSoapBinding" operation "ns6__removePerson"
struct ns6__removePersonResponse
{
};

/// Operation "ns6__removePerson" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__removePerson(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removePersonResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__removePerson(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    struct ns6__removePersonResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	removePerson rpc
//gsoap ns6  service method-encoding:	removePerson http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	removePerson ""
int ns6__removePerson(
    int                                 _id,	///< Request parameter
    struct ns6__removePersonResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__deleteAttribute                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__deleteAttributeResponse" of service binding "XPlannerSoapBinding" operation "ns6__deleteAttribute"
struct ns6__deleteAttributeResponse
{
};

/// Operation "ns6__deleteAttribute" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__deleteAttribute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 objectId,
    char*                               key,
    // response parameters:
    struct ns6__deleteAttributeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__deleteAttribute(
    struct soap *soap,
    // request parameters:
    int                                 objectId,
    char*                               key,
    // response parameters:
    struct ns6__deleteAttributeResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	deleteAttribute rpc
//gsoap ns6  service method-encoding:	deleteAttribute http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	deleteAttribute ""
int ns6__deleteAttribute(
    int                                 _objectId,	///< Request parameter
    char*                               _key,	///< Request parameter
    struct ns6__deleteAttributeResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns6__getAttributesWithPrefix                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns6__getAttributesWithPrefixResponse" of service binding "XPlannerSoapBinding" operation "ns6__getAttributesWithPrefix"
struct ns6__getAttributesWithPrefixResponse
{
    ns2__Map*                           _getAttributesWithPrefixReturn;
};

/// Operation "ns6__getAttributesWithPrefix" of service binding "XPlannerSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns6__getAttributesWithPrefix(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 objectId,
    char*                               prefix,
    // response parameters:
    struct ns6__getAttributesWithPrefixResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns6__getAttributesWithPrefix(
    struct soap *soap,
    // request parameters:
    int                                 objectId,
    char*                               prefix,
    // response parameters:
    struct ns6__getAttributesWithPrefixResponse&
  );
@endcode

C++ proxy class (defined in soapXPlannerSoapBindingProxy.h):
  class XPlannerSoapBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns6  service method-style:	getAttributesWithPrefix rpc
//gsoap ns6  service method-encoding:	getAttributesWithPrefix http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns6  service method-action:	getAttributesWithPrefix ""
int ns6__getAttributesWithPrefix(
    int                                 _objectId,	///< Request parameter
    char*                               _prefix,	///< Request parameter
    struct ns6__getAttributesWithPrefixResponse&	///< Response struct parameter
);

/* End of Xplanner.h */
