; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	d:\Git_ZQProjs\ZQproj\Generic\CdmiFuse\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	??0Features@Json@@QAE@XZ			; Json::Features::Features
; Function compile flags: /Odtp
; File d:\git_zqprojs\zqproj\generic\cdmifuse\jsoncpp-src-0.5.0\src\lib_json\json_reader.cpp
;	COMDAT ??0Features@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Features@Json@@QAE@XZ PROC				; Json::Features::Features, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0

; 27   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Features@Json@@QAE@XZ ENDP				; Json::Features::Features
_TEXT	ENDS
PUBLIC	?all@Features@Json@@SA?AV12@XZ			; Json::Features::all
; Function compile flags: /Odtp
;	COMDAT ?all@Features@Json@@SA?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?all@Features@Json@@SA?AV12@XZ PROC			; Json::Features::all, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp

; 33   :    return Features();

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Features@Json@@QAE@XZ		; Json::Features::Features
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 34   : }

	pop	ebp
	ret	0
?all@Features@Json@@SA?AV12@XZ ENDP			; Json::Features::all
_TEXT	ENDS
PUBLIC	?strictMode@Features@Json@@SA?AV12@XZ		; Json::Features::strictMode
; Function compile flags: /Odtp
;	COMDAT ?strictMode@Features@Json@@SA?AV12@XZ
_TEXT	SEGMENT
_features$ = -4						; size = 2
___$ReturnUdt$ = 8					; size = 4
?strictMode@Features@Json@@SA?AV12@XZ PROC		; Json::Features::strictMode, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 40   :    Features features;

	lea	ecx, DWORD PTR _features$[ebp]
	call	??0Features@Json@@QAE@XZ		; Json::Features::Features

; 41   :    features.allowComments_ = false;

	mov	BYTE PTR _features$[ebp], 0

; 42   :    features.strictRoot_ = true;

	mov	BYTE PTR _features$[ebp+1], 1

; 43   :    return features;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cx, WORD PTR _features$[ebp]
	mov	WORD PTR [eax], cx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?strictMode@Features@Json@@SA?AV12@XZ ENDP		; Json::Features::strictMode
_TEXT	ENDS
PUBLIC	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::~stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
PUBLIC	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
PUBLIC	??0Reader@Json@@QAE@XZ				; Json::Reader::Reader
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Reader@Json@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$3
__ehfuncinfo$??0Reader@Json@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0Reader@Json@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Reader@Json@@QAE@XZ PROC				; Json::Reader::Reader, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 116				; 00000074H
	push	eax
	call	?all@Features@Json@@SA?AV12@XZ		; Json::Features::all
	add	esp, 4

; 116  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Reader@Json@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0Reader@Json@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
__unwindfunclet$??0Reader@Json@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??0Reader@Json@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0Reader@Json@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Reader@Json@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Reader@Json@@QAE@XZ ENDP				; Json::Reader::Reader
PUBLIC	??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::~stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::~stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
_TEXT	ENDS
PUBLIC	??0Reader@Json@@QAE@ABVFeatures@1@@Z		; Json::Reader::Reader
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Reader@Json@@QAE@ABVFeatures@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$2
__ehfuncinfo$??0Reader@Json@@QAE@ABVFeatures@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Reader@Json@@QAE@ABVFeatures@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Reader@Json@@QAE@ABVFeatures@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_features$ = 8						; size = 4
??0Reader@Json@@QAE@ABVFeatures@1@@Z PROC		; Json::Reader::Reader, COMDAT
; _this$ = ecx

; 121  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Reader@Json@@QAE@ABVFeatures@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _features$[ebp]
	mov	cx, WORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+116], cx

; 122  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0Reader@Json@@QAE@ABVFeatures@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Reader@Json@@QAE@ABVFeatures@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Reader@Json@@QAE@ABVFeatures@1@@Z ENDP		; Json::Reader::Reader
PUBLIC	?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z	; Json::Reader::parse
PUBLIC	?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_end$ = -8						; size = 4
_begin$ = -4						; size = 4
_document$ = 8						; size = 4
_root$ = 12						; size = 4
_collectComments$ = 16					; size = 1
?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z PROC ; Json::Reader::parse, COMDAT
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 130  :    document_ = document;

	mov	eax, DWORD PTR _document$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 131  :    const char *begin = document_.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _begin$[ebp], eax

; 132  :    const char *end = begin + document_.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	add	eax, DWORD PTR _begin$[ebp]
	mov	DWORD PTR _end$[ebp], eax

; 133  :    return parse( begin, end, root, collectComments );

	mov	cl, BYTE PTR _collectComments$[ebp]
	push	ecx
	mov	edx, DWORD PTR _root$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z ; Json::Reader::parse

; 134  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z ENDP ; Json::Reader::parse
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
EXTRN	__imp_??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z$0
__ehfuncinfo$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T29710 = -45						; size = 1
_doc$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_sin$ = 8						; size = 4
_root$ = 12						; size = 4
_collectComments$ = 16					; size = 1
?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z PROC ; Json::Reader::parse, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 142  :    //std::istream_iterator<char> begin(sin);
; 143  :    //std::istream_iterator<char> end;
; 144  :    // Those would allow streamed input from a file, if parse() were a
; 145  :    // template function.
; 146  : 
; 147  :    // Since std::string is reference-counted, this at least does not
; 148  :    // create an extra copy.
; 149  :    std::string doc;

	lea	ecx, DWORD PTR _doc$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 150  :    std::getline(sin, doc, (char)EOF);

	push	-1
	lea	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sin$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	add	esp, 12					; 0000000cH

; 151  :    return parse( doc, root, collectComments );

	mov	dl, BYTE PTR _collectComments$[ebp]
	push	edx
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	lea	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
	mov	BYTE PTR $T29710[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _doc$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29710[ebp]

; 152  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z$0:
	lea	ecx, DWORD PTR _doc$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z ENDP ; Json::Reader::parse
PUBLIC	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
PUBLIC	??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@ ; `string'
PUBLIC	?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ; Json::Reader::skipCommentTokens
PUBLIC	?readValue@Reader@Json@@AAE_NXZ			; Json::Reader::readValue
PUBLIC	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push
PUBLIC	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
PUBLIC	?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
PUBLIC	?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	?isObject@Value@Json@@QBE_NXZ:PROC		; Json::Value::isObject
EXTRN	?isArray@Value@Json@@QBE_NXZ:PROC		; Json::Value::isArray
EXTRN	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z:PROC ; Json::Value::setComment
EXTRN	__imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
;	COMDAT ??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@
CONST	SEGMENT
??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@ DB 'A valid JS'
	DB	'ON document must be either an array or an object value.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z$0
__ehfuncinfo$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T29721 = -60						; size = 28
$T29720 = -32						; size = 4
_successful$ = -25					; size = 1
_token$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_beginDoc$ = 8						; size = 4
_endDoc$ = 12						; size = 4
_root$ = 16						; size = 4
_collectComments$ = 20					; size = 1
?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z PROC	; Json::Reader::parse, COMDAT
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 159  :    if ( !features_.allowComments_ )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	jne	SHORT $LN6@parse

; 160  :    {
; 161  :       collectComments = false;

	mov	BYTE PTR _collectComments$[ebp], 0
$LN6@parse:

; 162  :    }
; 163  : 
; 164  :    begin_ = beginDoc;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _beginDoc$[ebp]
	mov	DWORD PTR [edx+68], eax

; 165  :    end_ = endDoc;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _endDoc$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 166  :    collectComments_ = collectComments;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _collectComments$[ebp]
	mov	BYTE PTR [eax+118], cl

; 167  :    current_ = begin_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+76], ecx

; 168  :    lastValueEnd_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0

; 169  :    lastValue_ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 170  :    commentsBefore_ = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 171  :    errors_.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
$LN5@parse:

; 172  :    while ( !nodes_.empty() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@parse

; 173  :       nodes_.pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
	jmp	SHORT $LN5@parse
$LN4@parse:

; 174  :    nodes_.push( &root );

	mov	edx, DWORD PTR _root$[ebp]
	mov	DWORD PTR $T29720[ebp], edx
	lea	eax, DWORD PTR $T29720[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

; 175  :    
; 176  :    bool successful = readValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readValue@Reader@Json@@AAE_NXZ		; Json::Reader::readValue
	mov	BYTE PTR _successful$[ebp], al

; 177  :    Token token;
; 178  :    skipCommentTokens( token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ; Json::Reader::skipCommentTokens

; 179  :    if ( collectComments_  &&  !commentsBefore_.empty() )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+118]
	test	eax, eax
	je	SHORT $LN3@parse
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@parse

; 180  :       root.setComment( commentsBefore_, commentAfter );

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	ecx, DWORD PTR _root$[ebp]
	call	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
$LN3@parse:

; 181  :    if ( features_.strictRoot_ )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+117]
	test	ecx, ecx
	je	SHORT $LN2@parse

; 182  :    {
; 183  :       if ( !root.isArray()  &&  !root.isObject() )

	mov	ecx, DWORD PTR _root$[ebp]
	call	?isArray@Value@Json@@QBE_NXZ		; Json::Value::isArray
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@parse
	mov	ecx, DWORD PTR _root$[ebp]
	call	?isObject@Value@Json@@QBE_NXZ		; Json::Value::isObject
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@parse

; 184  :       {
; 185  :          // Set error location to start of doc, ideally should be first token found in doc
; 186  :          token.type_ = tokenError;

	mov	DWORD PTR _token$[ebp], 14		; 0000000eH

; 187  :          token.start_ = beginDoc;

	mov	ecx, DWORD PTR _beginDoc$[ebp]
	mov	DWORD PTR _token$[ebp+4], ecx

; 188  :          token.end_ = endDoc;

	mov	edx, DWORD PTR _endDoc$[ebp]
	mov	DWORD PTR _token$[ebp+8], edx

; 189  :          addError( "A valid JSON document must be either an array or an object value.",
; 190  :                    token );

	push	OFFSET ??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@
	lea	ecx, DWORD PTR $T29721[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29721[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29721[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 191  :          return false;

	xor	al, al
	jmp	SHORT $LN7@parse
$LN2@parse:

; 192  :       }
; 193  :    }
; 194  :    return successful;

	mov	al, BYTE PTR _successful$[ebp]
$LN7@parse:

; 195  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z$0:
	lea	ecx, DWORD PTR $T29721[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z ENDP	; Json::Reader::parse
PUBLIC	??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@ ; `string'
PUBLIC	?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::decodeString
PUBLIC	?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::decodeHex
PUBLIC	?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::decodeNumber
PUBLIC	?readArray@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::readArray
PUBLIC	?readObject@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::readObject
PUBLIC	?currentValue@Reader@Json@@AAEAAVValue@2@XZ	; Json::Reader::currentValue
EXTRN	??0Value@Json@@QAE@W4ValueType@1@@Z:PROC	; Json::Value::Value
EXTRN	??1Value@Json@@QAE@XZ:PROC			; Json::Value::~Value
EXTRN	??4Value@Json@@QAEAAV01@ABV01@@Z:PROC		; Json::Value::operator=
EXTRN	??0Value@Json@@QAE@_N@Z:PROC			; Json::Value::Value
;	COMDAT ??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@
CONST	SEGMENT
??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@ DB 'Syntax err'
	DB	'or: value, object or array expected.', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?readValue@Reader@Json@@AAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$3
__ehfuncinfo$?readValue@Reader@Json@@AAE_NXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?readValue@Reader@Json@@AAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?readValue@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
tv178 = -124						; size = 4
tv144 = -120						; size = 4
tv82 = -116						; size = 4
_this$ = -112						; size = 4
$T29735 = -108						; size = 28
$T29734 = -77						; size = 1
$T29733 = -76						; size = 16
$T29732 = -60						; size = 16
$T29731 = -44						; size = 16
_successful$ = -25					; size = 1
_token$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
?readValue@Reader@Json@@AAE_NXZ PROC			; Json::Reader::readValue, COMDAT
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?readValue@Reader@Json@@AAE_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 201  :    Token token;
; 202  :    skipCommentTokens( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ; Json::Reader::skipCommentTokens

; 203  :    bool successful = true;

	mov	BYTE PTR _successful$[ebp], 1

; 204  : 
; 205  :    if ( collectComments_  &&  !commentsBefore_.empty() )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+118]
	test	edx, edx
	je	SHORT $LN13@readValue
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN13@readValue

; 206  :    {
; 207  :       currentValue().setComment( commentsBefore_, commentBefore );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment

; 208  :       commentsBefore_ = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN13@readValue:

; 209  :    }
; 210  : 
; 211  : 
; 212  :    switch ( token.type_ )

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR tv82[ebp]
	sub	eax, 1
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 9
	ja	$LN2@readValue
	mov	ecx, DWORD PTR tv82[ebp]
	jmp	DWORD PTR $LN21@readValue[ecx*4]
$LN10@readValue:

; 213  :    {
; 214  :    case tokenObjectBegin:
; 215  :       successful = readObject( token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readObject@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readObject
	mov	BYTE PTR _successful$[ebp], al

; 216  :       break;

	jmp	$LN11@readValue
$LN9@readValue:

; 217  :    case tokenArrayBegin:
; 218  :       successful = readArray( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readArray@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readArray
	mov	BYTE PTR _successful$[ebp], al

; 219  :       break;

	jmp	$LN11@readValue
$LN8@readValue:

; 220  :    case tokenNumber:
; 221  :       successful = decodeNumber( token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeNumber
	mov	BYTE PTR _successful$[ebp], al

; 222  :       break;

	jmp	$LN11@readValue
$LN7@readValue:

; 223  :    case tokenHex:
; 224  :       successful = decodeHex( token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeHex
	mov	BYTE PTR _successful$[ebp], al

; 225  :       break;

	jmp	$LN11@readValue
$LN6@readValue:

; 226  :    case tokenString:
; 227  :       successful = decodeString( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeString
	mov	BYTE PTR _successful$[ebp], al

; 228  :       break;

	jmp	$LN11@readValue
$LN5@readValue:

; 229  :    case tokenTrue:
; 230  :       currentValue() = true;

	push	1
	lea	ecx, DWORD PTR $T29731[ebp]
	call	??0Value@Json@@QAE@_N@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T29731[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29731[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 231  :       break;

	jmp	$LN11@readValue
$LN4@readValue:

; 232  :    case tokenFalse:
; 233  :       currentValue() = false;

	push	0
	lea	ecx, DWORD PTR $T29732[ebp]
	call	??0Value@Json@@QAE@_N@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	edx, DWORD PTR $T29732[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29732[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 234  :       break;

	jmp	SHORT $LN11@readValue
$LN3@readValue:

; 235  :    case tokenNull:
; 236  :       currentValue() = Value();

	push	0
	lea	ecx, DWORD PTR $T29733[ebp]
	call	??0Value@Json@@QAE@W4ValueType@1@@Z	; Json::Value::Value
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR tv178[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29733[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 237  :       break;

	jmp	SHORT $LN11@readValue
$LN2@readValue:

; 238  :    default:
; 239  :       return addError( "Syntax error: value, object or array expected.", token );

	push	OFFSET ??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@
	lea	ecx, DWORD PTR $T29735[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	push	0
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	lea	eax, DWORD PTR $T29735[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29734[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29735[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29734[ebp]
	jmp	SHORT $LN14@readValue
$LN11@readValue:

; 240  :    }
; 241  : 
; 242  :    if ( collectComments_ )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+118]
	test	edx, edx
	je	SHORT $LN1@readValue

; 243  :    {
; 244  :       lastValueEnd_ = current_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+80], edx

; 245  :       lastValue_ = &currentValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], eax
$LN1@readValue:

; 246  :    }
; 247  : 
; 248  :    return successful;

	mov	al, BYTE PTR _successful$[ebp]
$LN14@readValue:

; 249  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@readValue:
	DD	$LN10@readValue
	DD	$LN2@readValue
	DD	$LN9@readValue
	DD	$LN2@readValue
	DD	$LN6@readValue
	DD	$LN8@readValue
	DD	$LN7@readValue
	DD	$LN5@readValue
	DD	$LN4@readValue
	DD	$LN3@readValue
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$0:
	lea	ecx, DWORD PTR $T29731[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$1:
	lea	ecx, DWORD PTR $T29732[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$2:
	lea	ecx, DWORD PTR $T29733[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$3:
	lea	ecx, DWORD PTR $T29735[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?readValue@Reader@Json@@AAE_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?readValue@Reader@Json@@AAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?readValue@Reader@Json@@AAE_NXZ ENDP			; Json::Reader::readValue
PUBLIC	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::readToken
; Function compile flags: /Odtp
;	COMDAT ?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_token$ = 8						; size = 4
?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z PROC	; Json::Reader::skipCommentTokens, COMDAT
; _this$ = ecx

; 254  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  :    if ( features_.allowComments_ )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	je	SHORT $LN5@skipCommen
$LN4@skipCommen:

; 256  :    {
; 257  :       do
; 258  :       {
; 259  :          readToken( token );

	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken

; 260  :       }
; 261  :       while ( token.type_ == tokenComment );

	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax], 13			; 0000000dH
	je	SHORT $LN4@skipCommen

; 262  :    }
; 263  :    else

	jmp	SHORT $LN6@skipCommen
$LN5@skipCommen:

; 264  :    {
; 265  :       readToken( token );

	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
$LN6@skipCommen:

; 266  :    }
; 267  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ENDP	; Json::Reader::skipCommentTokens
_TEXT	ENDS
PUBLIC	?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z ; Json::Reader::expectToken
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z$0
__ehfuncinfo$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T29752 = -44						; size = 28
$T29751 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_token$ = 12						; size = 4
_message$ = 16						; size = 4
?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z PROC ; Json::Reader::expectToken, COMDAT
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 273  :    readToken( token );

	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken

; 274  :    if ( token.type_ != type )

	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _type$[ebp]
	je	SHORT $LN1@expectToke

; 275  :       return addError( message, token );

	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29752[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29752[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29751[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29752[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29751[ebp]
	jmp	SHORT $LN2@expectToke
$LN1@expectToke:

; 276  :    return true;

	mov	al, 1
$LN2@expectToke:

; 277  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z$0:
	lea	ecx, DWORD PTR $T29752[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z ENDP ; Json::Reader::expectToken
PUBLIC	??_C@_03KNPGGKC@ull?$AA@			; `string'
PUBLIC	??_C@_04KCECFHEP@alse?$AA@			; `string'
PUBLIC	?match@Reader@Json@@AAE_NPBDH@Z			; Json::Reader::match
PUBLIC	??_C@_03FFDNHNKN@rue?$AA@			; `string'
PUBLIC	?readNumber@Reader@Json@@AAEXXZ			; Json::Reader::readNumber
PUBLIC	?readHex@Reader@Json@@AAEXXZ			; Json::Reader::readHex
PUBLIC	?readComment@Reader@Json@@AAE_NXZ		; Json::Reader::readComment
PUBLIC	?readString@Reader@Json@@AAE_NXZ		; Json::Reader::readString
PUBLIC	?getNextChar@Reader@Json@@AAEDXZ		; Json::Reader::getNextChar
PUBLIC	?skipSpaces@Reader@Json@@AAEXXZ			; Json::Reader::skipSpaces
;	COMDAT ??_C@_03KNPGGKC@ull?$AA@
CONST	SEGMENT
??_C@_03KNPGGKC@ull?$AA@ DB 'ull', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCECFHEP@alse?$AA@
CONST	SEGMENT
??_C@_04KCECFHEP@alse?$AA@ DB 'alse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFDNHNKN@rue?$AA@
CONST	SEGMENT
??_C@_03FFDNHNKN@rue?$AA@ DB 'rue', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?readToken@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv70 = -12						; size = 4
_this$ = -8						; size = 4
_c$ = -2						; size = 1
_ok$ = -1						; size = 1
_token$ = 8						; size = 4
?readToken@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::readToken, COMDAT
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 283  :    skipSpaces();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipSpaces@Reader@Json@@AAEXXZ		; Json::Reader::skipSpaces

; 284  :    token.start_ = current_;

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+4], edx

; 285  :    Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$[ebp], al

; 286  :    bool ok = true;

	mov	BYTE PTR _ok$[ebp], 1

; 287  :    switch ( c )

	movsx	eax, BYTE PTR _c$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 125		; 0000007dH
	ja	$LN2@readToken
	mov	ecx, DWORD PTR tv70[ebp]
	movzx	edx, BYTE PTR $LN23@readToken[ecx]
	jmp	DWORD PTR $LN24@readToken[edx*4]
$LN18@readToken:

; 288  :    {
; 289  :    case '{':
; 290  :       token.type_ = tokenObjectBegin;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 1

; 291  :       break;

	jmp	$LN19@readToken
$LN17@readToken:

; 292  :    case '}':
; 293  :       token.type_ = tokenObjectEnd;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 2

; 294  :       break;

	jmp	$LN19@readToken
$LN16@readToken:

; 295  :    case '[':
; 296  :       token.type_ = tokenArrayBegin;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 3

; 297  :       break;

	jmp	$LN19@readToken
$LN15@readToken:

; 298  :    case ']':
; 299  :       token.type_ = tokenArrayEnd;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 4

; 300  :       break;

	jmp	$LN19@readToken
$LN14@readToken:

; 301  :    case '"':
; 302  :       token.type_ = tokenString;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 5

; 303  :       ok = readString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readString@Reader@Json@@AAE_NXZ	; Json::Reader::readString
	mov	BYTE PTR _ok$[ebp], al

; 304  :       break;

	jmp	$LN19@readToken
$LN13@readToken:

; 305  :    case '/':
; 306  :       token.type_ = tokenComment;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 13			; 0000000dH

; 307  :       ok = readComment();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readComment@Reader@Json@@AAE_NXZ	; Json::Reader::readComment
	mov	BYTE PTR _ok$[ebp], al

; 308  :       break;

	jmp	$LN19@readToken
$LN12@readToken:

; 309  :    case '0':
; 310  : 	   if ('X' == *current_ || 'x' == *current_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 88					; 00000058H
	je	SHORT $LN10@readToken
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 120				; 00000078H
	jne	SHORT $LN9@readToken
$LN10@readToken:

; 311  : 	   {
; 312  : 		   token.type_ = tokenHex;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 7

; 313  : 		   readHex();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readHex@Reader@Json@@AAEXXZ		; Json::Reader::readHex

; 314  : 		   break;

	jmp	$LN19@readToken
$LN9@readToken:

; 315  : 	   }
; 316  : 	   // no break here
; 317  :    case '1':
; 318  :    case '2':
; 319  :    case '3':
; 320  :    case '4':
; 321  :    case '5':
; 322  :    case '6':
; 323  :    case '7':
; 324  :    case '8':
; 325  :    case '9':
; 326  :    case '-':
; 327  :       token.type_ = tokenNumber;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 6

; 328  :       readNumber();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readNumber@Reader@Json@@AAEXXZ		; Json::Reader::readNumber

; 329  :       break;

	jmp	SHORT $LN19@readToken
$LN8@readToken:

; 330  :    case 't':
; 331  :       token.type_ = tokenTrue;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 8

; 332  :       ok = match( "rue", 3 );

	push	3
	push	OFFSET ??_C@_03FFDNHNKN@rue?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?match@Reader@Json@@AAE_NPBDH@Z		; Json::Reader::match
	mov	BYTE PTR _ok$[ebp], al

; 333  :       break;

	jmp	SHORT $LN19@readToken
$LN7@readToken:

; 334  :    case 'f':
; 335  :       token.type_ = tokenFalse;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 9

; 336  :       ok = match( "alse", 4 );

	push	4
	push	OFFSET ??_C@_04KCECFHEP@alse?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?match@Reader@Json@@AAE_NPBDH@Z		; Json::Reader::match
	mov	BYTE PTR _ok$[ebp], al

; 337  :       break;

	jmp	SHORT $LN19@readToken
$LN6@readToken:

; 338  :    case 'n':
; 339  :       token.type_ = tokenNull;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 10			; 0000000aH

; 340  :       ok = match( "ull", 3 );

	push	3
	push	OFFSET ??_C@_03KNPGGKC@ull?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?match@Reader@Json@@AAE_NPBDH@Z		; Json::Reader::match
	mov	BYTE PTR _ok$[ebp], al

; 341  :       break;

	jmp	SHORT $LN19@readToken
$LN5@readToken:

; 342  :    case ',':
; 343  :       token.type_ = tokenArraySeparator;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 11			; 0000000bH

; 344  :       break;

	jmp	SHORT $LN19@readToken
$LN4@readToken:

; 345  :    case ':':
; 346  :       token.type_ = tokenMemberSeparator;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH

; 347  :       break;

	jmp	SHORT $LN19@readToken
$LN3@readToken:

; 348  :    case 0:
; 349  :       token.type_ = tokenEndOfStream;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 0

; 350  :       break;

	jmp	SHORT $LN19@readToken
$LN2@readToken:

; 351  :    default:
; 352  :       ok = false;

	mov	BYTE PTR _ok$[ebp], 0
$LN19@readToken:

; 353  :       break;
; 354  :    }
; 355  :    if ( !ok )

	movzx	edx, BYTE PTR _ok$[ebp]
	test	edx, edx
	jne	SHORT $LN1@readToken

; 356  :       token.type_ = tokenError;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 14			; 0000000eH
$LN1@readToken:

; 357  :    token.end_ = current_;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+8], eax

; 358  :    return true;

	mov	al, 1

; 359  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN24@readToken:
	DD	$LN3@readToken
	DD	$LN14@readToken
	DD	$LN5@readToken
	DD	$LN9@readToken
	DD	$LN13@readToken
	DD	$LN12@readToken
	DD	$LN4@readToken
	DD	$LN16@readToken
	DD	$LN15@readToken
	DD	$LN7@readToken
	DD	$LN6@readToken
	DD	$LN8@readToken
	DD	$LN18@readToken
	DD	$LN17@readToken
	DD	$LN2@readToken
$LN23@readToken:
	DB	0
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	1
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	2
	DB	3
	DB	14					; 0000000eH
	DB	4
	DB	5
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	6
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	7
	DB	14					; 0000000eH
	DB	8
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	9
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	10					; 0000000aH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	11					; 0000000bH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	12					; 0000000cH
	DB	14					; 0000000eH
	DB	13					; 0000000dH
?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::readToken
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?skipSpaces@Reader@Json@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$21948 = -1						; size = 1
?skipSpaces@Reader@Json@@AAEXXZ PROC			; Json::Reader::skipSpaces, COMDAT
; _this$ = ecx

; 364  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN5@skipSpaces:

; 365  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+72]
	je	SHORT $LN6@skipSpaces

; 366  :    {
; 367  :       Char c = *current_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$21948[ebp], dl

; 368  :       if ( c == ' '  ||  c == '\t'  ||  c == '\r'  ||  c == '\n' )

	movsx	eax, BYTE PTR _c$21948[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN2@skipSpaces
	movsx	ecx, BYTE PTR _c$21948[ebp]
	cmp	ecx, 9
	je	SHORT $LN2@skipSpaces
	movsx	edx, BYTE PTR _c$21948[ebp]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN2@skipSpaces
	movsx	eax, BYTE PTR _c$21948[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN3@skipSpaces
$LN2@skipSpaces:

; 369  :          ++current_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], edx

; 370  :       else

	jmp	SHORT $LN1@skipSpaces
$LN3@skipSpaces:

; 371  :          break;

	jmp	SHORT $LN6@skipSpaces
$LN1@skipSpaces:

; 372  :    }

	jmp	SHORT $LN5@skipSpaces
$LN6@skipSpaces:

; 373  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?skipSpaces@Reader@Json@@AAEXXZ ENDP			; Json::Reader::skipSpaces
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?match@Reader@Json@@AAE_NPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = -4						; size = 4
_pattern$ = 8						; size = 4
_patternLength$ = 12					; size = 4
?match@Reader@Json@@AAE_NPBDH@Z PROC			; Json::Reader::match, COMDAT
; _this$ = ecx

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 380  :    if ( end_ - current_ < patternLength )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+72]
	sub	edx, DWORD PTR [ecx+76]
	cmp	edx, DWORD PTR _patternLength$[ebp]
	jge	SHORT $LN4@match

; 381  :       return false;

	xor	al, al
	jmp	SHORT $LN5@match
$LN4@match:

; 382  :    int index = patternLength;

	mov	eax, DWORD PTR _patternLength$[ebp]
	mov	DWORD PTR _index$[ebp], eax
$LN3@match:

; 383  :    while ( index-- )

	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	sub	edx, 1
	mov	DWORD PTR _index$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN2@match

; 384  :       if ( current_[index] != pattern[index] )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _pattern$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN1@match

; 385  :          return false;

	xor	al, al
	jmp	SHORT $LN5@match
$LN1@match:

; 386  :    current_ += patternLength;

	jmp	SHORT $LN3@match
$LN2@match:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _patternLength$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], ecx

; 387  :    return true;

	mov	al, 1
$LN5@match:

; 388  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?match@Reader@Json@@AAE_NPBDH@Z ENDP			; Json::Reader::match
_TEXT	ENDS
PUBLIC	?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z ; Json::Reader::addComment
PUBLIC	?readCppStyleComment@Reader@Json@@AAE_NXZ	; Json::Reader::readCppStyleComment
PUBLIC	?readCStyleComment@Reader@Json@@AAE_NXZ		; Json::Reader::readCStyleComment
; Function compile flags: /Odtp
;	COMDAT ?readComment@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_placement$21974 = -12					; size = 4
_c$ = -6						; size = 1
_successful$ = -5					; size = 1
_commentBegin$ = -4					; size = 4
?readComment@Reader@Json@@AAE_NXZ PROC			; Json::Reader::readComment, COMDAT
; _this$ = ecx

; 393  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 394  :    Location commentBegin = current_ - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	sub	ecx, 1
	mov	DWORD PTR _commentBegin$[ebp], ecx

; 395  :    Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$[ebp], al

; 396  :    bool successful = false;

	mov	BYTE PTR _successful$[ebp], 0

; 397  :    if ( c == '*' )

	movsx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN8@readCommen

; 398  :       successful = readCStyleComment();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readCStyleComment@Reader@Json@@AAE_NXZ	; Json::Reader::readCStyleComment
	mov	BYTE PTR _successful$[ebp], al
	jmp	SHORT $LN7@readCommen
$LN8@readCommen:

; 399  :    else if ( c == '/' )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN7@readCommen

; 400  :       successful = readCppStyleComment();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readCppStyleComment@Reader@Json@@AAE_NXZ ; Json::Reader::readCppStyleComment
	mov	BYTE PTR _successful$[ebp], al
$LN7@readCommen:

; 401  :    if ( !successful )

	movzx	ecx, BYTE PTR _successful$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@readCommen

; 402  :       return false;

	xor	al, al
	jmp	SHORT $LN9@readCommen
$LN5@readCommen:

; 403  : 
; 404  :    if ( collectComments_ )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+118]
	test	eax, eax
	je	SHORT $LN4@readCommen

; 405  :    {
; 406  :       CommentPlacement placement = commentBefore;

	mov	DWORD PTR _placement$21974[ebp], 0

; 407  :       if ( lastValueEnd_  &&  !containsNewLine( lastValueEnd_, commentBegin ) )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	je	SHORT $LN3@readCommen
	mov	edx, DWORD PTR _commentBegin$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	?containsNewLine@Json@@YA_NPBD0@Z	; Json::containsNewLine
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@readCommen

; 408  :       {
; 409  :          if ( c != '*'  ||  !containsNewLine( commentBegin, current_ ) )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN1@readCommen
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _commentBegin$[ebp]
	push	eax
	call	?containsNewLine@Json@@YA_NPBD0@Z	; Json::containsNewLine
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@readCommen
$LN1@readCommen:

; 410  :             placement = commentAfterOnSameLine;

	mov	DWORD PTR _placement$21974[ebp], 1
$LN3@readCommen:

; 411  :       }
; 412  : 
; 413  :       addComment( commentBegin, current_, placement );

	mov	edx, DWORD PTR _placement$21974[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _commentBegin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z ; Json::Reader::addComment
$LN4@readCommen:

; 414  :    }
; 415  :    return true;

	mov	al, 1
$LN9@readCommen:

; 416  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readComment@Reader@Json@@AAE_NXZ ENDP			; Json::Reader::readComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?containsNewLine@Json@@YA_NPBD0@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?containsNewLine@Json@@YA_NPBD0@Z PROC			; Json::containsNewLine, COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp

; 67   :    for ( ;begin < end; ++begin )

	jmp	SHORT $LN5@containsNe
$LN4@containsNe:
	mov	eax, DWORD PTR _begin$[ebp]
	add	eax, 1
	mov	DWORD PTR _begin$[ebp], eax
$LN5@containsNe:
	mov	ecx, DWORD PTR _begin$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jae	SHORT $LN3@containsNe

; 68   :       if ( *begin == '\n'  ||  *begin == '\r' )

	mov	edx, DWORD PTR _begin$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN1@containsNe
	mov	ecx, DWORD PTR _begin$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN2@containsNe
$LN1@containsNe:

; 69   :          return true;

	mov	al, 1
	jmp	SHORT $LN6@containsNe
$LN2@containsNe:

; 70   :    return false;

	jmp	SHORT $LN4@containsNe
$LN3@containsNe:
	xor	al, al
$LN6@containsNe:

; 71   : }

	pop	ebp
	ret	0
?containsNewLine@Json@@YA_NPBD0@Z ENDP			; Json::containsNewLine
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z:PROC
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$1
__ehfuncinfo$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
_TEXT	SEGMENT
tv95 = -88						; size = 4
tv129 = -84						; size = 4
tv93 = -80						; size = 4
tv128 = -76						; size = 4
_this$ = -72						; size = 4
$T29775 = -68						; size = 28
$T29774 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
_placement$ = 16					; size = 4
?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z PROC ; Json::Reader::addComment, COMDAT
; _this$ = ecx

; 423  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 424  :    assert( collectComments_ );
; 425  :    if ( placement == commentAfterOnSameLine )

	cmp	DWORD PTR _placement$[ebp], 1
	jne	SHORT $LN3@addComment

; 426  :    {
; 427  :       assert( lastValue_ != 0 );
; 428  :       lastValue_->setComment( std::string( begin, end ), placement );

	mov	eax, DWORD PTR _placement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T29774[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv128[ebp], eax
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+84]
	call	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29774[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 429  :    }
; 430  :    else

	jmp	SHORT $LN4@addComment
$LN3@addComment:

; 431  :    {
; 432  :       if ( !commentsBefore_.empty() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@addComment

; 433  :          commentsBefore_ += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@addComment:

; 434  :       commentsBefore_ += std::string( begin, end );

	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T29775[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv129[ebp], eax
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29775[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@addComment:

; 435  :    }
; 436  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$0:
	lea	ecx, DWORD PTR $T29774[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$1:
	lea	ecx, DWORD PTR $T29775[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z ENDP ; Json::Reader::addComment
; Function compile flags: /Odtp
;	COMDAT ?readCStyleComment@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$22091 = -1						; size = 1
?readCStyleComment@Reader@Json@@AAE_NXZ PROC		; Json::Reader::readCStyleComment, COMDAT
; _this$ = ecx

; 441  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN3@readCStyle:

; 442  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+72]
	je	SHORT $LN2@readCStyle

; 443  :    {
; 444  :       Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$22091[ebp], al

; 445  :       if ( c == '*'  &&  *current_ == '/' )

	movsx	eax, BYTE PTR _c$22091[ebp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN1@readCStyle
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN1@readCStyle

; 446  :          break;

	jmp	SHORT $LN2@readCStyle
$LN1@readCStyle:

; 447  :    }

	jmp	SHORT $LN3@readCStyle
$LN2@readCStyle:

; 448  :    return getNextChar() == '/';

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	movsx	ecx, al
	xor	eax, eax
	cmp	ecx, 47					; 0000002fH
	sete	al

; 449  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readCStyleComment@Reader@Json@@AAE_NXZ ENDP		; Json::Reader::readCStyleComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readCppStyleComment@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$22099 = -1						; size = 1
?readCppStyleComment@Reader@Json@@AAE_NXZ PROC		; Json::Reader::readCppStyleComment, COMDAT
; _this$ = ecx

; 454  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN4@readCppSty:

; 455  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+72]
	je	SHORT $LN3@readCppSty

; 456  :    {
; 457  :       Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$22099[ebp], al

; 458  :       if (  c == '\r'  ||  c == '\n' )

	movsx	eax, BYTE PTR _c$22099[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN1@readCppSty
	movsx	ecx, BYTE PTR _c$22099[ebp]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN2@readCppSty
$LN1@readCppSty:

; 459  :          break;

	jmp	SHORT $LN3@readCppSty
$LN2@readCppSty:

; 460  :    }

	jmp	SHORT $LN4@readCppSty
$LN3@readCppSty:

; 461  :    return true;

	mov	al, 1

; 462  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readCppStyleComment@Reader@Json@@AAE_NXZ ENDP		; Json::Reader::readCppStyleComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readNumber@Reader@Json@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readNumber@Reader@Json@@AAEXXZ PROC			; Json::Reader::readNumber, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@readNumber:

; 468  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+72]
	je	SHORT $LN5@readNumber

; 469  :    {
; 470  :       if ( !(*current_ >= '0'  &&  *current_ <= '9')  &&
; 471  :            !in( *current_, '.', 'e', 'E', '+', '-' ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN1@readNumber
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jle	SHORT $LN2@readNumber
$LN1@readNumber:
	push	45					; 0000002dH
	push	43					; 0000002bH
	push	69					; 00000045H
	push	101					; 00000065H
	push	46					; 0000002eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	dl, BYTE PTR [ecx]
	push	edx
	call	?in@Json@@YA_NDDDDDD@Z			; Json::in
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@readNumber

; 472  :          break;

	jmp	SHORT $LN5@readNumber
$LN2@readNumber:

; 473  :       ++current_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], edx

; 474  :    }

	jmp	SHORT $LN4@readNumber
$LN5@readNumber:

; 475  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readNumber@Reader@Json@@AAEXXZ ENDP			; Json::Reader::readNumber
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?in@Json@@YA_NDDDDDD@Z
_TEXT	SEGMENT
tv79 = -4						; size = 4
_c$ = 8							; size = 1
_c1$ = 12						; size = 1
_c2$ = 16						; size = 1
_c3$ = 20						; size = 1
_c4$ = 24						; size = 1
_c5$ = 28						; size = 1
?in@Json@@YA_NDDDDDD@Z PROC				; Json::in, COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 59   :    return c == c1  ||  c == c2  ||  c == c3  ||  c == c4  ||  c == c5;

	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c1$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in
	movsx	edx, BYTE PTR _c$[ebp]
	movsx	eax, BYTE PTR _c2$[ebp]
	cmp	edx, eax
	je	SHORT $LN3@in
	movsx	ecx, BYTE PTR _c$[ebp]
	movsx	edx, BYTE PTR _c3$[ebp]
	cmp	ecx, edx
	je	SHORT $LN3@in
	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c4$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in
	movsx	edx, BYTE PTR _c$[ebp]
	movsx	eax, BYTE PTR _c5$[ebp]
	cmp	edx, eax
	je	SHORT $LN3@in
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN4@in
$LN3@in:
	mov	DWORD PTR tv79[ebp], 1
$LN4@in:
	mov	al, BYTE PTR tv79[ebp]

; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?in@Json@@YA_NDDDDDD@Z ENDP				; Json::in
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readHex@Reader@Json@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readHex@Reader@Json@@AAEXXZ PROC			; Json::Reader::readHex, COMDAT
; _this$ = ecx

; 479  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 480  :    for (current_++; current_ != end_; current_++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], ecx
	jmp	SHORT $LN7@readHex
$LN6@readHex:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], ecx
$LN7@readHex:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+72]
	je	SHORT $LN8@readHex

; 481  :    {
; 482  :       if ( !(*current_ >= '0'  &&  *current_ <= '9')  && 
; 483  : 		   !(*current_ >= 'a'  &&  *current_ <= 'f') && !(*current_ >= 'A'  &&  *current_ <= 'F') )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN3@readHex
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jle	SHORT $LN4@readHex
$LN3@readHex:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN2@readHex
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 102				; 00000066H
	jle	SHORT $LN4@readHex
$LN2@readHex:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN1@readHex
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 70					; 00000046H
	jle	SHORT $LN4@readHex
$LN1@readHex:

; 484  :          break;

	jmp	SHORT $LN8@readHex
$LN4@readHex:

; 485  :    }

	jmp	SHORT $LN6@readHex
$LN8@readHex:

; 486  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readHex@Reader@Json@@AAEXXZ ENDP			; Json::Reader::readHex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readString@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = -1						; size = 1
?readString@Reader@Json@@AAE_NXZ PROC			; Json::Reader::readString, COMDAT
; _this$ = ecx

; 490  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 491  :    Char c = 0;

	mov	BYTE PTR _c$[ebp], 0
$LN5@readString:

; 492  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+72]
	je	SHORT $LN4@readString

; 493  :    {
; 494  :       c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$[ebp], al

; 495  :       if ( c == '\\' )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN3@readString

; 496  :          getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	jmp	SHORT $LN2@readString
$LN3@readString:

; 497  :       else if ( c == '"' )

	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN2@readString

; 498  :          break;

	jmp	SHORT $LN4@readString
$LN2@readString:

; 499  :    }

	jmp	SHORT $LN5@readString
$LN4@readString:

; 500  :    return c == '"';

	movsx	edx, BYTE PTR _c$[ebp]
	xor	eax, eax
	cmp	edx, 34					; 00000022H
	sete	al

; 501  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readString@Reader@Json@@AAE_NXZ ENDP			; Json::Reader::readString
_TEXT	ENDS
PUBLIC	??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@ ; `string'
PUBLIC	??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@ ; `string'
PUBLIC	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
PUBLIC	??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@ ; `string'
PUBLIC	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
PUBLIC	?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
PUBLIC	__$ArrayPad$
EXTRN	??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Json::Value::operator[]
;	COMDAT ??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@
CONST	SEGMENT
??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@ DB 'Missin'
	DB	'g ''}'' or object member name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@
CONST	SEGMENT
??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@ DB 'Mi'
	DB	'ssing '','' or ''}'' in object declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@
CONST	SEGMENT
??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@ DB 'Missing '
	DB	''':'' after object member name', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$4
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv203 = -220						; size = 4
tv65 = -216						; size = 4
_this$ = -212						; size = 4
$T29812 = -208						; size = 28
$T29811 = -178						; size = 1
$T29810 = -177						; size = 1
$T29809 = -176						; size = 28
$T29808 = -146						; size = 1
$T29807 = -145						; size = 1
$T29806 = -144						; size = 4
$T29805 = -140						; size = 28
$T29804 = -111						; size = 1
$T29803 = -110						; size = 1
$T29802 = -109						; size = 1
$T29801 = -108						; size = 16
_finalizeTokenOk$22167 = -89				; size = 1
_colon$22150 = -88					; size = 12
_comma$22161 = -76					; size = 12
_initialTokenOk$22140 = -62				; size = 1
_ok$22158 = -61						; size = 1
_value$22156 = -60					; size = 4
_tokenName$ = -56					; size = 12
_name$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tokenStart$ = 8					; size = 4
?readObject@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::readObject, COMDAT
; _this$ = ecx

; 506  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 507  :    Token tokenName;
; 508  :    std::string name;

	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 509  :    currentValue() = Value( objectValue );

	push	7
	lea	ecx, DWORD PTR $T29801[ebp]
	call	??0Value@Json@@QAE@W4ValueType@1@@Z	; Json::Value::Value
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv203[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv203[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T29801[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN16@readObject:

; 510  :    while ( readToken( tokenName ) )

	lea	edx, DWORD PTR _tokenName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	eax, al
	test	eax, eax
	je	$LN15@readObject

; 511  :    {
; 512  :       bool initialTokenOk = true;

	mov	BYTE PTR _initialTokenOk$22140[ebp], 1
$LN14@readObject:

; 513  :       while ( tokenName.type_ == tokenComment  &&  initialTokenOk )

	cmp	DWORD PTR _tokenName$[ebp], 13		; 0000000dH
	jne	SHORT $LN13@readObject
	movzx	ecx, BYTE PTR _initialTokenOk$22140[ebp]
	test	ecx, ecx
	je	SHORT $LN13@readObject

; 514  :          initialTokenOk = readToken( tokenName );

	lea	edx, DWORD PTR _tokenName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _initialTokenOk$22140[ebp], al
	jmp	SHORT $LN14@readObject
$LN13@readObject:

; 515  :       if  ( !initialTokenOk )

	movzx	eax, BYTE PTR _initialTokenOk$22140[ebp]
	test	eax, eax
	jne	SHORT $LN12@readObject

; 516  :          break;

	jmp	$LN15@readObject
$LN12@readObject:

; 517  :       if ( tokenName.type_ == tokenObjectEnd  &&  name.empty() )  // empty object

	cmp	DWORD PTR _tokenName$[ebp], 2
	jne	SHORT $LN11@readObject
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@readObject

; 518  :          return true;

	mov	BYTE PTR $T29802[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29802[ebp]
	jmp	$LN17@readObject
$LN11@readObject:

; 519  :       if ( tokenName.type_ != tokenString )

	cmp	DWORD PTR _tokenName$[ebp], 5
	je	SHORT $LN10@readObject

; 520  :          break;

	jmp	$LN15@readObject
$LN10@readObject:

; 521  :       
; 522  :       name = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 523  :       if ( !decodeString( tokenName, name ) )

	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	lea	eax, DWORD PTR _tokenName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@readObject

; 524  :          return recoverFromError( tokenObjectEnd );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	mov	BYTE PTR $T29803[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29803[ebp]
	jmp	$LN17@readObject
$LN9@readObject:

; 525  : 
; 526  :       Token colon;
; 527  :       if ( !readToken( colon ) ||  colon.type_ != tokenMemberSeparator )

	lea	edx, DWORD PTR _colon$22150[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@readObject
	cmp	DWORD PTR _colon$22150[ebp], 12		; 0000000cH
	je	SHORT $LN8@readObject
$LN7@readObject:

; 528  :       {
; 529  :          return addErrorAndRecover( "Missing ':' after object member name", 
; 530  :                                     colon, 
; 531  :                                     tokenObjectEnd );

	push	OFFSET ??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@
	lea	ecx, DWORD PTR $T29805[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	2
	lea	ecx, DWORD PTR _colon$22150[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29805[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T29804[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T29805[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29804[ebp]
	jmp	$LN17@readObject
$LN8@readObject:

; 532  :       }
; 533  :       Value &value = currentValue()[ name ];

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
	mov	DWORD PTR _value$22156[ebp], eax

; 534  :       nodes_.push( &value );

	mov	ecx, DWORD PTR _value$22156[ebp]
	mov	DWORD PTR $T29806[ebp], ecx
	lea	edx, DWORD PTR $T29806[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

; 535  :       bool ok = readValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readValue@Reader@Json@@AAE_NXZ		; Json::Reader::readValue
	mov	BYTE PTR _ok$22158[ebp], al

; 536  :       nodes_.pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop

; 537  :       if ( !ok ) // error already set

	movzx	eax, BYTE PTR _ok$22158[ebp]
	test	eax, eax
	jne	SHORT $LN6@readObject

; 538  :          return recoverFromError( tokenObjectEnd );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	mov	BYTE PTR $T29807[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29807[ebp]
	jmp	$LN17@readObject
$LN6@readObject:

; 539  : 
; 540  :       Token comma;
; 541  :       if ( !readToken( comma )
; 542  :             ||  ( comma.type_ != tokenObjectEnd  &&  
; 543  :                   comma.type_ != tokenArraySeparator &&
; 544  : 		  comma.type_ != tokenComment ) )

	lea	ecx, DWORD PTR _comma$22161[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@readObject
	cmp	DWORD PTR _comma$22161[ebp], 2
	je	SHORT $LN5@readObject
	cmp	DWORD PTR _comma$22161[ebp], 11		; 0000000bH
	je	SHORT $LN5@readObject
	cmp	DWORD PTR _comma$22161[ebp], 13		; 0000000dH
	je	SHORT $LN5@readObject
$LN4@readObject:

; 545  :       {
; 546  :          return addErrorAndRecover( "Missing ',' or '}' in object declaration", 
; 547  :                                     comma, 
; 548  :                                     tokenObjectEnd );

	push	OFFSET ??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@
	lea	ecx, DWORD PTR $T29809[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	2
	lea	eax, DWORD PTR _comma$22161[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29809[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T29808[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T29809[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29808[ebp]
	jmp	$LN17@readObject
$LN5@readObject:

; 549  :       }
; 550  :       bool finalizeTokenOk = true;

	mov	BYTE PTR _finalizeTokenOk$22167[ebp], 1
$LN3@readObject:

; 551  :       while ( comma.type_ == tokenComment &&
; 552  :               finalizeTokenOk )

	cmp	DWORD PTR _comma$22161[ebp], 13		; 0000000dH
	jne	SHORT $LN2@readObject
	movzx	edx, BYTE PTR _finalizeTokenOk$22167[ebp]
	test	edx, edx
	je	SHORT $LN2@readObject

; 553  :          finalizeTokenOk = readToken( comma );

	lea	eax, DWORD PTR _comma$22161[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _finalizeTokenOk$22167[ebp], al
	jmp	SHORT $LN3@readObject
$LN2@readObject:

; 554  :       if ( comma.type_ == tokenObjectEnd )

	cmp	DWORD PTR _comma$22161[ebp], 2
	jne	SHORT $LN1@readObject

; 555  :          return true;

	mov	BYTE PTR $T29810[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29810[ebp]
	jmp	SHORT $LN17@readObject
$LN1@readObject:

; 556  :    }

	jmp	$LN16@readObject
$LN15@readObject:

; 557  :    return addErrorAndRecover( "Missing '}' or object member name", 
; 558  :                               tokenName, 
; 559  :                               tokenObjectEnd );

	push	OFFSET ??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@
	lea	ecx, DWORD PTR $T29812[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	push	2
	lea	ecx, DWORD PTR _tokenName$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29812[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T29811[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T29812[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29811[ebp]
$LN17@readObject:

; 560  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T29801[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$2:
	lea	ecx, DWORD PTR $T29805[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$3:
	lea	ecx, DWORD PTR $T29809[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$4:
	lea	ecx, DWORD PTR $T29812[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?readObject@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::readObject
PUBLIC	??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@ ; `string'
EXTRN	??AValue@Json@@QAEAAV01@I@Z:PROC		; Json::Value::operator[]
;	COMDAT ??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@
CONST	SEGMENT
??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@ DB 'Mi'
	DB	'ssing '','' or '']'' in array declaration', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$1
__ehfuncinfo$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv141 = -124						; size = 4
tv86 = -120						; size = 4
tv158 = -116						; size = 4
tv160 = -112						; size = 4
_this$ = -108						; size = 4
$T29831 = -104						; size = 28
$T29830 = -73						; size = 1
$T29827 = -72						; size = 4
$T29826 = -68						; size = 16
_badTokenType$22195 = -46				; size = 1
_ok$22189 = -45						; size = 1
_token$22191 = -44					; size = 12
_value$22187 = -32					; size = 4
_endArray$22182 = -28					; size = 12
_index$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tokenStart$ = 8					; size = 4
?readArray@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::readArray, COMDAT
; _this$ = ecx

; 565  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 566  :    currentValue() = Value( arrayValue );

	push	6
	lea	ecx, DWORD PTR $T29826[ebp]
	call	??0Value@Json@@QAE@W4ValueType@1@@Z	; Json::Value::Value
	mov	DWORD PTR tv160[ebp], eax
	mov	eax, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv158[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29826[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 567  :    skipSpaces();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipSpaces@Reader@Json@@AAEXXZ		; Json::Reader::skipSpaces

; 568  :    if ( *current_ == ']' ) // empty array

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN9@readArray

; 569  :    {
; 570  :       Token endArray;
; 571  :       readToken( endArray );

	lea	edx, DWORD PTR _endArray$22182[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken

; 572  :       return true;

	mov	al, 1
	jmp	$LN10@readArray
$LN9@readArray:

; 573  :    }
; 574  :    int index = 0;

	mov	DWORD PTR _index$[ebp], 0
$LN8@readArray:

; 575  :    while ( true )

	mov	eax, 1
	test	eax, eax
	je	$LN7@readArray

; 576  :    {
; 577  :       Value &value = currentValue()[ index++ ];

	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	mov	edx, DWORD PTR tv86[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??AValue@Json@@QAEAAV01@I@Z		; Json::Value::operator[]
	mov	DWORD PTR _value$22187[ebp], eax
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 578  :       nodes_.push( &value );

	mov	ecx, DWORD PTR _value$22187[ebp]
	mov	DWORD PTR $T29827[ebp], ecx
	lea	edx, DWORD PTR $T29827[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

; 579  :       bool ok = readValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readValue@Reader@Json@@AAE_NXZ		; Json::Reader::readValue
	mov	BYTE PTR _ok$22189[ebp], al

; 580  :       nodes_.pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop

; 581  :       if ( !ok ) // error already set

	movzx	eax, BYTE PTR _ok$22189[ebp]
	test	eax, eax
	jne	SHORT $LN6@readArray

; 582  :          return recoverFromError( tokenArrayEnd );

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	jmp	$LN10@readArray
$LN6@readArray:

; 583  : 
; 584  :       Token token;
; 585  :       // Accept Comment after last item in the array.
; 586  :       ok = readToken( token );

	lea	ecx, DWORD PTR _token$22191[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _ok$22189[ebp], al
$LN5@readArray:

; 587  :       while ( token.type_ == tokenComment  &&  ok )

	cmp	DWORD PTR _token$22191[ebp], 13		; 0000000dH
	jne	SHORT $LN4@readArray
	movzx	edx, BYTE PTR _ok$22189[ebp]
	test	edx, edx
	je	SHORT $LN4@readArray

; 588  :       {
; 589  :          ok = readToken( token );

	lea	eax, DWORD PTR _token$22191[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _ok$22189[ebp], al

; 590  :       }

	jmp	SHORT $LN5@readArray
$LN4@readArray:

; 591  :       bool badTokenType = ( token.type_ == tokenArraySeparator  &&  
; 592  :                             token.type_ == tokenArrayEnd );

	cmp	DWORD PTR _token$22191[ebp], 11		; 0000000bH
	jne	SHORT $LN12@readArray
	cmp	DWORD PTR _token$22191[ebp], 4
	jne	SHORT $LN12@readArray
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN13@readArray
$LN12@readArray:
	mov	DWORD PTR tv141[ebp], 0
$LN13@readArray:
	mov	cl, BYTE PTR tv141[ebp]
	mov	BYTE PTR _badTokenType$22195[ebp], cl

; 593  :       if ( !ok  ||  badTokenType )

	movzx	edx, BYTE PTR _ok$22189[ebp]
	test	edx, edx
	je	SHORT $LN2@readArray
	movzx	eax, BYTE PTR _badTokenType$22195[ebp]
	test	eax, eax
	je	SHORT $LN3@readArray
$LN2@readArray:

; 594  :       {
; 595  :          return addErrorAndRecover( "Missing ',' or ']' in array declaration", 
; 596  :                                     token, 
; 597  :                                     tokenArrayEnd );

	push	OFFSET ??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@
	lea	ecx, DWORD PTR $T29831[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	4
	lea	ecx, DWORD PTR _token$22191[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29831[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T29830[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29831[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29830[ebp]
	jmp	SHORT $LN10@readArray
$LN3@readArray:

; 598  :       }
; 599  :       if ( token.type_ == tokenArrayEnd )

	cmp	DWORD PTR _token$22191[ebp], 4
	jne	SHORT $LN1@readArray

; 600  :          break;

	jmp	SHORT $LN7@readArray
$LN1@readArray:

; 601  :    }

	jmp	$LN8@readArray
$LN7@readArray:

; 602  :    return true;

	mov	al, 1
$LN10@readArray:

; 603  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR $T29826[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T29831[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?readArray@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::readArray
PUBLIC	??_C@_01GEODFPGF@?8?$AA@			; `string'
PUBLIC	??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@ ; `string'
PUBLIC	?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::decodeDouble
EXTRN	??0Value@Json@@QAE@_K@Z:PROC			; Json::Value::Value
EXTRN	?maxInt64@Value@Json@@2_JB:QWORD		; Json::Value::maxInt64
EXTRN	??0Value@Json@@QAE@_J@Z:PROC			; Json::Value::Value
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:PROC
EXTRN	?maxUInt64@Value@Json@@2_KB:QWORD		; Json::Value::maxUInt64
EXTRN	?minInt64@Value@Json@@2_JB:QWORD		; Json::Value::minInt64
EXTRN	__allmul:PROC
EXTRN	__aulldiv:PROC
;	COMDAT ??_C@_01GEODFPGF@?8?$AA@
CONST	SEGMENT
??_C@_01GEODFPGF@?8?$AA@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@
CONST	SEGMENT
??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@ DB ''' is not a number.', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv208 = -228						; size = 4
tv214 = -224						; size = 4
tv206 = -220						; size = 4
tv213 = -216						; size = 4
tv204 = -212						; size = 4
tv212 = -208						; size = 4
tv132 = -204						; size = 8
tv82 = -196						; size = 4
_this$ = -192						; size = 4
$T29853 = -188						; size = 16
$T29852 = -172						; size = 16
$T29851 = -156						; size = 16
$T29850 = -140						; size = 28
$T29849 = -112						; size = 28
$T29848 = -84						; size = 28
$T29847 = -54						; size = 1
_c$22220 = -53						; size = 1
_inspect$22207 = -52					; size = 4
_isNegative$ = -45					; size = 1
_threshold$ = -44					; size = 8
_isDouble$ = -29					; size = 1
_value$ = -28						; size = 8
_current$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::decodeNumber, COMDAT
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 609  :    bool isDouble = false;

	mov	BYTE PTR _isDouble$[ebp], 0

; 610  :    for ( Location inspect = token.start_; inspect != token.end_; ++inspect )

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _inspect$22207[ebp], ecx
	jmp	SHORT $LN14@decodeNumb
$LN13@decodeNumb:
	mov	edx, DWORD PTR _inspect$22207[ebp]
	add	edx, 1
	mov	DWORD PTR _inspect$22207[ebp], edx
$LN14@decodeNumb:
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _inspect$22207[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN12@decodeNumb

; 611  :    {
; 612  :       isDouble = isDouble  
; 613  :                  ||  in( *inspect, '.', 'e', 'E', '+' )  
; 614  :                  ||  ( *inspect == '-'  &&  inspect != token.start_ );

	movzx	edx, BYTE PTR _isDouble$[ebp]
	test	edx, edx
	jne	SHORT $LN17@decodeNumb
	push	43					; 0000002bH
	push	69					; 00000045H
	push	101					; 00000065H
	push	46					; 0000002eH
	mov	eax, DWORD PTR _inspect$22207[ebp]
	mov	cl, BYTE PTR [eax]
	push	ecx
	call	?in@Json@@YA_NDDDDD@Z			; Json::in
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN17@decodeNumb
	mov	eax, DWORD PTR _inspect$22207[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN18@decodeNumb
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR _inspect$22207[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN17@decodeNumb
$LN18@decodeNumb:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN19@decodeNumb
$LN17@decodeNumb:
	mov	DWORD PTR tv82[ebp], 1
$LN19@decodeNumb:
	mov	cl, BYTE PTR tv82[ebp]
	mov	BYTE PTR _isDouble$[ebp], cl

; 615  :    }

	jmp	SHORT $LN13@decodeNumb
$LN12@decodeNumb:

; 616  :    if ( isDouble )

	movzx	edx, BYTE PTR _isDouble$[ebp]
	test	edx, edx
	je	SHORT $LN11@decodeNumb

; 617  :       return decodeDouble( token );

	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeDouble
	jmp	$LN15@decodeNumb
$LN11@decodeNumb:

; 618  :    Location current = token.start_;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _current$[ebp], edx

; 619  :    bool isNegative = *current == '-';

	mov	eax, DWORD PTR _current$[ebp]
	movsx	ecx, BYTE PTR [eax]
	xor	edx, edx
	cmp	ecx, 45					; 0000002dH
	sete	dl
	mov	BYTE PTR _isNegative$[ebp], dl

; 620  :    if ( isNegative )

	movzx	eax, BYTE PTR _isNegative$[ebp]
	test	eax, eax
	je	SHORT $LN10@decodeNumb

; 621  :       ++current;

	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx
$LN10@decodeNumb:

; 622  :    Value::UInt64 threshold = (isNegative ? Value::UInt64(-Value::minInt64) 
; 623  :                                        : Value::maxUInt64) / 10;

	movzx	edx, BYTE PTR _isNegative$[ebp]
	test	edx, edx
	je	SHORT $LN20@decodeNumb
	mov	eax, DWORD PTR ?minInt64@Value@Json@@2_JB
	neg	eax
	mov	ecx, DWORD PTR ?minInt64@Value@Json@@2_JB+4
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv132[ebp], eax
	mov	DWORD PTR tv132[ebp+4], ecx
	jmp	SHORT $LN21@decodeNumb
$LN20@decodeNumb:
	mov	edx, DWORD PTR ?maxUInt64@Value@Json@@2_KB
	mov	DWORD PTR tv132[ebp], edx
	mov	eax, DWORD PTR ?maxUInt64@Value@Json@@2_KB+4
	mov	DWORD PTR tv132[ebp+4], eax
$LN21@decodeNumb:
	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR tv132[ebp+4]
	push	ecx
	mov	edx, DWORD PTR tv132[ebp]
	push	edx
	call	__aulldiv
	mov	DWORD PTR _threshold$[ebp], eax
	mov	DWORD PTR _threshold$[ebp+4], edx

; 624  :    Value::UInt64 value = 0;

	mov	DWORD PTR _value$[ebp], 0
	mov	DWORD PTR _value$[ebp+4], 0
$LN9@decodeNumb:

; 625  :    while ( current < token.end_ )

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN8@decodeNumb

; 626  :    {
; 627  :       Char c = *current++;

	mov	edx, DWORD PTR _current$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$22220[ebp], al
	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx

; 628  :       if ( c < '0'  ||  c > '9' )

	movsx	edx, BYTE PTR _c$22220[ebp]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN6@decodeNumb
	movsx	eax, BYTE PTR _c$22220[ebp]
	cmp	eax, 57					; 00000039H
	jle	$LN7@decodeNumb
$LN6@decodeNumb:

; 629  :          return addError( "'" + std::string( token.start_, token.end_ ) + "' is not a number.", token );

	push	0
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	ecx, DWORD PTR $T29848[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv212[ebp], eax
	mov	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR tv204[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv204[ebp]
	push	ecx
	push	OFFSET ??_C@_01GEODFPGF@?8?$AA@
	lea	edx, DWORD PTR $T29849[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv213[ebp], eax
	mov	eax, DWORD PTR tv213[ebp]
	mov	DWORD PTR tv206[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv206[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29850[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv214[ebp], eax
	mov	eax, DWORD PTR tv214[ebp]
	mov	DWORD PTR tv208[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv208[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29847[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T29850[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T29849[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29848[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29847[ebp]
	jmp	$LN15@decodeNumb
$LN7@decodeNumb:

; 630  :       if ( value >= threshold )

	mov	edx, DWORD PTR _value$[ebp+4]
	cmp	edx, DWORD PTR _threshold$[ebp+4]
	jb	SHORT $LN5@decodeNumb
	ja	SHORT $LN28@decodeNumb
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _threshold$[ebp]
	jb	SHORT $LN5@decodeNumb
$LN28@decodeNumb:

; 631  :          return decodeDouble( token );

	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeDouble
	jmp	$LN15@decodeNumb
$LN5@decodeNumb:

; 632  :       value = value * 10 + Value::UInt64(c - '0');

	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _value$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	__allmul
	mov	ecx, eax
	mov	esi, edx
	movsx	eax, BYTE PTR _c$22220[ebp]
	sub	eax, 48					; 00000030H
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _value$[ebp], ecx
	mov	DWORD PTR _value$[ebp+4], esi

; 633  :    }

	jmp	$LN9@decodeNumb
$LN8@decodeNumb:

; 634  :    if ( isNegative )

	movzx	edx, BYTE PTR _isNegative$[ebp]
	test	edx, edx
	je	SHORT $LN4@decodeNumb

; 635  :       currentValue() = -Value::Int64( value );

	mov	eax, DWORD PTR _value$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _value$[ebp+4]
	adc	ecx, 0
	neg	ecx
	push	ecx
	push	eax
	lea	ecx, DWORD PTR $T29851[ebp]
	call	??0Value@Json@@QAE@_J@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	lea	edx, DWORD PTR $T29851[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29851[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	jmp	$LN3@decodeNumb
$LN4@decodeNumb:

; 636  :    else if ( value <= Value::UInt64(Value::maxInt64) )

	mov	eax, DWORD PTR _value$[ebp+4]
	cmp	eax, DWORD PTR ?maxInt64@Value@Json@@2_JB+4
	ja	SHORT $LN2@decodeNumb
	jb	SHORT $LN29@decodeNumb
	mov	ecx, DWORD PTR _value$[ebp]
	cmp	ecx, DWORD PTR ?maxInt64@Value@Json@@2_JB
	ja	SHORT $LN2@decodeNumb
$LN29@decodeNumb:

; 637  :       currentValue() = Value::Int64( value );

	mov	edx, DWORD PTR _value$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29852[ebp]
	call	??0Value@Json@@QAE@_J@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T29852[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29852[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 638  :    else

	jmp	SHORT $LN3@decodeNumb
$LN2@decodeNumb:

; 639  :       currentValue() = value;

	mov	edx, DWORD PTR _value$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29853[ebp]
	call	??0Value@Json@@QAE@_K@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T29853[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29853[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN3@decodeNumb:

; 640  :    return true;

	mov	al, 1
$LN15@decodeNumb:

; 641  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR $T29848[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T29849[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$2:
	lea	ecx, DWORD PTR $T29850[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$3:
	lea	ecx, DWORD PTR $T29851[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$4:
	lea	ecx, DWORD PTR $T29852[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$5:
	lea	ecx, DWORD PTR $T29853[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__ehhandler$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::decodeNumber
; Function compile flags: /Odtp
;	COMDAT ?in@Json@@YA_NDDDDD@Z
_TEXT	SEGMENT
tv76 = -4						; size = 4
_c$ = 8							; size = 1
_c1$ = 12						; size = 1
_c2$ = 16						; size = 1
_c3$ = 20						; size = 1
_c4$ = 24						; size = 1
?in@Json@@YA_NDDDDD@Z PROC				; Json::in, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 53   :    return c == c1  ||  c == c2  ||  c == c3  ||  c == c4;

	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c1$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in@2
	movsx	edx, BYTE PTR _c$[ebp]
	movsx	eax, BYTE PTR _c2$[ebp]
	cmp	edx, eax
	je	SHORT $LN3@in@2
	movsx	ecx, BYTE PTR _c$[ebp]
	movsx	edx, BYTE PTR _c3$[ebp]
	cmp	ecx, edx
	je	SHORT $LN3@in@2
	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c4$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in@2
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@in@2
$LN3@in@2:
	mov	DWORD PTR tv76[ebp], 1
$LN4@in@2:
	mov	al, BYTE PTR tv76[ebp]

; 54   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?in@Json@@YA_NDDDDD@Z ENDP				; Json::in
_TEXT	ENDS
EXTRN	??0Value@Json@@QAE@I@Z:PROC			; Json::Value::Value
EXTRN	__imp__strtol:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z$1
__ehfuncinfo$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv87 = -72						; size = 4
tv89 = -68						; size = 4
_this$ = -64						; size = 4
$T29877 = -60						; size = 16
$T29876 = -44						; size = 28
_value$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::decodeHex, COMDAT
; _this$ = ecx

; 645  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	Value::UInt value = strtol(std::string( token.start_, token.end_ ).c_str(), NULL, 16);

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T29876[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv87[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp__strtol
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29876[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 647  : 	currentValue() = value;

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T29877[ebp]
	call	??0Value@Json@@QAE@I@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR $T29877[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29877[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 648  : 	return true;

	mov	al, 1

; 649  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR $T29876[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T29877[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__ehhandler$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeHex@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::decodeHex
PUBLIC	??_C@_03DLDNIBIK@?$CFlf?$AA@			; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
EXTRN	??0Value@Json@@QAE@N@Z:PROC			; Json::Value::Value
EXTRN	__imp__sscanf:PROC
EXTRN	__fltused:DWORD
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf?$AA@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf?$AA@ DB '%lf', 00H		; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$4
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv162 = -232						; size = 4
tv165 = -228						; size = 4
tv160 = -224						; size = 4
tv164 = -220						; size = 4
tv158 = -216						; size = 4
tv78 = -212						; size = 4
_this$ = -208						; size = 4
$T29893 = -204						; size = 16
$T29892 = -188						; size = 28
$T29891 = -160						; size = 28
$T29890 = -132						; size = 28
$T29889 = -101						; size = 1
_buffer$22256 = -100					; size = 28
_buffer$22253 = -72					; size = 32
__$ArrayPad$ = -40					; size = 4
_bufferSize$ = -36					; size = 4
_length$ = -32						; size = 4
_value$ = -28						; size = 8
_count$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::decodeDouble, COMDAT
; _this$ = ecx

; 653  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 654  :    double value = 0;

	fldz
	fstp	QWORD PTR _value$[ebp]

; 655  :    const int bufferSize = 32;

	mov	DWORD PTR _bufferSize$[ebp], 32		; 00000020H

; 656  :    int count;
; 657  :    int length = int(token.end_ - token.start_);

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _length$[ebp], edx

; 658  :    if ( length <= bufferSize )

	cmp	DWORD PTR _length$[ebp], 32		; 00000020H
	jg	SHORT $LN3@decodeDoub

; 659  :    {
; 660  :       Char buffer[bufferSize];
; 661  :       memcpy( buffer, token.start_, length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR _buffer$22253[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 662  :       buffer[length] = 0;

	mov	ecx, DWORD PTR _length$[ebp]
	mov	BYTE PTR _buffer$22253[ebp+ecx], 0

; 663  :       count = sscanf( buffer, "%lf", &value );

	lea	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_03DLDNIBIK@?$CFlf?$AA@
	lea	eax, DWORD PTR _buffer$22253[ebp]
	push	eax
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax

; 664  :    }
; 665  :    else

	jmp	SHORT $LN2@decodeDoub
$LN3@decodeDoub:

; 666  :    {
; 667  :       std::string buffer( token.start_, token.end_ );

	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR _buffer$22256[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 668  :       count = sscanf( buffer.c_str(), "%lf", &value );

	lea	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_03DLDNIBIK@?$CFlf?$AA@
	lea	ecx, DWORD PTR _buffer$22256[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax

; 669  :    }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$22256[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@decodeDoub:

; 670  : 
; 671  :    if ( count != 1 )

	cmp	DWORD PTR _count$[ebp], 1
	je	$LN1@decodeDoub

; 672  :       return addError( "'" + std::string( token.start_, token.end_ ) + "' is not a number.", token );

	push	0
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR $T29890[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv78[ebp], eax
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv158[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv158[ebp]
	push	eax
	push	OFFSET ??_C@_01GEODFPGF@?8?$AA@
	lea	ecx, DWORD PTR $T29891[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv164[ebp], eax
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR tv160[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29892[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv165[ebp], eax
	mov	edx, DWORD PTR tv165[ebp]
	mov	DWORD PTR tv162[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv162[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29889[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T29892[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T29891[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29890[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29889[ebp]
	jmp	SHORT $LN4@decodeDoub
$LN1@decodeDoub:

; 673  :    currentValue() = value;

	sub	esp, 8
	fld	QWORD PTR _value$[ebp]
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR $T29893[ebp]
	call	??0Value@Json@@QAE@N@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T29893[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29893[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 674  :    return true;

	mov	al, 1
$LN4@decodeDoub:

; 675  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR _buffer$22256[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T29890[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$2:
	lea	ecx, DWORD PTR $T29891[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$3:
	lea	ecx, DWORD PTR $T29892[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$4:
	lea	ecx, DWORD PTR $T29893[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__ehhandler$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::decodeDouble
PUBLIC	__$ArrayPad$
EXTRN	??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Json::Value::Value
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$1
__ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T29914 = -69						; size = 1
$T29913 = -68						; size = 16
$T29912 = -45						; size = 1
_decoded$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::decodeString, COMDAT
; _this$ = ecx

; 680  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 681  :    std::string decoded;

	lea	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 682  :    if ( !decodeString( token, decoded ) )

	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@decodeStri

; 683  :       return false;

	mov	BYTE PTR $T29912[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29912[ebp]
	jmp	SHORT $LN2@decodeStri
$LN1@decodeStri:

; 684  :    currentValue() = decoded;

	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29913[ebp]
	call	??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::Value
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T29913[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T29913[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 685  :    return true;

	mov	BYTE PTR $T29914[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29914[ebp]
$LN2@decodeStri:

; 686  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR _decoded$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T29913[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::decodeString
PUBLIC	??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@ ; `string'
PUBLIC	?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeCodePoint
PUBLIC	??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@ ; `string'
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z:PROC
EXTRN	__imp_?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z:PROC
;	COMDAT ??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@
CONST	SEGMENT
??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@ DB 'Bad escape '
	DB	'sequence in string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@
CONST	SEGMENT
??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@ DB 'Empty esc'
	DB	'ape sequence in string', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv171 = -136						; size = 4
tv86 = -132						; size = 4
tv92 = -128						; size = 4
_this$ = -124						; size = 4
$T29929 = -120						; size = 28
$T29928 = -89						; size = 1
$T29927 = -88						; size = 28
$T29926 = -60						; size = 28
$T29925 = -29						; size = 1
_unicode$22304 = -28					; size = 4
_escape$22290 = -22					; size = 1
_c$22282 = -21						; size = 1
_end$ = -20						; size = 4
_current$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
_decoded$ = 12						; size = 4
?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Reader::decodeString, COMDAT
; _this$ = ecx

; 691  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 692  :    decoded.reserve( token.end_ - token.start_ - 2 );

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sub	edx, 2
	push	edx
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 693  :    Location current = token.start_ + 1; // skip '"'

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx

; 694  :    Location end = token.end_ - 1;      // do not include '"'

	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
$LN20@decodeStri@2:

; 695  :    while ( current != end )

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	je	$LN19@decodeStri@2

; 696  :    {
; 697  :       Char c = *current++;

	mov	edx, DWORD PTR _current$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$22282[ebp], al
	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx

; 698  :       if ( c == '"' )

	movsx	edx, BYTE PTR _c$22282[ebp]
	cmp	edx, 34					; 00000022H
	jne	SHORT $LN18@decodeStri@2
	jmp	$LN19@decodeStri@2

; 699  :          break;

	jmp	$LN17@decodeStri@2
$LN18@decodeStri@2:

; 700  :       else if ( c == '\\' )

	movsx	eax, BYTE PTR _c$22282[ebp]
	cmp	eax, 92					; 0000005cH
	jne	$LN16@decodeStri@2

; 701  :       {
; 702  :          if ( current == end )

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jne	SHORT $LN15@decodeStri@2

; 703  :             return addError( "Empty escape sequence in string", token, current );

	push	OFFSET ??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@
	lea	ecx, DWORD PTR $T29926[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29926[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29925[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29926[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29925[ebp]
	jmp	$LN21@decodeStri@2
$LN15@decodeStri@2:

; 704  :          Char escape = *current++;

	mov	edx, DWORD PTR _current$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _escape$22290[ebp], al
	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx

; 705  :          switch ( escape )

	movsx	edx, BYTE PTR _escape$22290[ebp]
	mov	DWORD PTR tv92[ebp], edx
	mov	eax, DWORD PTR tv92[ebp]
	sub	eax, 34					; 00000022H
	mov	DWORD PTR tv92[ebp], eax
	cmp	DWORD PTR tv92[ebp], 83			; 00000053H
	ja	$LN2@decodeStri@2
	mov	ecx, DWORD PTR tv92[ebp]
	movzx	edx, BYTE PTR $LN26@decodeStri@2[ecx]
	jmp	DWORD PTR $LN28@decodeStri@2[edx*4]
$LN12@decodeStri@2:

; 706  :          {
; 707  :          case '"': decoded += '"'; break;

	push	34					; 00000022H
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN11@decodeStri@2:

; 708  :          case '/': decoded += '/'; break;

	push	47					; 0000002fH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN10@decodeStri@2:

; 709  :          case '\\': decoded += '\\'; break;

	push	92					; 0000005cH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN9@decodeStri@2:

; 710  :          case 'b': decoded += '\b'; break;

	push	8
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN8@decodeStri@2:

; 711  :          case 'f': decoded += '\f'; break;

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN7@decodeStri@2:

; 712  :          case 'n': decoded += '\n'; break;

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN6@decodeStri@2:

; 713  :          case 'r': decoded += '\r'; break;

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN5@decodeStri@2:

; 714  :          case 't': decoded += '\t'; break;

	push	9
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN4@decodeStri@2:

; 715  :          case 'u':
; 716  :             {
; 717  :                unsigned int unicode;
; 718  :                if ( !decodeUnicodeCodePoint( token, current, end, unicode ) )

	lea	eax, DWORD PTR _unicode$22304[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeCodePoint
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@decodeStri@2

; 719  :                   return false;

	xor	al, al
	jmp	$LN21@decodeStri@2
$LN3@decodeStri@2:

; 720  :                decoded += codePointToUTF8(unicode);

	mov	edx, DWORD PTR _unicode$22304[ebp]
	push	edx
	lea	eax, DWORD PTR $T29927[ebp]
	push	eax
	call	?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Json::codePointToUTF8
	add	esp, 8
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv171[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv171[ebp]
	push	edx
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29927[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 721  :             }
; 722  :             break;

	jmp	SHORT $LN13@decodeStri@2
$LN2@decodeStri@2:

; 723  :          default:
; 724  :             return addError( "Bad escape sequence in string", token, current );

	push	OFFSET ??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@
	lea	ecx, DWORD PTR $T29929[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29929[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29928[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29929[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29928[ebp]
	jmp	SHORT $LN21@decodeStri@2
$LN13@decodeStri@2:

; 725  :          }
; 726  :       }
; 727  :       else

	jmp	SHORT $LN17@decodeStri@2
$LN16@decodeStri@2:

; 728  :       {
; 729  :          decoded += c;

	mov	al, BYTE PTR _c$22282[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
$LN17@decodeStri@2:

; 730  :       }
; 731  :    }

	jmp	$LN20@decodeStri@2
$LN19@decodeStri@2:

; 732  :    return true;

	mov	al, 1
$LN21@decodeStri@2:

; 733  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN28@decodeStri@2:
	DD	$LN12@decodeStri@2
	DD	$LN11@decodeStri@2
	DD	$LN10@decodeStri@2
	DD	$LN9@decodeStri@2
	DD	$LN8@decodeStri@2
	DD	$LN7@decodeStri@2
	DD	$LN6@decodeStri@2
	DD	$LN5@decodeStri@2
	DD	$LN4@decodeStri@2
	DD	$LN2@decodeStri@2
$LN26@decodeStri@2:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	9
	DB	9
	DB	9
	DB	4
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	5
	DB	9
	DB	9
	DB	9
	DB	6
	DB	9
	DB	7
	DB	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	lea	ecx, DWORD PTR $T29926[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
	lea	ecx, DWORD PTR $T29927[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
	lea	ecx, DWORD PTR $T29929[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Reader::decodeString
PUBLIC	__$ArrayPad$
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z:PROC
EXTRN	__imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0
__ehfuncinfo$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T29946 = -48						; size = 4
_result$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_cp$ = 12						; size = 4
?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; Json::codePointToUTF8, COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T29946[ebp], 0

; 75   :    std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 76   :    
; 77   :    // based on description from http://en.wikipedia.org/wiki/UTF-8
; 78   : 
; 79   :    if (cp <= 0x7f) 

	cmp	DWORD PTR _cp$[ebp], 127		; 0000007fH
	ja	SHORT $LN7@codePointT

; 80   :    {
; 81   :       result.resize(1);

	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 82   :       result[0] = static_cast<char>(cp);

	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	cl, BYTE PTR _cp$[ebp]
	mov	BYTE PTR [eax], cl
	jmp	$LN6@codePointT
$LN7@codePointT:

; 83   :    } 
; 84   :    else if (cp <= 0x7FF) 

	cmp	DWORD PTR _cp$[ebp], 2047		; 000007ffH
	ja	SHORT $LN5@codePointT

; 85   :    {
; 86   :       result.resize(2);

	push	2
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 87   :       result[1] = static_cast<char>(0x80 | (0x3f & cp));

	mov	ebx, DWORD PTR _cp$[ebp]
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 88   :       result[0] = static_cast<char>(0xC0 | (0x1f & (cp >> 6)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 6
	and	ebx, 31					; 0000001fH
	or	ebx, 192				; 000000c0H
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl
	jmp	$LN6@codePointT
$LN5@codePointT:

; 89   :    } 
; 90   :    else if (cp <= 0xFFFF) 

	cmp	DWORD PTR _cp$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN3@codePointT

; 91   :    {
; 92   :       result.resize(3);

	push	3
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 93   :       result[2] = static_cast<char>(0x80 | (0x3f & cp));

	mov	ebx, DWORD PTR _cp$[ebp]
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	2
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 94   :       result[1] = 0x80 | static_cast<char>((0x3f & (cp >> 6)));

	mov	edx, DWORD PTR _cp$[ebp]
	shr	edx, 6
	and	edx, 63					; 0000003fH
	movsx	ebx, dl
	or	ebx, 128				; 00000080H
	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 95   :       result[0] = 0xE0 | static_cast<char>((0xf & (cp >> 12)));

	mov	eax, DWORD PTR _cp$[ebp]
	shr	eax, 12					; 0000000cH
	and	eax, 15					; 0000000fH
	movsx	ebx, al
	or	ebx, 224				; 000000e0H
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl
	jmp	$LN6@codePointT
$LN3@codePointT:

; 96   :    }
; 97   :    else if (cp <= 0x10FFFF) 

	cmp	DWORD PTR _cp$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN6@codePointT

; 98   :    {
; 99   :       result.resize(4);

	push	4
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 100  :       result[3] = static_cast<char>(0x80 | (0x3f & cp));

	mov	ebx, DWORD PTR _cp$[ebp]
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	3
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 101  :       result[2] = static_cast<char>(0x80 | (0x3f & (cp >> 6)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 6
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	2
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 102  :       result[1] = static_cast<char>(0x80 | (0x3f & (cp >> 12)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 12					; 0000000cH
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 103  :       result[0] = static_cast<char>(0xF0 | (0x7 & (cp >> 18)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 18					; 00000012H
	and	ebx, 7
	or	ebx, 240				; 000000f0H
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl
$LN6@codePointT:

; 104  :    }
; 105  : 
; 106  :    return result;

	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T29946[ebp]
	or	edx, 1
	mov	DWORD PTR $T29946[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$1:
	mov	eax, DWORD PTR $T29946[ebp]
	and	eax, 1
	je	$LN12@codePointT
	and	DWORD PTR $T29946[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN12@codePointT:
	ret	0
__ehhandler$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; Json::codePointToUTF8
PUBLIC	??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@ ; `string'
PUBLIC	??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@ ; `string'
PUBLIC	?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeEscapeSequence
;	COMDAT ??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@
CONST	SEGMENT
??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@ DB 'expecting '
	DB	'another \u token to begin the second half of a unicode surrog'
	DB	'ate pair', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@
CONST	SEGMENT
??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@ DB 'additional si'
	DB	'x characters expected to parse unicode surrogate pair.', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1
__ehfuncinfo$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T29959 = -80						; size = 28
$T29958 = -49						; size = 1
$T29957 = -48						; size = 28
$T29956 = -17						; size = 1
_surrogatePair$22325 = -16				; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
_current$ = 12						; size = 4
_end$ = 16						; size = 4
_unicode$ = 20						; size = 4
?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z PROC ; Json::Reader::decodeUnicodeCodePoint, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 741  : 
; 742  :    if ( !decodeUnicodeEscapeSequence( token, current, end, unicode ) )

	mov	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeEscapeSequence
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@decodeUnic

; 743  :       return false;

	xor	al, al
	jmp	$LN8@decodeUnic
$LN7@decodeUnic:

; 744  :    if (unicode >= 0xD800 && unicode <= 0xDBFF)

	mov	edx, DWORD PTR _unicode$[ebp]
	cmp	DWORD PTR [edx], 55296			; 0000d800H
	jb	$LN6@decodeUnic
	mov	eax, DWORD PTR _unicode$[ebp]
	cmp	DWORD PTR [eax], 56319			; 0000dbffH
	ja	$LN6@decodeUnic

; 745  :    {
; 746  :       // surrogate pairs
; 747  :       if (end - current < 6)

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, DWORD PTR [ecx]
	cmp	edx, 6
	jge	SHORT $LN5@decodeUnic

; 748  :          return addError( "additional six characters expected to parse unicode surrogate pair.", token, current );

	push	OFFSET ??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@
	lea	ecx, DWORD PTR $T29957[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	lea	eax, DWORD PTR $T29957[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29956[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29957[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29956[ebp]
	jmp	$LN8@decodeUnic
$LN5@decodeUnic:

; 749  :       unsigned int surrogatePair;
; 750  :       if (*(current++) == '\\' && *(current++)== 'u')

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx], edx
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN4@decodeUnic
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx], eax
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN4@decodeUnic

; 751  :       {
; 752  :          if (decodeUnicodeEscapeSequence( token, current, end, surrogatePair ))

	lea	eax, DWORD PTR _surrogatePair$22325[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeEscapeSequence
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@decodeUnic

; 753  :          {
; 754  :             unicode = 0x10000 + ((unicode & 0x3FF) << 10) + (surrogatePair & 0x3FF);

	mov	edx, DWORD PTR _unicode$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1023				; 000003ffH
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _surrogatePair$22325[ebp]
	and	ecx, 1023				; 000003ffH
	lea	edx, DWORD PTR [eax+ecx+65536]
	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], edx

; 755  :          } 
; 756  :          else

	jmp	SHORT $LN2@decodeUnic
$LN3@decodeUnic:

; 757  :             return false;

	xor	al, al
	jmp	SHORT $LN8@decodeUnic
$LN2@decodeUnic:

; 758  :       } 
; 759  :       else

	jmp	SHORT $LN6@decodeUnic
$LN4@decodeUnic:

; 760  :          return addError( "expecting another \\u token to begin the second half of a unicode surrogate pair", token, current );

	push	OFFSET ??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@
	lea	ecx, DWORD PTR $T29959[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T29959[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29958[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29959[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29958[ebp]
	jmp	SHORT $LN8@decodeUnic
$LN6@decodeUnic:

; 761  :    }
; 762  :    return true;

	mov	al, 1
$LN8@decodeUnic:

; 763  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0:
	lea	ecx, DWORD PTR $T29957[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1:
	lea	ecx, DWORD PTR $T29959[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ENDP ; Json::Reader::decodeUnicodeCodePoint
PUBLIC	??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@ ; `string'
PUBLIC	??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@ ; `string'
;	COMDAT ??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@
CONST	SEGMENT
??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@ DB 'Bad unicode'
	DB	' escape sequence in string: hexadecimal digit expected.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@
CONST	SEGMENT
??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@ DB 'Bad unicode'
	DB	' escape sequence in string: four digits expected.', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1
__ehfuncinfo$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T29973 = -80						; size = 28
$T29972 = -49						; size = 1
$T29971 = -48						; size = 28
$T29970 = -18						; size = 1
_c$22348 = -17						; size = 1
_index$22344 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
_current$ = 12						; size = 4
_end$ = 16						; size = 4
_unicode$ = 20						; size = 4
?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z PROC ; Json::Reader::decodeUnicodeEscapeSequence, COMDAT
; _this$ = ecx

; 770  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 771  :    if ( end - current < 4 )

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR [eax]
	cmp	ecx, 4
	jge	SHORT $LN10@decodeUnic@2

; 772  :       return addError( "Bad unicode escape sequence in string: four digits expected.", token, current );

	push	OFFSET ??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@
	lea	ecx, DWORD PTR $T29971[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29971[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29970[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29971[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29970[ebp]
	jmp	$LN11@decodeUnic@2
$LN10@decodeUnic@2:

; 773  :    unicode = 0;

	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], 0

; 774  :    for ( int index =0; index < 4; ++index )

	mov	DWORD PTR _index$22344[ebp], 0
	jmp	SHORT $LN9@decodeUnic@2
$LN8@decodeUnic@2:
	mov	ecx, DWORD PTR _index$22344[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$22344[ebp], ecx
$LN9@decodeUnic@2:
	cmp	DWORD PTR _index$22344[ebp], 4
	jge	$LN7@decodeUnic@2

; 775  :    {
; 776  :       Char c = *current++;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$22348[ebp], cl
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx], eax

; 777  :       unicode *= 16;

	mov	edx, DWORD PTR _unicode$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [ecx], eax

; 778  :       if ( c >= '0'  &&  c <= '9' )

	movsx	edx, BYTE PTR _c$22348[ebp]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN6@decodeUnic@2
	movsx	eax, BYTE PTR _c$22348[ebp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN6@decodeUnic@2

; 779  :          unicode += c - '0';

	movsx	ecx, BYTE PTR _c$22348[ebp]
	mov	edx, DWORD PTR _unicode$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	edx, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	$LN5@decodeUnic@2
$LN6@decodeUnic@2:

; 780  :       else if ( c >= 'a'  &&  c <= 'f' )

	movsx	eax, BYTE PTR _c$22348[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN4@decodeUnic@2
	movsx	ecx, BYTE PTR _c$22348[ebp]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN4@decodeUnic@2

; 781  :          unicode += c - 'a' + 10;

	movsx	edx, BYTE PTR _c$22348[ebp]
	mov	eax, DWORD PTR _unicode$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-87]
	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN5@decodeUnic@2
$LN4@decodeUnic@2:

; 782  :       else if ( c >= 'A'  &&  c <= 'F' )

	movsx	ecx, BYTE PTR _c$22348[ebp]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN2@decodeUnic@2
	movsx	edx, BYTE PTR _c$22348[ebp]
	cmp	edx, 70					; 00000046H
	jg	SHORT $LN2@decodeUnic@2

; 783  :          unicode += c - 'A' + 10;

	movsx	eax, BYTE PTR _c$22348[ebp]
	mov	ecx, DWORD PTR _unicode$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-55]
	mov	ecx, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [ecx], eax

; 784  :       else

	jmp	SHORT $LN5@decodeUnic@2
$LN2@decodeUnic@2:

; 785  :          return addError( "Bad unicode escape sequence in string: hexadecimal digit expected.", token, current );

	push	OFFSET ??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@
	lea	ecx, DWORD PTR $T29973[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T29973[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T29972[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T29973[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T29972[ebp]
	jmp	SHORT $LN11@decodeUnic@2
$LN5@decodeUnic@2:

; 786  :    }

	jmp	$LN8@decodeUnic@2
$LN7@decodeUnic@2:

; 787  :    return true;

	mov	al, 1
$LN11@decodeUnic@2:

; 788  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0:
	lea	ecx, DWORD PTR $T29971[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1:
	lea	ecx, DWORD PTR $T29973[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ENDP ; Json::Reader::decodeUnicodeEscapeSequence
PUBLIC	??1ErrorInfo@Reader@Json@@QAE@XZ		; Json::Reader::ErrorInfo::~ErrorInfo
PUBLIC	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
PUBLIC	??0ErrorInfo@Reader@Json@@QAE@XZ		; Json::Reader::ErrorInfo::ErrorInfo
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z$0
__ehfuncinfo$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T29985 = -61						; size = 1
_info$ = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_token$ = 12						; size = 4
_extra$ = 16						; size = 4
?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z PROC ; Json::Reader::addError, COMDAT
; _this$ = ecx

; 795  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 796  :    ErrorInfo info;

	lea	ecx, DWORD PTR _info$[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 797  :    info.token_ = token;

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _info$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _info$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _info$[ebp+8], eax

; 798  :    info.message_ = message;

	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _info$[ebp+12]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 799  :    info.extra_ = extra;

	mov	edx, DWORD PTR _extra$[ebp]
	mov	DWORD PTR _info$[ebp+40], edx

; 800  :    errors_.push_back( info );

	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back

; 801  :    return false;

	mov	BYTE PTR $T29985[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _info$[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
	mov	al, BYTE PTR $T29985[ebp]

; 802  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z$0:
	lea	ecx, DWORD PTR _info$[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__ehhandler$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ENDP ; Json::Reader::addError
; Function compile flags: /Odtp
;	COMDAT ??0ErrorInfo@Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ErrorInfo@Reader@Json@@QAE@XZ PROC			; Json::Reader::ErrorInfo::ErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ErrorInfo@Reader@Json@@QAE@XZ ENDP			; Json::Reader::ErrorInfo::ErrorInfo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1ErrorInfo@Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ErrorInfo@Reader@Json@@QAE@XZ PROC			; Json::Reader::ErrorInfo::~ErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1ErrorInfo@Reader@Json@@QAE@XZ ENDP			; Json::Reader::ErrorInfo::~ErrorInfo
_TEXT	ENDS
PUBLIC	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
PUBLIC	?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
; Function compile flags: /Odtp
;	COMDAT ?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_errorCount$ = -16					; size = 4
_skip$ = -12						; size = 12
_skipUntilToken$ = 8					; size = 4
?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z PROC ; Json::Reader::recoverFromError, COMDAT
; _this$ = ecx

; 807  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 808  :    int errorCount = int(errors_.size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
	mov	DWORD PTR _errorCount$[ebp], eax
$LN5@recoverFro:

; 809  :    Token skip;
; 810  :    while ( true )

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@recoverFro

; 811  :    {
; 812  :       if ( !readToken(skip) )

	lea	ecx, DWORD PTR _skip$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@recoverFro

; 813  :          errors_.resize( errorCount ); // discard errors caused by recovery

	mov	eax, DWORD PTR _errorCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
$LN3@recoverFro:

; 814  :       if ( skip.type_ == skipUntilToken  ||  skip.type_ == tokenEndOfStream )

	mov	ecx, DWORD PTR _skip$[ebp]
	cmp	ecx, DWORD PTR _skipUntilToken$[ebp]
	je	SHORT $LN1@recoverFro
	cmp	DWORD PTR _skip$[ebp], 0
	jne	SHORT $LN2@recoverFro
$LN1@recoverFro:

; 815  :          break;

	jmp	SHORT $LN4@recoverFro
$LN2@recoverFro:

; 816  :    }

	jmp	SHORT $LN5@recoverFro
$LN4@recoverFro:

; 817  :    errors_.resize( errorCount );

	mov	edx, DWORD PTR _errorCount$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize

; 818  :    return false;

	xor	al, al

; 819  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ENDP ; Json::Reader::recoverFromError
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
_token$ = 12						; size = 4
_skipUntilToken$ = 16					; size = 4
?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z PROC ; Json::Reader::addErrorAndRecover, COMDAT
; _this$ = ecx

; 826  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 827  :    addError( message, token );

	push	0
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError

; 828  :    return recoverFromError( skipUntilToken );

	mov	edx, DWORD PTR _skipUntilToken$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError

; 829  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ENDP ; Json::Reader::addErrorAndRecover
_TEXT	ENDS
PUBLIC	?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
; Function compile flags: /Odtp
;	COMDAT ?currentValue@Reader@Json@@AAEAAVValue@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?currentValue@Reader@Json@@AAEAAVValue@2@XZ PROC	; Json::Reader::currentValue, COMDAT
; _this$ = ecx

; 834  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 835  :    return *(nodes_.top());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
	mov	eax, DWORD PTR [eax]

; 836  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?currentValue@Reader@Json@@AAEAAVValue@2@XZ ENDP	; Json::Reader::currentValue
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getNextChar@Reader@Json@@AAEDXZ
_TEXT	SEGMENT
tv72 = -5						; size = 1
_this$ = -4						; size = 4
?getNextChar@Reader@Json@@AAEDXZ PROC			; Json::Reader::getNextChar, COMDAT
; _this$ = ecx

; 841  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 842  :    if ( current_ == end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+72]
	jne	SHORT $LN1@getNextCha

; 843  :       return 0;

	xor	al, al
	jmp	SHORT $LN2@getNextCha
$LN1@getNextCha:

; 844  :    return *current_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv72[ebp], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], ecx
	mov	al, BYTE PTR tv72[ebp]
$LN2@getNextCha:

; 845  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNextChar@Reader@Json@@AAEDXZ ENDP			; Json::Reader::getNextChar
_TEXT	ENDS
PUBLIC	?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z ; Json::Reader::getLocationLineAndColumn
; Function compile flags: /Odtp
;	COMDAT ?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_c$22406 = -9						; size = 1
_lastLineStart$ = -8					; size = 4
_current$ = -4						; size = 4
_location$ = 8						; size = 4
_line$ = 12						; size = 4
_column$ = 16						; size = 4
?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z PROC ; Json::Reader::getLocationLineAndColumn, COMDAT
; _this$ = ecx

; 852  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 853  :    Location current = begin_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _current$[ebp], ecx

; 854  :    Location lastLineStart = current;

	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR _lastLineStart$[ebp], edx

; 855  :    line = 0;

	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax], 0
$LN6@getLocatio:

; 856  :    while ( current < location  &&  current != end_ )

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR _location$[ebp]
	jae	SHORT $LN5@getLocatio
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	cmp	eax, DWORD PTR [edx+72]
	je	SHORT $LN5@getLocatio

; 857  :    {
; 858  :       Char c = *current++;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$22406[ebp], dl
	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 1
	mov	DWORD PTR _current$[ebp], eax

; 859  :       if ( c == '\r' )

	movsx	ecx, BYTE PTR _c$22406[ebp]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@getLocatio

; 860  :       {
; 861  :          if ( *current == '\n' )

	mov	edx, DWORD PTR _current$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN3@getLocatio

; 862  :             ++current;

	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx
$LN3@getLocatio:

; 863  :          lastLineStart = current;

	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR _lastLineStart$[ebp], edx

; 864  :          ++line;

	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@getLocatio
$LN4@getLocatio:

; 865  :       }
; 866  :       else if ( c == '\n' )

	movsx	eax, BYTE PTR _c$22406[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@getLocatio

; 867  :       {
; 868  :          lastLineStart = current;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR _lastLineStart$[ebp], ecx

; 869  :          ++line;

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@getLocatio:

; 870  :       }
; 871  :    }

	jmp	SHORT $LN6@getLocatio
$LN5@getLocatio:

; 872  :    // column & line start at 1
; 873  :    column = int(location - lastLineStart) + 1;

	mov	edx, DWORD PTR _location$[ebp]
	sub	edx, DWORD PTR _lastLineStart$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _column$[ebp]
	mov	DWORD PTR [eax], edx

; 874  :    ++line;

	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax], edx

; 875  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z ENDP ; Json::Reader::getLocationLineAndColumn
_TEXT	ENDS
PUBLIC	??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::Reader::getLocationLineAndColumn
EXTRN	__imp__sprintf:PROC
;	COMDAT ??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@ DB 'Line %d, Column '
	DB	'%d', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
_this$ = -72						; size = 4
$T30013 = -68						; size = 4
_buffer$ = -64						; size = 51
__$ArrayPad$ = -12					; size = 4
_line$ = -8						; size = 4
_column$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_location$ = 12						; size = 4
?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; Json::Reader::getLocationLineAndColumn, COMDAT
; _this$ = ecx

; 880  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T30013[ebp], 0

; 881  :    int line, column;
; 882  :    getLocationLineAndColumn( location, line, column );

	lea	eax, DWORD PTR _column$[ebp]
	push	eax
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _location$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z ; Json::Reader::getLocationLineAndColumn

; 883  :    char buffer[18+16+16+1];
; 884  :    sprintf( buffer, "Line %d, Column %d", line, column );

	mov	eax, DWORD PTR _column$[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 885  :    return buffer;

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T30013[ebp]
	or	ecx, 1
	mov	DWORD PTR $T30013[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 886  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; Json::Reader::getLocationLineAndColumn
_TEXT	ENDS
PUBLIC	??_C@_04JBAOJHKB@See?5?$AA@			; `string'
PUBLIC	??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@	; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5?$AA@			; `string'
PUBLIC	??_C@_02KAOAMBHJ@?$CK?5?$AA@			; `string'
PUBLIC	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
PUBLIC	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=
PUBLIC	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
PUBLIC	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++
PUBLIC	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
PUBLIC	__$ArrayPad$
PUBLIC	?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Reader::getFormatedErrorMessages
;	COMDAT ??_C@_04JBAOJHKB@See?5?$AA@
CONST	SEGMENT
??_C@_04JBAOJHKB@See?5?$AA@ DB 'See ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@
CONST	SEGMENT
??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@ DB ' for detail.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5?$AA@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5?$AA@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAOAMBHJ@?$CK?5?$AA@
CONST	SEGMENT
??_C@_02KAOAMBHJ@?$CK?5?$AA@ DB '* ', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$9
	DD	00H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4
	DD	05H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$5
	DD	01H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$6
	DD	07H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$7
	DD	08H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$8
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv193 = -368						; size = 4
tv205 = -364						; size = 4
tv191 = -360						; size = 4
tv204 = -356						; size = 4
tv189 = -352						; size = 4
tv203 = -348						; size = 4
tv187 = -344						; size = 4
tv202 = -340						; size = 4
tv185 = -336						; size = 4
tv201 = -332						; size = 4
tv183 = -328						; size = 4
tv200 = -324						; size = 4
tv181 = -320						; size = 4
tv199 = -316						; size = 4
tv179 = -312						; size = 4
tv65 = -308						; size = 4
_this$ = -304						; size = 4
$T30037 = -300						; size = 4
$T30026 = -296						; size = 28
$T30025 = -268						; size = 28
$T30024 = -240						; size = 28
$T30023 = -212						; size = 28
$T30022 = -184						; size = 28
$T30021 = -156						; size = 28
$T30020 = -128						; size = 28
$T30019 = -100						; size = 28
$T30018 = -72						; size = 12
_error$22540 = -60					; size = 4
_itError$22534 = -56					; size = 12
_formattedMessage$ = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Reader::getFormatedErrorMessages, COMDAT
; _this$ = ecx

; 891  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T30037[ebp], 0

; 892  :    std::string formattedMessage;

	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 893  :    for ( Errors::const_iterator itError = errors_.begin();

	lea	eax, DWORD PTR _itError$22534[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	jmp	SHORT $LN4@getFormate
$LN3@getFormate:

; 894  :          itError != errors_.end();
; 895  :          ++itError )

	lea	ecx, DWORD PTR _itError$22534[ebp]
	call	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++
$LN4@getFormate:
	lea	ecx, DWORD PTR $T30018[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	push	eax
	lea	ecx, DWORD PTR _itError$22534[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=
	movzx	edx, al
	test	edx, edx
	je	$LN2@getFormate

; 896  :    {
; 897  :       const ErrorInfo &error = *itError;

	lea	ecx, DWORD PTR _itError$22534[ebp]
	call	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
	mov	DWORD PTR _error$22540[ebp], eax

; 898  :       formattedMessage += "* " + getLocationLineAndColumn( error.token_.start_ ) + "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _error$22540[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T30019[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::Reader::getLocationLineAndColumn
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv179[ebp]
	push	ecx
	push	OFFSET ??_C@_02KAOAMBHJ@?$CK?5?$AA@
	lea	edx, DWORD PTR $T30020[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv199[ebp], eax
	mov	eax, DWORD PTR tv199[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv181[ebp]
	push	ecx
	lea	edx, DWORD PTR $T30021[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv200[ebp], eax
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR tv183[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv183[ebp]
	push	ecx
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T30021[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T30020[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T30019[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 899  :       formattedMessage += "  " + error.message_ + "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	edx, DWORD PTR _error$22540[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_02KNHHEEKP@?5?5?$AA@
	lea	eax, DWORD PTR $T30022[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv201[ebp], eax
	mov	ecx, DWORD PTR tv201[ebp]
	mov	DWORD PTR tv185[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR tv185[ebp]
	push	edx
	lea	eax, DWORD PTR $T30023[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR tv202[ebp]
	mov	DWORD PTR tv187[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR tv187[ebp]
	push	edx
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T30023[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T30022[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 900  :       if ( error.extra_ )

	mov	eax, DWORD PTR _error$22540[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN1@getFormate

; 901  :          formattedMessage += "See " + getLocationLineAndColumn( error.extra_ ) + " for detail.\n";

	push	OFFSET ??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@
	mov	ecx, DWORD PTR _error$22540[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	lea	eax, DWORD PTR $T30024[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::Reader::getLocationLineAndColumn
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR tv189[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv189[ebp]
	push	edx
	push	OFFSET ??_C@_04JBAOJHKB@See?5?$AA@
	lea	eax, DWORD PTR $T30025[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR tv191[ebp]
	push	edx
	lea	eax, DWORD PTR $T30026[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv205[ebp], eax
	mov	ecx, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv193[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv193[ebp]
	push	edx
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T30026[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T30025[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T30024[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@getFormate:

; 902  :    }

	jmp	$LN3@getFormate
$LN2@getFormate:

; 903  :    return formattedMessage;

	lea	eax, DWORD PTR _formattedMessage$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T30037[ebp]
	or	ecx, 1
	mov	DWORD PTR $T30037[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 904  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
	lea	ecx, DWORD PTR $T30019[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
	lea	ecx, DWORD PTR $T30020[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3:
	lea	ecx, DWORD PTR $T30021[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4:
	lea	ecx, DWORD PTR $T30022[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$5:
	lea	ecx, DWORD PTR $T30023[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$6:
	lea	ecx, DWORD PTR $T30024[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$7:
	lea	ecx, DWORD PTR $T30025[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$8:
	lea	ecx, DWORD PTR $T30026[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$9:
	mov	eax, DWORD PTR $T30037[ebp]
	and	eax, 1
	je	$LN17@getFormate
	and	DWORD PTR $T30037[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN17@getFormate:
	ret	0
__ehhandler$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Reader::getFormatedErrorMessages
PUBLIC	??1Reader@Json@@QAE@XZ				; Json::Reader::~Reader
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	__$ArrayPad$
PUBLIC	??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z ; Json::operator>>
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$1
__ehfuncinfo$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
_TEXT	SEGMENT
tv85 = -220						; size = 4
tv65 = -216						; size = 4
$T30051 = -212						; size = 4
$T30049 = -208						; size = 28
$T30048 = -180						; size = 40
_reader$ = -140						; size = 120
__$ArrayPad$ = -20					; size = 4
_ok$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_sin$ = 8						; size = 4
_root$ = 12						; size = 4
??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z PROC ; Json::operator>>, COMDAT

; 908  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 909  :     Json::Reader reader;

	lea	ecx, DWORD PTR _reader$[ebp]
	call	??0Reader@Json@@QAE@XZ			; Json::Reader::Reader
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 910  :     bool ok = reader.parse(sin, root, true);

	push	1
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sin$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _reader$[ebp]
	call	?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
	mov	BYTE PTR _ok$[ebp], al

; 911  :     //JSON_ASSERT( ok );
; 912  :     if (!ok) throw std::runtime_error(reader.getFormatedErrorMessages());

	movzx	edx, BYTE PTR _ok$[ebp]
	test	edx, edx
	jne	SHORT $LN1@operator
	lea	eax, DWORD PTR $T30049[ebp]
	push	eax
	lea	ecx, DWORD PTR _reader$[ebp]
	call	?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Reader::getFormatedErrorMessages
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv85[ebp]
	push	edx
	lea	ecx, DWORD PTR $T30048[ebp]
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T30048[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T30049[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@operator:

; 913  :     return sin;

	mov	ecx, DWORD PTR _sin$[ebp]
	mov	DWORD PTR $T30051[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _reader$[ebp]
	call	??1Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR $T30051[ebp]
$LN3@operator:

; 914  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$0:
	lea	ecx, DWORD PTR _reader$[ebp]
	jmp	??1Reader@Json@@QAE@XZ
__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$1:
	lea	ecx, DWORD PTR $T30049[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z ENDP ; Json::operator>>
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 8\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 154  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 155  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 158  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@

; 159  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 164  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ		; std::runtime_error::~runtime_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Reader@Json@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Reader@Json@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Reader@Json@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1Reader@Json@@QAE@XZ$2
__ehfuncinfo$??1Reader@Json@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1Reader@Json@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Reader@Json@@QAE@XZ PROC				; Json::Reader::~Reader, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Reader@Json@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??1Reader@Json@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
__unwindfunclet$??1Reader@Json@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1Reader@Json@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Reader@Json@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Reader@Json@@QAE@XZ ENDP				; Json::Reader::~Reader
PUBLIC	??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\stack
;	COMDAT ??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >, COMDAT
; _this$ = ecx

; 29   : 		{	// construct with empty container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >

; 30   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
_TEXT	ENDS
PUBLIC	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
; Function compile flags: /Odtp
;	COMDAT ?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty, COMDAT
; _this$ = ecx

; 38   : 		{	// test if stack is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		return (c.empty());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
_TEXT	ENDS
PUBLIC	?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back
; Function compile flags: /Odtp
;	COMDAT ?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top, COMDAT
; _this$ = ecx

; 48   : 		{	// return last element of mutable stack

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		return (c.back());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back

; 50   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
_TEXT	ENDS
PUBLIC	?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back
; Function compile flags: /Odtp
;	COMDAT ?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push, COMDAT
; _this$ = ecx

; 58   : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		c.push_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push
_TEXT	ENDS
PUBLIC	?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
; Function compile flags: /Odtp
;	COMDAT ?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop, COMDAT
; _this$ = ecx

; 63   : 		{	// erase last element

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 		c.pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back

; 65   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
_TEXT	ENDS
PUBLIC	?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 613  : 		{	// destroy the deque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 614  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy

; 615  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >
_TEXT	ENDS
PUBLIC	??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 527  : 		{	// construct empty deque

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	call	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 528  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy
; Function compile flags: /Odtp
;	COMDAT ??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 613  : 		{	// destroy the deque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 614  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy

; 615  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
;	COMDAT ?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin, COMDAT
; _this$ = ecx

; 643  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 644  : 		return (const_iterator(_Myoff, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 645  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end, COMDAT
; _this$ = ecx

; 653  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 654  : 		return (const_iterator(_Myoff + _Mysize, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 655  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
_TEXT	ENDS
PUBLIC	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv80 = -12						; size = 4
_this$ = -8						; size = 4
$T30122 = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize, COMDAT
; _this$ = ecx

; 678  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 679  : 		resize(_Newsize, _Ty());

	sub	esp, 44					; 0000002cH
	mov	ecx, esp
	mov	DWORD PTR $T30122[ebp], esp
	call	??0ErrorInfo@Reader@Json@@QAE@XZ
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize

; 680  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size, COMDAT
; _this$ = ecx

; 691  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 692  : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 693  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ; std::allocator<Json::Reader::ErrorInfo>::construct
PUBLIC	?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::allocate
PUBLIC	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$ = -8						; size = 4
__Newoff$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back, COMDAT
; _this$ = ecx

; 811  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 812  : 
; 813  :  #if _HAS_ITERATOR_DEBUGGING
; 814  : 		this->_Orphan_all();
; 815  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 816  : 
; 817  : 		if ((_Myoff + _Mysize) % _DEQUESIZ == 0
; 818  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	xor	edx, edx
	mov	ecx, 1
	div	ecx
	test	edx, edx
	jne	SHORT $LN3@push_back
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	ja	SHORT $LN3@push_back

; 819  : 			_Growmap(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN3@push_back:

; 820  : 		size_type _Newoff = _Myoff + _Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR __Newoff$[ebp], eax

; 821  : 		size_type _Block = _Newoff / _DEQUESIZ;

	mov	edx, DWORD PTR __Newoff$[ebp]
	mov	DWORD PTR __Block$[ebp], edx

; 822  : 		if (_Mapsize <= _Block)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN2@push_back

; 823  : 			_Block -= _Mapsize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Block$[ebp]
	sub	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Block$[ebp], eax
$LN2@push_back:

; 824  : 		if (_Map[_Block] == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Block$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	SHORT $LN1@push_back

; 825  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Block$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN1@push_back:

; 826  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Newoff$[ebp]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ; std::allocator<Json::Reader::ErrorInfo>::construct

; 827  : 		++_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 828  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear, COMDAT
; _this$ = ecx

; 1079 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1080 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy

; 1081 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
_TEXT	ENDS
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Off$ = -8						; size = 4
__Block$ = -4						; size = 4
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*, COMDAT
; _this$ = ecx

; 128  : 			{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Block$[ebp], ecx

; 130  : 			size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 0
	mov	DWORD PTR __Off$[ebp], eax

; 131  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN3@operator@2
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@2:

; 132  : 			_SCL_SECURE_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Mycont))->_Myoff + ((_Mydeque *)(this->_Mycont))->_Mysize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jb	SHORT $LN2@operator@2
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@2:

; 133  : 			if (this->_Mycont->_Mapsize <= _Block)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN1@operator@2

; 134  : 				_Block -= this->_Mycont->_Mapsize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Block$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Block$[ebp], ecx
$LN1@operator@2:

; 135  : 			return ((this->_Mycont->_Map)[_Block][_Off]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 44					; 0000002cH
	mov	edx, DWORD PTR __Block$[ebp]
	add	eax, DWORD PTR [ecx+edx*4]

; 136  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++, COMDAT
; _this$ = ecx

; 145  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@operator@3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN4@operator@3
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@3:

; 147  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Mycont))->_Myoff + ((_Mydeque *)(this->_Mycont))->_Mysize);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@operator@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jb	SHORT $LN2@operator@3
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@3:

; 148  : 		++_Myoff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 149  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 150  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++
_TEXT	ENDS
PUBLIC	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=, COMDAT
; _this$ = ecx

; 239  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 241  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >
PUBLIC	??0?$allocator@PAVValue@Json@@@std@@QAE@XZ	; std::allocator<Json::Value *>::allocator<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 527  : 		{	// construct empty deque

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	call	??0?$allocator@PAVValue@Json@@@std@@QAE@XZ ; std::allocator<Json::Value *>::allocator<Json::Value *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 528  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty, COMDAT
; _this$ = ecx

; 701  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 702  : 		return (_Mysize == 0);

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+16], 0
	sete	cl
	mov	al, cl

; 703  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
_TEXT	ENDS
PUBLIC	??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
PUBLIC	??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-
PUBLIC	?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end
; Function compile flags: /Odtp
;	COMDAT ?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T30144 = -24						; size = 12
$T30143 = -12						; size = 12
?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back, COMDAT
; _this$ = ecx

; 757  : 		{	// return last element of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 758  : 		return (*(end() - 1));

	push	1
	lea	eax, DWORD PTR $T30144[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30143[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end
	mov	ecx, eax
	call	??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-
	mov	ecx, eax
	call	??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*

; 759  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z ; std::allocator<Json::Value *>::construct
PUBLIC	?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::allocate
PUBLIC	?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$ = -8						; size = 4
__Newoff$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back, COMDAT
; _this$ = ecx

; 811  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 812  : 
; 813  :  #if _HAS_ITERATOR_DEBUGGING
; 814  : 		this->_Orphan_all();
; 815  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 816  : 
; 817  : 		if ((_Myoff + _Mysize) % _DEQUESIZ == 0
; 818  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN3@push_back@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 4
	shr	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	ja	SHORT $LN3@push_back@2

; 819  : 			_Growmap(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
$LN3@push_back@2:

; 820  : 		size_type _Newoff = _Myoff + _Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR __Newoff$[ebp], eax

; 821  : 		size_type _Block = _Newoff / _DEQUESIZ;

	mov	edx, DWORD PTR __Newoff$[ebp]
	shr	edx, 2
	mov	DWORD PTR __Block$[ebp], edx

; 822  : 		if (_Mapsize <= _Block)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN2@push_back@2

; 823  : 			_Block -= _Mapsize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Block$[ebp]
	sub	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Block$[ebp], eax
$LN2@push_back@2:

; 824  : 		if (_Map[_Block] == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Block$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	SHORT $LN1@push_back@2

; 825  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Block$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN1@push_back@2:

; 826  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Newoff$[ebp]
	xor	edx, edx
	mov	esi, 4
	div	esi
	mov	eax, DWORD PTR __Block$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z ; std::allocator<Json::Value *>::construct

; 827  : 		++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 828  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z ; std::allocator<Json::Value *>::destroy
; Function compile flags: /Odtp
;	COMDAT ?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$25164 = -8					; size = 4
__Newoff$25163 = -4					; size = 4
?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back, COMDAT
; _this$ = ecx

; 831  : 		{	// erase element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 832  : 
; 833  :  #if _HAS_ITERATOR_DEBUGGING
; 834  : 		if (empty())
; 835  : 			_DEBUG_ERROR("deque empty before pop");
; 836  : 		else
; 837  : 			{	// something to erase, do it
; 838  : 			_Orphan_off(_Myoff + _Mysize - 1);
; 839  : 
; 840  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 841  : 		if (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pop_back

; 842  : 			{	// something to erase, do it
; 843  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 844  : 
; 845  : 			size_type _Newoff = _Mysize + _Myoff - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR __Newoff$25163[ebp], edx

; 846  : 			size_type _Block = _Newoff / _DEQUESIZ;

	mov	eax, DWORD PTR __Newoff$25163[ebp]
	shr	eax, 2
	mov	DWORD PTR __Block$25164[ebp], eax

; 847  : 			if (_Mapsize <= _Block)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Block$25164[ebp]
	ja	SHORT $LN2@pop_back

; 848  : 				_Block -= _Mapsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Block$25164[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Block$25164[ebp], ecx
$LN2@pop_back:

; 849  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR __Newoff$25163[ebp]
	xor	edx, edx
	mov	esi, 4
	div	esi
	mov	eax, DWORD PTR __Block$25164[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z ; std::allocator<Json::Value *>::destroy

; 850  : 			if (--_Mysize == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@pop_back

; 851  : 				_Myoff = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN4@pop_back:

; 852  : 			}
; 853  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::deallocate
PUBLIC	?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z ; std::allocator<Json::Value * *>::destroy
PUBLIC	?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::deallocate
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$25180 = -4					; size = 4
?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy, COMDAT
; _this$ = ecx

; 1247 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Tidy:

; 1248 : 		while (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Tidy

; 1249 : 			pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
	jmp	SHORT $LN6@Tidy
$LN5@Tidy:

; 1250 : 		for (size_type _Count = _Mapsize; 0 < _Count; )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Count$25180[ebp], edx
$LN4@Tidy:
	cmp	DWORD PTR __Count$25180[ebp], 0
	jbe	SHORT $LN3@Tidy

; 1251 : 			{	// free storage for a block and destroy pointer
; 1252 : 			if (*(_Map + --_Count) != 0)

	mov	eax, DWORD PTR __Count$25180[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$25180[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Count$25180[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN2@Tidy

; 1253 : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Count$25180[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::deallocate
$LN2@Tidy:

; 1254 : 			this->_Almap.destroy(_Map + _Count);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Count$25180[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z ; std::allocator<Json::Value * *>::destroy

; 1255 : 			}

	jmp	SHORT $LN4@Tidy
$LN3@Tidy:

; 1256 : 
; 1257 : 		if (_Map)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1258 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::deallocate
$LN1@Tidy:

; 1259 : 		_Mapsize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1260 : 		_Map = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1261 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V32@0@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase
PUBLIC	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
PUBLIC	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
PUBLIC	?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n
PUBLIC	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z$0
__ehfuncinfo$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T30158 = -52						; size = 12
$T30157 = -40						; size = 12
$T30156 = -28						; size = 4
$T30155 = -24						; size = 4
$T30154 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 44
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize, COMDAT
; _this$ = ecx

; 683  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 684  : 		if (_Mysize < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 685  : 			_Insert_n(end(), _Newsize - _Mysize, _Val);

	lea	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T30154[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n
	jmp	SHORT $LN2@resize
$LN3@resize:

; 686  : 		else if (_Newsize < _Mysize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN2@resize

; 687  : 			erase(begin() + _Newsize, end());

	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T30155[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T30156[ebp], esp
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T30157[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	ecx, eax
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	lea	eax, DWORD PTR $T30158[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V32@0@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase
$LN2@resize:

; 688  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Val$[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z$0:
	lea	ecx, DWORD PTR __Val$[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__ehhandler$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
PUBLIC	?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
PUBLIC	??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocate
PUBLIC	?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
PUBLIC	?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T30170 = -28						; size = 4
$T30169 = -24						; size = 4
$T30168 = -20						; size = 4
__Newmap$ = -16						; size = 4
__Myptr$ = -12						; size = 4
__Inc$ = -8						; size = 4
__Myboff$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap, COMDAT
; _this$ = ecx

; 1204 : 		{	// grow map by _Count pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1205 : 		if (max_size() / _DEQUESIZ - _Mapsize < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN6@Growmap

; 1206 : 			_Xlen();	// result too long

	call	?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
$LN6@Growmap:

; 1207 : 
; 1208 : 		size_type _Inc = _Mapsize / 2;	// try to grow by 50%

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 1
	mov	DWORD PTR __Inc$[ebp], eax

; 1209 : 		if (_Inc < _DEQUEMAPSIZ)

	cmp	DWORD PTR __Inc$[ebp], 8
	jae	SHORT $LN5@Growmap

; 1210 : 			_Inc = _DEQUEMAPSIZ;

	mov	DWORD PTR __Inc$[ebp], 8
$LN5@Growmap:

; 1211 : 		if (_Count < _Inc && _Mapsize <= max_size() / _DEQUESIZ - _Inc)

	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Inc$[ebp]
	jae	SHORT $LN4@Growmap
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
	sub	eax, DWORD PTR __Inc$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], eax
	ja	SHORT $LN4@Growmap

; 1212 : 			_Count = _Inc;

	mov	eax, DWORD PTR __Inc$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Growmap:

; 1213 : 		size_type _Myboff = _Myoff / _DEQUESIZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Myboff$[ebp], edx

; 1214 : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocate
	mov	DWORD PTR __Newmap$[ebp], eax

; 1215 : 		_Mapptr _Myptr = _Newmap + _Myboff;

	mov	edx, DWORD PTR __Myboff$[ebp]
	mov	eax, DWORD PTR __Newmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Myptr$[ebp], ecx

; 1216 : 
; 1217 : 		_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Myboff,
; 1218 : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Myboff$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1219 : 		if (_Myboff <= _Count)

	mov	ecx, DWORD PTR __Myboff$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@Growmap

; 1220 : 			{	// increment greater than offset of initial block
; 1221 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map,
; 1222 : 				_Map + _Myboff, _Myptr, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1223 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count - _Myboff,
; 1224 : 				(_Tptr)0, this->_Almap);	// clear suffix of new

	mov	DWORD PTR $T30168[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T30168[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Myboff$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 1225 : 			_STDEXT unchecked_uninitialized_fill_n(_Newmap, _Myboff,
; 1226 : 				(_Tptr)0, this->_Almap);	// clear prefix of new

	mov	DWORD PTR $T30169[ebp], 0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR $T30169[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myboff$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newmap$[ebp]
	push	edx
	call	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 1227 : 			}
; 1228 : 		else

	jmp	SHORT $LN2@Growmap
$LN3@Growmap:

; 1229 : 			{	// increment not greater than offset of initial block
; 1230 : 			_STDEXT unchecked_uninitialized_copy(_Map,
; 1231 : 				_Map + _Count, _Myptr, this->_Almap);	// copy more old

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 1232 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Count,
; 1233 : 				_Map + _Myboff, _Newmap, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1234 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count,
; 1235 : 				(_Tptr)0, this->_Almap);	// clear rest to initial block

	mov	DWORD PTR $T30170[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30170[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
$LN2@Growmap:

; 1236 : 			}
; 1237 : 
; 1238 : 		_Destroy_range(_Map + _Myboff, _Map + _Mapsize, this->_Almap);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 12					; 0000000cH

; 1239 : 		if (_Map)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@Growmap

; 1240 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for old

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
$LN1@Growmap:

; 1241 : 
; 1242 : 		_Map = _Newmap;	// point at new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newmap$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1243 : 		_Mapsize += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1244 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo *>::destroy
PUBLIC	?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::deallocate
PUBLIC	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
PUBLIC	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$25340 = -4					; size = 4
?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1247 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Tidy@2:

; 1248 : 		while (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Tidy@2

; 1249 : 			pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
	jmp	SHORT $LN6@Tidy@2
$LN5@Tidy@2:

; 1250 : 		for (size_type _Count = _Mapsize; 0 < _Count; )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Count$25340[ebp], edx
$LN4@Tidy@2:
	cmp	DWORD PTR __Count$25340[ebp], 0
	jbe	SHORT $LN3@Tidy@2

; 1251 : 			{	// free storage for a block and destroy pointer
; 1252 : 			if (*(_Map + --_Count) != 0)

	mov	eax, DWORD PTR __Count$25340[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$25340[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Count$25340[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN2@Tidy@2

; 1253 : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Count$25340[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::deallocate
$LN2@Tidy@2:

; 1254 : 			this->_Almap.destroy(_Map + _Count);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Count$25340[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo *>::destroy

; 1255 : 			}

	jmp	SHORT $LN4@Tidy@2
$LN3@Tidy@2:

; 1256 : 
; 1257 : 		if (_Map)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1258 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
$LN1@Tidy@2:

; 1259 : 		_Mapsize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1260 : 		_Map = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1261 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 473  : 		{	// construct allocator and base from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>

; 474  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ PROC ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>, COMDAT
; _this$ = ecx

; 120  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct default allocator (do nothing)
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::allocate, COMDAT
; _this$ = ecx

; 145  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo>
	add	esp, 8

; 147  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocate
_TEXT	ENDS
PUBLIC	??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::construct, COMDAT
; _this$ = ecx

; 155  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>
	add	esp, 8

; 157  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ ; std::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 117  : 		_Deque_const_iterator(size_type _Off, const _Container_base *_Pdeque)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ

; 118  : 			{	// construct with offset _Off in *_Pdeque
; 119  : 			_SCL_SECURE_TRAITS_VALIDATE(
; 120  : 				_Pdeque != NULL &&
; 121  : 				((_Mydeque *)_Pdeque)->_Myoff <= _Off && _Off <= (((_Mydeque *)_Pdeque)->_Myoff + ((_Mydeque *)_Pdeque)->_Mysize));

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@Deque_cons
	cmp	DWORD PTR __Pdeque$[ebp], 0
	je	SHORT $LN1@Deque_cons
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR __Off$[ebp]
	ja	SHORT $LN1@Deque_cons
	mov	eax, DWORD PTR __Pdeque$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pdeque$[ebp]
	add	ecx, DWORD PTR [edx+16]
	cmp	DWORD PTR __Off$[ebp], ecx
	jbe	SHORT $LN3@Deque_cons
$LN1@Deque_cons:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@Deque_cons:

; 122  : 				
; 123  : 			this->_Mycont = (const _Mydeque *)_Pdeque;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 124  : 			_Myoff = _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [edx+8], eax

; 125  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==, COMDAT
; _this$ = ecx

; 220  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 
; 222  :  #if _HAS_ITERATOR_DEBUGGING
; 223  : 		_Compat(_Right);
; 224  : 		return (_Myoff == _Right._Myoff);
; 225  : 		}
; 226  : 
; 227  :  #elif _SECURE_SCL
; 228  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@operator@4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@operator@4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@operator@4
$LN1@operator@4:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@4:

; 229  : 		return (_Myoff == _Right._Myoff);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+8]
	sete	dl
	mov	al, dl

; 230  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ PROC ; std::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ ENDP ; std::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 403  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 404  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end, COMDAT
; _this$ = ecx

; 648  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 649  : 		return (iterator(_Myoff + _Mysize, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 650  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
PUBLIC	?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::allocate
PUBLIC	?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
PUBLIC	?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T30196 = -28						; size = 4
$T30195 = -24						; size = 4
$T30194 = -20						; size = 4
__Newmap$ = -16						; size = 4
__Myptr$ = -12						; size = 4
__Inc$ = -8						; size = 4
__Myboff$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap, COMDAT
; _this$ = ecx

; 1204 : 		{	// grow map by _Count pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1205 : 		if (max_size() / _DEQUESIZ - _Mapsize < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
	shr	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN6@Growmap@2

; 1206 : 			_Xlen();	// result too long

	call	?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
$LN6@Growmap@2:

; 1207 : 
; 1208 : 		size_type _Inc = _Mapsize / 2;	// try to grow by 50%

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 1
	mov	DWORD PTR __Inc$[ebp], eax

; 1209 : 		if (_Inc < _DEQUEMAPSIZ)

	cmp	DWORD PTR __Inc$[ebp], 8
	jae	SHORT $LN5@Growmap@2

; 1210 : 			_Inc = _DEQUEMAPSIZ;

	mov	DWORD PTR __Inc$[ebp], 8
$LN5@Growmap@2:

; 1211 : 		if (_Count < _Inc && _Mapsize <= max_size() / _DEQUESIZ - _Inc)

	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Inc$[ebp]
	jae	SHORT $LN4@Growmap@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
	shr	eax, 2
	sub	eax, DWORD PTR __Inc$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], eax
	ja	SHORT $LN4@Growmap@2

; 1212 : 			_Count = _Inc;

	mov	eax, DWORD PTR __Inc$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Growmap@2:

; 1213 : 		size_type _Myboff = _Myoff / _DEQUESIZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shr	edx, 2
	mov	DWORD PTR __Myboff$[ebp], edx

; 1214 : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::allocate
	mov	DWORD PTR __Newmap$[ebp], eax

; 1215 : 		_Mapptr _Myptr = _Newmap + _Myboff;

	mov	edx, DWORD PTR __Myboff$[ebp]
	mov	eax, DWORD PTR __Newmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Myptr$[ebp], ecx

; 1216 : 
; 1217 : 		_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Myboff,
; 1218 : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Myboff$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1219 : 		if (_Myboff <= _Count)

	mov	ecx, DWORD PTR __Myboff$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@Growmap@2

; 1220 : 			{	// increment greater than offset of initial block
; 1221 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map,
; 1222 : 				_Map + _Myboff, _Myptr, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1223 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count - _Myboff,
; 1224 : 				(_Tptr)0, this->_Almap);	// clear suffix of new

	mov	DWORD PTR $T30194[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T30194[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Myboff$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 1225 : 			_STDEXT unchecked_uninitialized_fill_n(_Newmap, _Myboff,
; 1226 : 				(_Tptr)0, this->_Almap);	// clear prefix of new

	mov	DWORD PTR $T30195[ebp], 0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR $T30195[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myboff$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newmap$[ebp]
	push	edx
	call	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 1227 : 			}
; 1228 : 		else

	jmp	SHORT $LN2@Growmap@2
$LN3@Growmap@2:

; 1229 : 			{	// increment not greater than offset of initial block
; 1230 : 			_STDEXT unchecked_uninitialized_copy(_Map,
; 1231 : 				_Map + _Count, _Myptr, this->_Almap);	// copy more old

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 1232 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Count,
; 1233 : 				_Map + _Myboff, _Newmap, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1234 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count,
; 1235 : 				(_Tptr)0, this->_Almap);	// clear rest to initial block

	mov	DWORD PTR $T30196[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30196[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
$LN2@Growmap@2:

; 1236 : 			}
; 1237 : 
; 1238 : 		_Destroy_range(_Map + _Myboff, _Map + _Mapsize, this->_Almap);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 12					; 0000000cH

; 1239 : 		if (_Map)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@Growmap@2

; 1240 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for old

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::deallocate
$LN1@Growmap@2:

; 1241 : 
; 1242 : 		_Map = _Newmap;	// point at new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newmap$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1243 : 		_Mapsize += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1244 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
_TEXT	ENDS
PUBLIC	??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >
PUBLIC	??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Value *>::allocator<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z PROC ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 473  : 		{	// construct allocator and base from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Value *>::allocator<Json::Value *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Value *>::allocator<Json::Value *>

; 474  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVValue@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVValue@Json@@@std@@QAE@XZ PROC		; std::allocator<Json::Value *>::allocator<Json::Value *>, COMDAT
; _this$ = ecx

; 120  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct default allocator (do nothing)
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVValue@Json@@@std@@QAE@XZ ENDP		; std::allocator<Json::Value *>::allocator<Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value *>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 142  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value *>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z ; std::_Allocate<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value *>::allocate, COMDAT
; _this$ = ecx

; 145  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z ; std::_Allocate<Json::Value *>
	add	esp, 8

; 147  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value *>::allocate
_TEXT	ENDS
PUBLIC	??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z ; std::_Construct<Json::Value *,Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z PROC ; std::allocator<Json::Value *>::construct, COMDAT
; _this$ = ecx

; 155  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z ; std::_Construct<Json::Value *,Json::Value *>
	add	esp, 8

; 157  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z ENDP ; std::allocator<Json::Value *>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z PROC ; std::allocator<Json::Value *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value *>
	add	esp, 4

; 162  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z ENDP ; std::allocator<Json::Value *>::destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value * *>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 142  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value * *>::deallocate
_TEXT	ENDS
PUBLIC	??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z PROC ; std::allocator<Json::Value * *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value * *>
	add	esp, 4

; 162  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z ENDP ; std::allocator<Json::Value * *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin, COMDAT
; _this$ = ecx

; 638  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 639  : 		return (iterator(_Myoff, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 640  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end, COMDAT
; _this$ = ecx

; 648  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 649  : 		return (iterator(_Myoff + _Mysize, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 650  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ ; std::allocator<Json::Reader::ErrorInfo>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size, COMDAT
; _this$ = ecx

; 696  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 697  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ ; std::allocator<Json::Reader::ErrorInfo>::max_size

; 698  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty, COMDAT
; _this$ = ecx

; 701  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 702  : 		return (_Mysize == 0);

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+16], 0
	sete	cl
	mov	al, cl

; 703  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo>::destroy
; Function compile flags: /Odtp
;	COMDAT ?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$25758 = -8					; size = 4
__Newoff$25757 = -4					; size = 4
?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back, COMDAT
; _this$ = ecx

; 831  : 		{	// erase element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 832  : 
; 833  :  #if _HAS_ITERATOR_DEBUGGING
; 834  : 		if (empty())
; 835  : 			_DEBUG_ERROR("deque empty before pop");
; 836  : 		else
; 837  : 			{	// something to erase, do it
; 838  : 			_Orphan_off(_Myoff + _Mysize - 1);
; 839  : 
; 840  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 841  : 		if (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pop_back@2

; 842  : 			{	// something to erase, do it
; 843  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 844  : 
; 845  : 			size_type _Newoff = _Mysize + _Myoff - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR __Newoff$25757[ebp], edx

; 846  : 			size_type _Block = _Newoff / _DEQUESIZ;

	mov	eax, DWORD PTR __Newoff$25757[ebp]
	mov	DWORD PTR __Block$25758[ebp], eax

; 847  : 			if (_Mapsize <= _Block)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Block$25758[ebp]
	ja	SHORT $LN2@pop_back@2

; 848  : 				_Block -= _Mapsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Block$25758[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Block$25758[ebp], ecx
$LN2@pop_back@2:

; 849  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR __Newoff$25757[ebp]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$25758[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo>::destroy

; 850  : 			if (--_Mysize == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN4@pop_back@2

; 851  : 				_Myoff = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN4@pop_back@2:

; 852  : 			}
; 853  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
_TEXT	ENDS
PUBLIC	??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
PUBLIC	??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
PUBLIC	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
; Function compile flags: /Odtp
;	COMDAT ?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V32@0@Z
_TEXT	SEGMENT
_this$ = -96						; size = 4
$T30236 = -92						; size = 12
$T30235 = -80						; size = 12
$T30231 = -56						; size = 12
$T30227 = -32						; size = 12
$T30226 = -20						; size = 12
__Off$ = -8						; size = 4
__Count$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V32@0@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase, COMDAT
; _this$ = ecx

; 1040 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1041 : 
; 1042 :  #if _HAS_ITERATOR_DEBUGGING
; 1043 : 		if (_Last < _First
; 1044 : 			|| _First < begin() || end() < _Last)
; 1045 : 			_DEBUG_ERROR("deque erase iterator outside range");
; 1046 : 		_DEBUG_RANGE(_First, _Last);
; 1047 : 
; 1048 : 		size_type _Off = _First - begin();
; 1049 : 		size_type _Count = _Last - _First;
; 1050 : 		bool _Moved = 0 < _Off && _Off + _Count < _Mysize;
; 1051 : 
; 1052 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1053 : 		size_type _Off = _First - begin();

	lea	eax, DWORD PTR $T30226[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR __Off$[ebp], eax

; 1054 : 		size_type _Count = _Last - _First;

	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR __Count$[ebp], eax

; 1055 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1056 : 
; 1057 : 		if (_Off < (size_type)(end() - _Last))

	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	eax, DWORD PTR $T30227[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	mov	ecx, eax
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	cmp	DWORD PTR __Off$[ebp], eax
	jae	SHORT $LN8@erase

; 1058 : 			{	// closer to front
; 1059 : 			copy_backward(begin(), _First, _Last);	// copy over hole

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	sub	esp, 12					; 0000000cH
	push	esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	lea	ecx, DWORD PTR $T30231[ebp]
	push	ecx
	call	??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 40					; 00000028H
	jmp	SHORT $LN7@erase
$LN6@erase:

; 1060 : 			for (; 0 < _Count; --_Count)

	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Count$[ebp], edx
$LN7@erase:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN5@erase

; 1061 : 				pop_front();	// pop copied elements

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
	jmp	SHORT $LN6@erase
$LN5@erase:

; 1062 : 			}
; 1063 : 		else

	jmp	SHORT $LN4@erase
$LN8@erase:

; 1064 : 			{	// closer to back
; 1065 : 			std::copy(_Last, end(), _First);	// copy over hole

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	sub	esp, 12					; 0000000cH
	push	esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	lea	eax, DWORD PTR $T30235[ebp]
	push	eax
	call	??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 40					; 00000028H
	jmp	SHORT $LN3@erase
$LN2@erase:

; 1066 : 			for (; 0 < _Count; --_Count)

	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
$LN3@erase:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@erase

; 1067 : 				pop_back();	// pop copied elements

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
	jmp	SHORT $LN2@erase
$LN4@erase:

; 1068 : 			}
; 1069 : 
; 1070 :  #if _HAS_ITERATOR_DEBUGGING
; 1071 : 		if (_Moved)
; 1072 : 			this->_Orphan_all();
; 1073 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1074 : 
; 1075 : 		return (begin() + _Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30236[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	ecx, eax
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1076 : 		}

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V32@0@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase
_TEXT	ENDS
PUBLIC	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
PUBLIC	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z		; Json::Reader::ErrorInfo::ErrorInfo
PUBLIC	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
PUBLIC	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
PUBLIC	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$2
__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$0
__ehfuncinfo$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$6
	DD	03H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$7
__unwindtable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$4
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	FLAT:__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$5
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
tv472 = -536						; size = 4
tv470 = -532						; size = 4
tv468 = -528						; size = 4
tv466 = -524						; size = 4
tv464 = -520						; size = 4
tv463 = -516						; size = 4
tv462 = -512						; size = 4
tv461 = -508						; size = 4
tv460 = -504						; size = 4
tv459 = -500						; size = 4
tv458 = -496						; size = 4
tv457 = -492						; size = 4
tv455 = -488						; size = 4
tv453 = -484						; size = 4
tv452 = -480						; size = 4
tv451 = -476						; size = 4
tv450 = -472						; size = 4
tv449 = -468						; size = 4
tv447 = -464						; size = 4
tv446 = -460						; size = 4
tv444 = -456						; size = 4
tv442 = -452						; size = 4
tv440 = -448						; size = 4
tv439 = -444						; size = 4
tv438 = -440						; size = 4
tv437 = -436						; size = 4
tv436 = -432						; size = 4
tv435 = -428						; size = 4
tv434 = -424						; size = 4
tv432 = -420						; size = 4
tv430 = -416						; size = 4
tv429 = -412						; size = 4
tv428 = -408						; size = 4
tv427 = -404						; size = 4
_this$ = -400						; size = 4
$T30270 = -396						; size = 4
$T30269 = -392						; size = 4
$T30268 = -388						; size = 12
$T30267 = -376						; size = 4
$T30266 = -372						; size = 12
$T30265 = -360						; size = 4
$T30264 = -356						; size = 4
$T30263 = -352						; size = 12
$T30262 = -340						; size = 12
$T30261 = -328						; size = 12
$T30260 = -316						; size = 4
$T30259 = -312						; size = 4
$T30258 = -308						; size = 12
$T30257 = -296						; size = 12
$T30256 = -284						; size = 12
$T30255 = -272						; size = 12
$T30254 = -260						; size = 4
$T30253 = -256						; size = 4
$T30252 = -252						; size = 12
$T30251 = -240						; size = 4
$T30250 = -236						; size = 4
$T30249 = -232						; size = 4
$T30248 = -228						; size = 12
$T30247 = -216						; size = 12
$T30246 = -204						; size = 12
$T30245 = -192						; size = 4
$T30244 = -188						; size = 4
$T30243 = -184						; size = 12
$T30242 = -172						; size = 12
$T30241 = -160						; size = 12
$T30240 = -148						; size = 12
__Tmp$25885 = -136					; size = 44
__Tmp$25848 = -92					; size = 44
__$ArrayPad$ = -48					; size = 4
__Off$ = -44						; size = 4
__Rem$ = -40						; size = 4
__Num$ = -36						; size = 4
__Mid$ = -32						; size = 12
__Oldsize$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 12
__Count$ = 20						; size = 4
__Val$ = 24						; size = 4
?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n, COMDAT
; _this$ = ecx

; 1113 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 520				; 00000208H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1114 : 		iterator _Mid;

	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>

; 1115 : 		size_type _Num;
; 1116 : 		size_type _Off = _Where - begin();

	lea	eax, DWORD PTR $T30240[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR __Off$[ebp], eax

; 1117 : 		size_type _Rem = _Mysize - _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Rem$[ebp], edx

; 1118 : 		size_type _Oldsize = _Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Oldsize$[ebp], ecx

; 1119 : 
; 1120 :  #if _HAS_ITERATOR_DEBUGGING
; 1121 : 		if (_Mysize < _Off)
; 1122 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1123 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1124 : 
; 1125 : 		if (_Off < _Rem)

	mov	edx, DWORD PTR __Off$[ebp]
	cmp	edx, DWORD PTR __Rem$[ebp]
	jae	$LN30@Insert_n

; 1126 : 			{	// closer to front
; 1127 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1128 : 			if (_Off < _Count)

	mov	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN28@Insert_n

; 1129 : 				{	// insert longer than prefix
; 1130 : 				for (_Num = _Count - _Off; 0 < _Num; --_Num)

	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	jmp	SHORT $LN27@Insert_n
$LN26@Insert_n:
	mov	edx, DWORD PTR __Num$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Num$[ebp], edx
$LN27@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN25@Insert_n

; 1131 : 					push_front(_Val);	// push excess values

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
	jmp	SHORT $LN26@Insert_n
$LN25@Insert_n:

; 1132 : 				for (_Num = _Off; 0 < _Num; --_Num)

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	jmp	SHORT $LN24@Insert_n
$LN23@Insert_n:
	mov	edx, DWORD PTR __Num$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Num$[ebp], edx
$LN24@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN22@Insert_n

; 1133 : 					push_front(begin()[_Count - 1]);	// push prefix

	lea	eax, DWORD PTR $T30241[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv427[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv427[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv428[ebp], eax
	mov	edx, DWORD PTR tv428[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
	jmp	SHORT $LN23@Insert_n
$LN22@Insert_n:

; 1134 : 
; 1135 : 				_Mid = begin() + _Count;

	lea	eax, DWORD PTR $T30242[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv429[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T30243[ebp]
	push	edx
	mov	ecx, DWORD PTR tv429[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv430[ebp], eax
	mov	eax, DWORD PTR tv430[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Mid$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Mid$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Mid$[ebp+8], eax

; 1136 : 				fill(_Mid, _Mid + _Off, _Val);	// fill in rest of values

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T30244[ebp], esp
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	push	edx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv432[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T30245[ebp], esp
	lea	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv434[ebp], eax
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 28					; 0000001cH

; 1137 : 				}
; 1138 : 			else

	jmp	$LN21@Insert_n
$LN28@Insert_n:

; 1139 : 				{	// insert not longer than prefix
; 1140 : 				for (_Num = _Count; 0 < _Num; --_Num)

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
	jmp	SHORT $LN20@Insert_n
$LN19@Insert_n:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Num$[ebp], ecx
$LN20@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN18@Insert_n

; 1141 : 					push_front(begin()[_Count - 1]);	// push part of prefix

	lea	edx, DWORD PTR $T30246[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv435[ebp], eax
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv435[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv436[ebp], eax
	mov	ecx, DWORD PTR tv436[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
	jmp	SHORT $LN19@Insert_n
$LN18@Insert_n:

; 1142 : 
; 1143 : 				_Mid = begin() + _Count;

	lea	edx, DWORD PTR $T30247[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv437[ebp], eax
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30248[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv437[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv438[ebp], eax
	mov	edx, DWORD PTR tv438[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Mid$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Mid$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Mid$[ebp+8], edx

; 1144 : 				_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$25848[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
	mov	DWORD PTR tv439[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1145 : 				std::copy(_Mid + _Count, _Mid + _Off,
; 1146 : 					_Mid);	// copy rest of prefix

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T30249[ebp], esp
	lea	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv440[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T30250[ebp], esp
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	push	eax
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv442[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T30251[ebp], esp
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	push	edx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv444[ebp], eax
	lea	ecx, DWORD PTR $T30252[ebp]
	push	ecx
	call	??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 40					; 00000028H

; 1147 : 				fill(begin() + _Off, _Mid + _Off, _Tmp);	// fill in values

	lea	edx, DWORD PTR __Tmp$25848[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T30253[ebp], esp
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	push	eax
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv446[ebp], eax
	lea	edx, DWORD PTR $T30255[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv447[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T30254[ebp], esp
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	push	eax
	mov	ecx, DWORD PTR tv447[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv449[ebp], eax
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 28					; 0000001cH

; 1148 : 				}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Tmp$25848[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
$LN21@Insert_n:
	jmp	SHORT $LN33@Insert_n
__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$0:
$LN17@Insert_n:

; 1149 : 			_CATCH_ALL
; 1150 : 			for (; _Oldsize < _Mysize; )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Oldsize$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $LN16@Insert_n

; 1151 : 				pop_front();	// restore old size, at least

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
	jmp	SHORT $LN17@Insert_n
$LN16@Insert_n:

; 1152 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, __tryend$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$1
	ret	0
$LN33@Insert_n:

; 1153 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$1:

; 1154 : 			}
; 1155 : 		else

	jmp	$LN32@Insert_n
$LN30@Insert_n:

; 1156 : 			{		// closer to back
; 1157 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 3

; 1158 : 			if (_Rem < _Count)

	mov	ecx, DWORD PTR __Rem$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	$LN13@Insert_n

; 1159 : 				{	// insert longer than suffix
; 1160 : 				for (_Num = _Count - _Rem; 0 < _Num; --_Num)

	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, DWORD PTR __Rem$[ebp]
	mov	DWORD PTR __Num$[ebp], edx
	jmp	SHORT $LN12@Insert_n
$LN11@Insert_n:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Num$[ebp], eax
$LN12@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN10@Insert_n

; 1161 : 					push_back(_Val);	// push excess values

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
	jmp	SHORT $LN11@Insert_n
$LN10@Insert_n:

; 1162 : 				for (_Num = 0; _Num < _Rem; ++_Num)

	mov	DWORD PTR __Num$[ebp], 0
	jmp	SHORT $LN9@Insert_n
$LN8@Insert_n:
	mov	edx, DWORD PTR __Num$[ebp]
	add	edx, 1
	mov	DWORD PTR __Num$[ebp], edx
$LN9@Insert_n:
	mov	eax, DWORD PTR __Num$[ebp]
	cmp	eax, DWORD PTR __Rem$[ebp]
	jae	SHORT $LN7@Insert_n

; 1163 : 					push_back(begin()[_Off + _Num]);	// push suffix

	lea	ecx, DWORD PTR $T30256[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv450[ebp], eax
	mov	edx, DWORD PTR __Off$[ebp]
	add	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv450[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv451[ebp], eax
	mov	eax, DWORD PTR tv451[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
	jmp	SHORT $LN8@Insert_n
$LN7@Insert_n:

; 1164 : 
; 1165 : 				_Mid = begin() + _Off;

	lea	ecx, DWORD PTR $T30257[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv452[ebp], eax
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	lea	eax, DWORD PTR $T30258[ebp]
	push	eax
	mov	ecx, DWORD PTR tv452[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv453[ebp], eax
	mov	ecx, DWORD PTR tv453[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Mid$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Mid$[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Mid$[ebp+8], ecx

; 1166 : 				fill(_Mid, _Mid + _Rem, _Val);	// fill in rest of values

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T30259[ebp], esp
	mov	ecx, DWORD PTR __Rem$[ebp]
	push	ecx
	push	eax
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv455[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T30260[ebp], esp
	lea	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv457[ebp], eax
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 28					; 0000001cH

; 1167 : 				}
; 1168 : 			else

	jmp	$LN6@Insert_n
$LN13@Insert_n:

; 1169 : 				{	// insert not longer than prefix
; 1170 : 				for (_Num = 0; _Num < _Count; ++_Num)

	mov	DWORD PTR __Num$[ebp], 0
	jmp	SHORT $LN5@Insert_n
$LN4@Insert_n:
	mov	eax, DWORD PTR __Num$[ebp]
	add	eax, 1
	mov	DWORD PTR __Num$[ebp], eax
$LN5@Insert_n:
	mov	ecx, DWORD PTR __Num$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@Insert_n

; 1171 : 					push_back(begin()[_Off + _Rem
; 1172 : 						- _Count + _Num]);	// push part of prefix

	lea	edx, DWORD PTR $T30261[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv458[ebp], eax
	mov	eax, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR __Rem$[ebp]
	sub	eax, DWORD PTR __Count$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv458[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv459[ebp], eax
	mov	ecx, DWORD PTR tv459[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
	jmp	SHORT $LN4@Insert_n
$LN3@Insert_n:

; 1173 : 
; 1174 : 				_Mid = begin() + _Off;

	lea	edx, DWORD PTR $T30262[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv460[ebp], eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30263[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv460[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv461[ebp], eax
	mov	edx, DWORD PTR tv461[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Mid$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Mid$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Mid$[ebp+8], edx

; 1175 : 				_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$25885[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
	mov	DWORD PTR tv462[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 1176 : 				copy_backward(_Mid, _Mid + _Rem - _Count,
; 1177 : 					_Mid + _Rem);	// copy rest of prefix

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T30264[ebp], esp
	mov	edx, DWORD PTR __Rem$[ebp]
	push	edx
	push	ecx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv463[ebp], eax
	mov	eax, DWORD PTR __Rem$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30266[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv464[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T30265[ebp], esp
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	push	edx
	mov	ecx, DWORD PTR tv464[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR tv466[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T30267[ebp], esp
	lea	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv468[ebp], eax
	lea	eax, DWORD PTR $T30268[ebp]
	push	eax
	call	??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 40					; 00000028H

; 1178 : 				fill(_Mid, _Mid + _Count, _Tmp);	// fill in values

	lea	ecx, DWORD PTR __Tmp$25885[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T30269[ebp], esp
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	push	edx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv470[ebp], eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T30270[ebp], esp
	lea	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv472[ebp], eax
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 28					; 0000001cH

; 1179 : 				}

	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR __Tmp$25885[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
$LN6@Insert_n:
	jmp	SHORT $LN35@Insert_n
__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$2:
$LN2@Insert_n:

; 1180 : 			_CATCH_ALL
; 1181 : 			for (; _Oldsize < _Mysize; )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Oldsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN1@Insert_n

; 1182 : 				pop_back();	// restore old size, at least

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
	jmp	SHORT $LN2@Insert_n
$LN1@Insert_n:

; 1183 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN32@Insert_n
	ret	0
$LN35@Insert_n:

; 1184 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN32@Insert_n:

; 1185 : 			}
; 1186 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$4:
	lea	ecx, DWORD PTR __Tmp$25848[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$5:
	lea	ecx, DWORD PTR __Tmp$25885[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__ehhandler$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-540]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T30293 = -80						; size = 28
$T30292 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen, COMDAT

; 1189 : 		{	// report length error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1190 : 		_THROW(length_error, "deque<T> too long");

	push	OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T30293[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T30293[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30292[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T30292[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T30293[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1191 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T30293[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 8\vc\include\stdexcept
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 107  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 27   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 28   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 37   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 31   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@

; 32   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 110  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 111  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>

; 456  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>, COMDAT
; _this$ = ecx

; 124  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		{	// construct by copying (do nothing)
; 126  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 142  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::deallocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 142  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::allocate, COMDAT
; _this$ = ecx

; 145  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo *>
	add	esp, 8

; 147  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo *>
	add	esp, 4

; 162  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::destroy
_TEXT	ENDS
PUBLIC	??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*, COMDAT
; _this$ = ecx

; 368  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
_TEXT	ENDS
PUBLIC	??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=
PUBLIC	??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
;	COMDAT ??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__Tmp$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-, COMDAT
; _this$ = ecx

; 421  : 		{	// return this - integer

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z

; 423  : 		return (_Tmp -= _Off);

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 424  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-
_TEXT	ENDS
PUBLIC	??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__Tmp$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+, COMDAT
; _this$ = ecx

; 410  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 411  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z

; 412  : 		return (_Tmp += _Off);

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 413  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z PROC		; Json::Reader::ErrorInfo::ErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z ENDP		; Json::Reader::ErrorInfo::ErrorInfo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ ; std::allocator<Json::Value *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size, COMDAT
; _this$ = ecx

; 696  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 697  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ ; std::allocator<Json::Value *>::max_size

; 698  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T30367 = -80						; size = 28
$T30366 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen, COMDAT

; 1189 : 		{	// report length error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1190 : 		_THROW(length_error, "deque<T> too long");

	push	OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T30367[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T30367[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30366[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T30366[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T30367[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1191 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T30367[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
PUBLIC	??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z PROC ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>

; 456  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z PROC	; std::allocator<Json::Value *>::allocator<Json::Value *>, COMDAT
; _this$ = ecx

; 124  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		{	// construct by copying (do nothing)
; 126  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<Json::Value *>::allocator<Json::Value *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z ; std::_Allocate<Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value * *>::allocate, COMDAT
; _this$ = ecx

; 145  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z ; std::_Allocate<Json::Value * *>
	add	esp, 8

; 147  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value * *>::allocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
_TEXT	ENDS
;	COMDAT ?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
tv77 = -16						; size = 4
_this$ = -12						; size = 4
__Block$ = -8						; size = 4
__Newoff$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front, COMDAT
; _this$ = ecx

; 767  : 		{	// insert element at beginning

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 768  : 
; 769  :  #if _HAS_ITERATOR_DEBUGGING
; 770  : 		this->_Orphan_all();
; 771  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 772  : 
; 773  : 		if (_Myoff % _DEQUESIZ == 0
; 774  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	xor	edx, edx
	mov	ecx, 1
	div	ecx
	test	edx, edx
	jne	SHORT $LN2@push_front
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	ja	SHORT $LN2@push_front

; 775  : 			_Growmap(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN2@push_front:

; 776  : 		size_type _Newoff = _Myoff != 0 ? _Myoff
; 777  : 			: _Mapsize * _DEQUESIZ;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@push_front
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN6@push_front
$LN5@push_front:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv77[ebp], eax
$LN6@push_front:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Newoff$[ebp], ecx

; 778  : 		size_type _Block = --_Newoff / _DEQUESIZ;

	mov	edx, DWORD PTR __Newoff$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Newoff$[ebp], edx
	mov	eax, DWORD PTR __Newoff$[ebp]
	mov	DWORD PTR __Block$[ebp], eax

; 779  : 		if (_Map[_Block] == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Block$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	SHORT $LN1@push_front

; 780  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Block$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN1@push_front:

; 781  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Newoff$[ebp]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ; std::allocator<Json::Reader::ErrorInfo>::construct

; 782  : 		_Myoff = _Newoff;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newoff$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 783  : 		++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 784  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Block$26125 = -4					; size = 4
?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front, COMDAT
; _this$ = ecx

; 787  : 		{	// erase element at beginning

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 
; 789  :  #if _HAS_ITERATOR_DEBUGGING
; 790  : 		if (empty())
; 791  : 			_DEBUG_ERROR("deque empty before pop");
; 792  : 		else
; 793  : 			{	// something to erase, do it
; 794  : 			_Orphan_off(_Myoff);
; 795  : 
; 796  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 797  : 		if (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pop_front

; 798  : 			{	// something to erase, do it
; 799  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 800  : 
; 801  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Block$26125[ebp], edx

; 802  : 			this->_Alval.destroy(_Map[_Block] + _Myoff % _DEQUESIZ);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$26125[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo>::destroy

; 803  : 			if (_Mapsize * _DEQUESIZ <= ++_Myoff)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+12]
	ja	SHORT $LN2@pop_front

; 804  : 				_Myoff = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@pop_front:

; 805  : 			if (--_Mysize == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN4@pop_front

; 806  : 				_Myoff = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN4@pop_front:

; 807  : 			}
; 808  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
_TEXT	ENDS
PUBLIC	??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo>
	add	esp, 4

; 162  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ PROC ; std::allocator<Json::Reader::ErrorInfo>::max_size, COMDAT
; _this$ = ecx

; 165  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 97612893	; 05d1745dH

; 167  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ ENDP ; std::allocator<Json::Reader::ErrorInfo>::max_size
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 114  : 			{	// construct with copy of _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 115  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>, COMDAT
; _this$ = ecx

; 364  : 		{	// construct with offset _Off in *_Pdeque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>

; 365  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
_TEXT	ENDS
PUBLIC	??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=, COMDAT
; _this$ = ecx

; 416  : 		{	// decrement by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 		return (*this += -_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=

; 418  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>, COMDAT
; _this$ = ecx

; 114  : 			{	// construct with copy of _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 115  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Off$ = -8						; size = 4
__Block$ = -4						; size = 4
??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ PROC ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*, COMDAT
; _this$ = ecx

; 128  : 			{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	DWORD PTR __Block$[ebp], ecx

; 130  : 			size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 3
	mov	DWORD PTR __Off$[ebp], eax

; 131  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN3@operator@5
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@5:

; 132  : 			_SCL_SECURE_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Mycont))->_Myoff + ((_Mydeque *)(this->_Mycont))->_Mysize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jb	SHORT $LN2@operator@5
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@5:

; 133  : 			if (this->_Mycont->_Mapsize <= _Block)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN1@operator@5

; 134  : 				_Block -= this->_Mycont->_Mapsize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Block$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Block$[ebp], ecx
$LN1@operator@5:

; 135  : 			return ((this->_Mycont->_Map)[_Block][_Off]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Block$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 136  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ ENDP ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 358  : 	_Deque_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>

; 359  : 		{	// construct with null vector pointer
; 360  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 364  : 		{	// construct with offset _Off in *_Pdeque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>

; 365  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
_TEXT	ENDS
PUBLIC	??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=, COMDAT
; _this$ = ecx

; 404  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 405  : 		*(_Mybase *)this += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=

; 406  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 407  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
_TEXT	ENDS
PUBLIC	??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=
; Function compile flags: /Odtp
;	COMDAT ??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__Tmp$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-, COMDAT
; _this$ = ecx

; 421  : 		{	// return this - integer

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z

; 423  : 		return (_Tmp -= _Off);

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 424  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
_TEXT	ENDS
PUBLIC	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
; Function compile flags: /Odtp
;	COMDAT ??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-, COMDAT
; _this$ = ecx

; 427  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 428  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-

; 429  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
_TEXT	ENDS
PUBLIC	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
; Function compile flags: /Odtp
;	COMDAT ??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T30415 = -12						; size = 12
__Off$ = 8						; size = 4
??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[], COMDAT
; _this$ = ecx

; 432  : 		{	// subscript

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 433  : 		return (*(*this + _Off));

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30415[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	ecx, eax
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*

; 434  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ PROC	; std::allocator<Json::Value *>::max_size, COMDAT
; _this$ = ecx

; 165  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 167  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ ENDP	; std::allocator<Json::Value *>::max_size
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 106  : 		_Deque_const_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ

; 107  : 			{	// construct with null deque pointer
; 108  : 			this->_Mycont = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 109  : 			_Myoff = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 110  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=, COMDAT
; _this$ = ecx

; 175  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 176  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@operator@6
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN5@operator@6
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN5@operator@6:

; 177  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(
; 178  : 			_Myoff + _Off <= ((_Mydeque *)(this->_Mycont))->_Myoff + ((_Mydeque *)(this->_Mycont))->_Mysize &&
; 179  : 			_Myoff + _Off >= ((_Mydeque *)(this->_Mycont))->_Myoff);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@operator@6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+16]
	cmp	ecx, eax
	ja	SHORT $LN1@operator@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN3@operator@6
$LN1@operator@6:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@6:

; 180  : 		_Myoff += _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 181  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 182  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-, COMDAT
; _this$ = ecx

; 202  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 
; 204  :  #if _HAS_ITERATOR_DEBUGGING
; 205  : 		_Compat(_Right);
; 206  :  #else
; 207  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@operator@7
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@operator@7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@operator@7
$LN1@operator@7:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@7:

; 208  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 209  : 
; 210  : 		return (_Right._Myoff <= _Myoff ? _Myoff - _Right._Myoff
; 211  : 			: -(difference_type)(_Right._Myoff - _Myoff));

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	ja	SHORT $LN6@operator@7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN7@operator@7
$LN6@operator@7:
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+8]
	neg	ecx
	mov	DWORD PTR tv80[ebp], ecx
$LN7@operator@7:
	mov	eax, DWORD PTR tv80[ebp]

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
_TEXT	ENDS
PUBLIC	??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=, COMDAT
; _this$ = ecx

; 404  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 405  : 		*(_Mybase *)this += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=

; 406  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 407  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z PROC ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>, COMDAT
; _this$ = ecx

; 117  : 		_Deque_const_iterator(size_type _Off, const _Container_base *_Pdeque)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 118  : 			{	// construct with offset _Off in *_Pdeque
; 119  : 			_SCL_SECURE_TRAITS_VALIDATE(
; 120  : 				_Pdeque != NULL &&
; 121  : 				((_Mydeque *)_Pdeque)->_Myoff <= _Off && _Off <= (((_Mydeque *)_Pdeque)->_Myoff + ((_Mydeque *)_Pdeque)->_Mysize));

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@Deque_cons@2
	cmp	DWORD PTR __Pdeque$[ebp], 0
	je	SHORT $LN1@Deque_cons@2
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR __Off$[ebp]
	ja	SHORT $LN1@Deque_cons@2
	mov	eax, DWORD PTR __Pdeque$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pdeque$[ebp]
	add	ecx, DWORD PTR [edx+16]
	cmp	DWORD PTR __Off$[ebp], ecx
	jbe	SHORT $LN3@Deque_cons@2
$LN1@Deque_cons@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@Deque_cons@2:

; 122  : 				
; 123  : 			this->_Mycont = (const _Mydeque *)_Pdeque;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 124  : 			_Myoff = _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [edx+8], eax

; 125  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBU_Container_base@1@@Z ENDP ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*, COMDAT
; _this$ = ecx

; 368  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=, COMDAT
; _this$ = ecx

; 416  : 		{	// decrement by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 		return (*this += -_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=

; 418  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=, COMDAT
; _this$ = ecx

; 175  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 176  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@operator@8
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN5@operator@8
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN5@operator@8:

; 177  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(
; 178  : 			_Myoff + _Off <= ((_Mydeque *)(this->_Mycont))->_Myoff + ((_Mydeque *)(this->_Mycont))->_Mysize &&
; 179  : 			_Myoff + _Off >= ((_Mydeque *)(this->_Mycont))->_Myoff);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@operator@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+16]
	cmp	ecx, eax
	ja	SHORT $LN1@operator@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN3@operator@8
$LN1@operator@8:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@8:

; 180  : 		_Myoff += _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 181  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 182  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
PUBLIC	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z
_TEXT	SEGMENT
$T30443 = -2						; size = 1
$T30442 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 672  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 673  : 		return (_STD _Uninit_copy(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 674  : 			_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T30442[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
	add	esp, 8
	mov	BYTE PTR $T30443[ebp], al
	mov	al, BYTE PTR $T30442[ebp]
	push	eax
	mov	cl, BYTE PTR $T30443[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 24					; 00000018H

; 675  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z
_TEXT	SEGMENT
$T30447 = -2						; size = 1
$T30446 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 729  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 730  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 731  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T30446[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
	add	esp, 8
	mov	BYTE PTR $T30447[ebp], al
	mov	al, BYTE PTR $T30446[ebp]
	push	eax
	mov	cl, BYTE PTR $T30447[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 24					; 00000018H

; 732  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z
_TEXT	SEGMENT
$T30450 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z PROC ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 225  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
	add	esp, 8
	mov	BYTE PTR $T30450[ebp], al
	mov	dl, BYTE PTR $T30450[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 227  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z ENDP ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z
_TEXT	SEGMENT
$T30453 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z PROC ; std::_Allocate<Json::Reader::ErrorInfo>, COMDAT

; 37   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 38   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 39   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 40   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 44					; 0000002cH
	jae	SHORT $LN2@Allocate

; 41   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T30453[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T30453[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 42   : 
; 43   : 		// allocate storage for _Count elements of type _Ty
; 44   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 44					; 0000002cH
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z ENDP ; std::_Allocate<Json::Reader::ErrorInfo>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File c:\program files (x86)\microsoft visual studio 8\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 339  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 340  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 348  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 349  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z$0
__ehfuncinfo$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T30463 = -24						; size = 4
$T30462 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z PROC ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>, COMDAT

; 51   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 52   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 53   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T30463[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T30463[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T30463[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T30462[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 54   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T30463[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z ENDP ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
PUBLIC	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
PUBLIC	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z
_TEXT	SEGMENT
$T30480 = -2						; size = 1
$T30479 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >, COMDAT

; 672  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 673  : 		return (_STD _Uninit_copy(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 674  : 			_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T30479[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
	add	esp, 8
	mov	BYTE PTR $T30480[ebp], al
	mov	al, BYTE PTR $T30479[ebp]
	push	eax
	mov	cl, BYTE PTR $T30480[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 24					; 00000018H

; 675  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z
_TEXT	SEGMENT
$T30484 = -2						; size = 1
$T30483 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >, COMDAT

; 729  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 730  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 731  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T30483[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
	add	esp, 8
	mov	BYTE PTR $T30484[ebp], al
	mov	al, BYTE PTR $T30483[ebp]
	push	eax
	mov	cl, BYTE PTR $T30484[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 24					; 00000018H

; 732  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z
_TEXT	SEGMENT
$T30487 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z PROC ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >, COMDAT

; 225  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
	add	esp, 8
	mov	BYTE PTR $T30487[ebp], al
	mov	dl, BYTE PTR $T30487[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 227  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z ENDP ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z
_TEXT	SEGMENT
$T30490 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z PROC ; std::_Allocate<Json::Value *>, COMDAT

; 37   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 38   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 39   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 40   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 41   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T30490[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T30490[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 42   : 
; 43   : 		// allocate storage for _Count elements of type _Ty
; 44   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z ENDP ; std::_Allocate<Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T30493 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z PROC ; std::_Construct<Json::Value *,Json::Value *>, COMDAT

; 51   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 52   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 53   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T30493[ebp], eax
	cmp	DWORD PTR $T30493[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR $T30493[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T30493[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv68[ebp], 0
$LN1@Construct@2:

; 54   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z ENDP ; std::_Construct<Json::Value *,Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z PROC ; std::_Destroy<Json::Value *>, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);
; 61   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z ENDP ; std::_Destroy<Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z PROC ; std::_Destroy<Json::Value * *>, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);
; 61   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z ENDP ; std::_Destroy<Json::Value * *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??$_Checked_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AU_Range_checked_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z
_TEXT	SEGMENT
$T30504 = -3						; size = 1
$T30503 = -2						; size = 1
$T30502 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z PROC ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2402 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2403 : 	return _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 2404 : 		_Iter_random(_First, _Dest), _Ptr_cat(_First, _Dest), _CHECKED_CAT(_Dest));

	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Checked_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AU_Range_checked_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 4
	mov	BYTE PTR $T30502[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	BYTE PTR $T30503[ebp], al
	mov	al, BYTE PTR $T30502[ebp]
	push	eax
	mov	cl, BYTE PTR $T30503[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30504[ebp]
	push	ecx
	call	??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 12					; 0000000cH
	mov	dl, BYTE PTR [eax]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, -4					; fffffffcH
	mov	eax, esp
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	push	eax
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2405 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ENDP ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
;	COMDAT ??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z
_TEXT	SEGMENT
$T30512 = -3						; size = 1
$T30511 = -2						; size = 1
$T30510 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z PROC ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2280 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2281 : 	return (_Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, 
; 2282 : 		_Iter_random(_First, _Dest), _Ptr_cat(_First, _Dest), _CHECKED_CAT(_Dest)));

	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Checked_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AU_Range_checked_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 4
	mov	BYTE PTR $T30510[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	BYTE PTR $T30511[ebp], al
	mov	al, BYTE PTR $T30510[ebp]
	push	eax
	mov	cl, BYTE PTR $T30511[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T30512[ebp]
	push	ecx
	call	??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 12					; 0000000cH
	mov	dl, BYTE PTR [eax]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, -4					; fffffffcH
	mov	eax, esp
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	push	eax
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2283 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ENDP ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Val$ = 32						; size = 4
??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z PROC ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>, COMDAT

; 2753 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2754 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, -4					; fffffffcH
	mov	eax, esp
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	push	eax
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	call	??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>
	add	esp, 28					; 0000001cH

; 2755 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ENDP ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>, COMDAT
; _this$ = ecx

; 129  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 130  : 		{	// construct from a related allocator (do nothing)
; 131  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z
_TEXT	SEGMENT
$T30524 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z PROC ; std::_Allocate<Json::Reader::ErrorInfo *>, COMDAT

; 37   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 38   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 39   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 40   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 41   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T30524[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T30524[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 42   : 
; 43   : 		// allocate storage for _Count elements of type _Ty
; 44   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z ENDP ; std::_Allocate<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z PROC ; std::_Destroy<Json::Reader::ErrorInfo *>, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);
; 61   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z ENDP ; std::_Destroy<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z PROC ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>, COMDAT
; _this$ = ecx

; 129  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 130  : 		{	// construct from a related allocator (do nothing)
; 131  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z
_TEXT	SEGMENT
$T30531 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z PROC ; std::_Allocate<Json::Value * *>, COMDAT

; 37   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 38   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 39   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 40   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 41   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T30531[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T30531[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 42   : 
; 43   : 		// allocate storage for _Count elements of type _Ty
; 44   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 45   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z ENDP ; std::_Allocate<Json::Value * *>
_TEXT	ENDS
PUBLIC	??_GErrorInfo@Reader@Json@@QAEPAXI@Z		; Json::Reader::ErrorInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z PROC ; std::_Destroy<Json::Reader::ErrorInfo>, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GErrorInfo@Reader@Json@@QAEPAXI@Z

; 61   : 	}

	pop	ebp
	ret	0
??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z ENDP ; std::_Destroy<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GErrorInfo@Reader@Json@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GErrorInfo@Reader@Json@@QAEPAXI@Z PROC		; Json::Reader::ErrorInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GErrorInfo@Reader@Json@@QAEPAXI@Z ENDP		; Json::Reader::ErrorInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z PROC ; std::_Checked_base<Json::Reader::ErrorInfo * *>, COMDAT

; 971  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 972  : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 973  : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 8

; 974  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ENDP ; std::_Checked_base<Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z PROC ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>, COMDAT

; 1291 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1292 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1293 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1294 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ENDP ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 123  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 124  : 	_DEBUG_RANGE(_First, _Last);
; 125  : 	_DEBUG_POINTER(_Dest);
; 126  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 127  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 128  : 	if (_Count > 0)

	je	SHORT $LN1@Uninit_cop

; 129  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop:

; 130  : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 131  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 327  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 328  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
	add	esp, 12					; 0000000cH

; 329  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 242  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 243  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@PAVErrorInfo@Reader@Json@@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Value * * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z PROC ; std::_Checked_base<Json::Value * * *>, COMDAT

; 971  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 972  : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 973  : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 8

; 974  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ENDP ; std::_Checked_base<Json::Value * * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z PROC ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>, COMDAT

; 1291 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1292 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1293 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1294 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ENDP ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >, COMDAT

; 123  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 124  : 	_DEBUG_RANGE(_First, _Last);
; 125  : 	_DEBUG_POINTER(_Dest);
; 126  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 127  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 128  : 	if (_Count > 0)

	je	SHORT $LN1@Uninit_cop@2

; 129  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@2:

; 130  : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 131  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >, COMDAT

; 327  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 328  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>
	add	esp, 12					; 0000000cH

; 329  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >, COMDAT

; 242  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 243  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@PAPAVValue@Json@@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<Json::Value * *,std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
___$ReturnUdt$ = 8					; size = 4
__It$ = 12						; size = 4
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z PROC ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 971  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 972  : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 973  : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 974  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ENDP ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z PROC ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 801  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 802  : 	typename _Iter_random_helper<
; 803  : 		iterator_traits<_Iter1>::iterator_category, 
; 804  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 805  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 806  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ENDP ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z PROC ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 1291 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1292 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1293 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1294 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ENDP ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Checked_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AU_Range_checked_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Checked_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AU_Range_checked_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z PROC ; std::_Checked_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 879  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 880  : 		typename _Checked_iterator_category<_Iter>::_Checked_cat _Cat;
; 881  : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 882  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AU_Range_checked_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ENDP ; std::_Checked_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
PUBLIC	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T30575 = -40						; size = 12
$T30571 = -15						; size = 1
$T30570 = -14						; size = 1
$T30569 = -13						; size = 1
__Result$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
___formal$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2356 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 2357 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2358 : 	_OutIt _Result = _Dest - (_Last - _First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
	push	eax
	lea	ecx, DWORD PTR __Result$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-

; 2359 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2360 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T30569[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T30570[ebp], al
	mov	cl, BYTE PTR $T30569[ebp]
	push	ecx
	mov	dl, BYTE PTR $T30570[ebp]
	push	edx
	mov	al, BYTE PTR $T30571[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
	lea	eax, DWORD PTR $T30575[ebp]
	push	eax
	call	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
	add	esp, 52					; 00000034H

; 2361 : 	return _Result;

	lea	ecx, DWORD PTR __Result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2362 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T30584 = -40						; size = 12
$T30580 = -15						; size = 1
$T30579 = -14						; size = 1
$T30578 = -13						; size = 1
__Result$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
___formal$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2237 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 2238 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2239 : 	_OutIt _Result = _Dest + (_Last - _First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
	push	eax
	lea	ecx, DWORD PTR __Result$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+

; 2240 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2241 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T30578[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T30579[ebp], al
	mov	cl, BYTE PTR $T30578[ebp]
	push	ecx
	mov	dl, BYTE PTR $T30579[ebp]
	push	edx
	mov	al, BYTE PTR $T30580[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, -4					; fffffffcH
	mov	ecx, esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
	lea	eax, DWORD PTR $T30584[ebp]
	push	eax
	call	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
	add	esp, 52					; 00000034H

; 2242 : 	return _Result;

	lea	ecx, DWORD PTR __Result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2243 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z	; Json::Reader::ErrorInfo::operator=
PUBLIC	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
PUBLIC	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
PUBLIC	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
; Function compile flags: /Odtp
;	COMDAT ??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Val$ = 32						; size = 4
??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z PROC ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>, COMDAT

; 2723 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 2724 : 	_DEBUG_RANGE(_First, _Last);
; 2725 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill
$LN2@Fill:
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
$LN3@Fill:
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Fill

; 2726 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	mov	ecx, eax
	call	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 2727 : 	}

	pop	ebp
	ret	0
??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z ENDP ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z PROC	; Json::Reader::ErrorInfo::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z ENDP	; Json::Reader::ErrorInfo::operator=
_TEXT	ENDS
PUBLIC	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*, COMDAT
; _this$ = ecx

; 368  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
_TEXT	ENDS
PUBLIC	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
; Function compile flags: /Odtp
;	COMDAT ??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++, COMDAT
; _this$ = ecx

; 378  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++

; 380  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 381  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
_TEXT	ENDS
PUBLIC	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
; Function compile flags: /Odtp
;	COMDAT ??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-, COMDAT
; _this$ = ecx

; 427  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 428  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-

; 429  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>, COMDAT
; _this$ = ecx

; 114  : 			{	// construct with copy of _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 115  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
_TEXT	ENDS
PUBLIC	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=, COMDAT
; _this$ = ecx

; 239  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 241  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Off$ = -8						; size = 4
__Block$ = -4						; size = 4
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*, COMDAT
; _this$ = ecx

; 128  : 			{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Block$[ebp], ecx

; 130  : 			size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 0
	mov	DWORD PTR __Off$[ebp], eax

; 131  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN3@operator@9
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@9:

; 132  : 			_SCL_SECURE_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Mycont))->_Myoff + ((_Mydeque *)(this->_Mycont))->_Mysize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jb	SHORT $LN2@operator@9
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@9:

; 133  : 			if (this->_Mycont->_Mapsize <= _Block)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN1@operator@9

; 134  : 				_Block -= this->_Mycont->_Mapsize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Block$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Block$[ebp], ecx
$LN1@operator@9:

; 135  : 			return ((this->_Mycont->_Map)[_Block][_Off]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 44					; 0000002cH
	mov	edx, DWORD PTR __Block$[ebp]
	add	eax, DWORD PTR [ecx+edx*4]

; 136  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++, COMDAT
; _this$ = ecx

; 145  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL);

	xor	eax, eax
	je	SHORT $LN4@operator@10
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN4@operator@10
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@10:

; 147  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Mycont))->_Myoff + ((_Mydeque *)(this->_Mycont))->_Mysize);

	xor	edx, edx
	je	SHORT $LN2@operator@10
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jb	SHORT $LN2@operator@10
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@10:

; 148  : 		++_Myoff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 149  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 150  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-, COMDAT
; _this$ = ecx

; 202  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 
; 204  :  #if _HAS_ITERATOR_DEBUGGING
; 205  : 		_Compat(_Right);
; 206  :  #else
; 207  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);

	xor	eax, eax
	je	SHORT $LN3@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@operator@11
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@operator@11
$LN1@operator@11:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@11:

; 208  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 209  : 
; 210  : 		return (_Right._Myoff <= _Myoff ? _Myoff - _Right._Myoff
; 211  : 			: -(difference_type)(_Right._Myoff - _Myoff));

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	ja	SHORT $LN6@operator@11
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN7@operator@11
$LN6@operator@11:
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+8]
	neg	ecx
	mov	DWORD PTR tv80[ebp], ecx
$LN7@operator@11:
	mov	eax, DWORD PTR tv80[ebp]

; 212  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==, COMDAT
; _this$ = ecx

; 220  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 
; 222  :  #if _HAS_ITERATOR_DEBUGGING
; 223  : 		_Compat(_Right);
; 224  : 		return (_Myoff == _Right._Myoff);
; 225  : 		}
; 226  : 
; 227  :  #elif _SECURE_SCL
; 228  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);

	xor	eax, eax
	je	SHORT $LN3@operator@12
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@operator@12
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@operator@12
$LN1@operator@12:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@12:

; 229  : 		return (_Myoff == _Right._Myoff);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+8]
	sete	dl
	mov	al, dl

; 230  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Json::Reader::ErrorInfo * *>, COMDAT

; 954  : 	{

	push	ebp
	mov	ebp, esp

; 955  : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 956  : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Json::Reader::ErrorInfo * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
PUBLIC	??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z ; std::_Iter_cat<Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z
_TEXT	SEGMENT
$T30616 = -2						; size = 1
$T30615 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z PROC ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>, COMDAT

; 3039 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3040 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T30615[ebp], al
	mov	cl, BYTE PTR $T30615[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T30616[ebp]
	push	eax
	call	??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z ; std::_Iter_cat<Json::Reader::ErrorInfo * *>
	add	esp, 8
	mov	cl, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
	add	esp, 20					; 00000014H

; 3041 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z ENDP ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Json::Value * * *>, COMDAT

; 954  : 	{

	push	ebp
	mov	ebp, esp

; 955  : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 956  : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Json::Value * * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
PUBLIC	??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z ; std::_Iter_cat<Json::Value * * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z
_TEXT	SEGMENT
$T30622 = -2						; size = 1
$T30621 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z PROC ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>, COMDAT

; 3039 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3040 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T30621[ebp], al
	mov	cl, BYTE PTR $T30621[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T30622[ebp]
	push	eax
	call	??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z ; std::_Iter_cat<Json::Value * * *>
	add	esp, 8
	mov	cl, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
	add	esp, 20					; 00000014H

; 3041 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z ENDP ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__It$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 946  : 	{

	push	ebp
	mov	ebp, esp

; 947  : 		return _It._Checked_iterator_base();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 948  : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
___formal$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>, COMDAT

; 2344 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw:

; 2345 : 	_DEBUG_RANGE(_First, _Last);
; 2346 : 	while (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Copy_backw

; 2347 : 		*--_Dest = *--_Last;

	lea	ecx, DWORD PTR __Last$[ebp]
	call	??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
	mov	ecx, eax
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
	mov	ecx, eax
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	mov	ecx, eax
	call	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
	jmp	SHORT $LN2@Copy_backw
$LN1@Copy_backw:

; 2348 : 	return (_Dest);

	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2349 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Dest$ = 36						; size = 12
___formal$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>, COMDAT

; 2225 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2226 : 	_DEBUG_RANGE(_First, _Last);
; 2227 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt
$LN2@Copy_opt:
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
$LN3@Copy_opt:
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Copy_opt

; 2228 : 		*_Dest = *_First;

	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	mov	ecx, eax
	call	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
	jmp	SHORT $LN2@Copy_opt
$LN1@Copy_opt:

; 2229 : 	return (_Dest);

	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2230 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\deque
;	COMDAT ?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__Base$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 		_Deque_iterator<_Ty, _Alloc, false> _Base(this->_Myoff, this->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	lea	ecx, DWORD PTR __Base$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>

; 348  : 		return _Base;

	lea	ecx, DWORD PTR __Base$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 349  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
; Function compile flags: /Odtp
;	COMDAT ??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--, COMDAT
; _this$ = ecx

; 391  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 		--*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--

; 393  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 394  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>, COMDAT
; _this$ = ecx

; 364  : 		{	// construct with offset _Off in *_Pdeque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>

; 365  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--, COMDAT
; _this$ = ecx

; 160  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Mycont != NULL);

	xor	eax, eax
	je	SHORT $LN4@operator@13
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN4@operator@13
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@13:

; 162  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Myoff > ((_Mydeque *)(this->_Mycont))->_Myoff);

	xor	edx, edx
	je	SHORT $LN2@operator@13
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR [ecx+12]
	ja	SHORT $LN2@operator@13
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@13:

; 163  : 		--_Myoff;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 164  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 165  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>, COMDAT
; _this$ = ecx

; 117  : 		_Deque_const_iterator(size_type _Off, const _Container_base *_Pdeque)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ

; 118  : 			{	// construct with offset _Off in *_Pdeque
; 119  : 			_SCL_SECURE_TRAITS_VALIDATE(
; 120  : 				_Pdeque != NULL &&
; 121  : 				((_Mydeque *)_Pdeque)->_Myoff <= _Off && _Off <= (((_Mydeque *)_Pdeque)->_Myoff + ((_Mydeque *)_Pdeque)->_Mysize));

	xor	eax, eax
	je	SHORT $LN3@Deque_cons@3
	cmp	DWORD PTR __Pdeque$[ebp], 0
	je	SHORT $LN1@Deque_cons@3
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR __Off$[ebp]
	ja	SHORT $LN1@Deque_cons@3
	mov	eax, DWORD PTR __Pdeque$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Pdeque$[ebp]
	add	ecx, DWORD PTR [edx+16]
	cmp	DWORD PTR __Off$[ebp], ecx
	jbe	SHORT $LN3@Deque_cons@3
$LN1@Deque_cons@3:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@Deque_cons@3:

; 122  : 				
; 123  : 			this->_Mycont = (const _Mydeque *)_Pdeque;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 124  : 			_Myoff = _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [edx+8], eax

; 125  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBU_Container_base@1@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z PROC ; std::_Iter_cat<Json::Reader::ErrorInfo * *>, COMDAT

; 760  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 761  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 762  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 763  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z ENDP ; std::_Iter_cat<Json::Reader::ErrorInfo * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T30643 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>, COMDAT

; 2817 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2818 : 		// if _OutIt is checked, this will ensure we have enough space
; 2819 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 2820 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 2821 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T30643[ebp], al
	mov	cl, BYTE PTR $T30643[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
	add	esp, 16					; 00000010H

; 2822 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z PROC ; std::_Iter_cat<Json::Value * * *>, COMDAT

; 760  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 761  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 762  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 763  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z ENDP ; std::_Iter_cat<Json::Value * * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T30648 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>, COMDAT

; 2817 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2818 : 		// if _OutIt is checked, this will ensure we have enough space
; 2819 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 2820 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 2821 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T30648[ebp], al
	mov	cl, BYTE PTR $T30648[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
	add	esp, 16					; 00000010H

; 2822 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>, COMDAT

; 2763 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 2764 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n

; 2765 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:

; 2766 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>, COMDAT

; 2763 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 2764 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n@2
$LN2@Fill_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n@2

; 2765 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n@2
$LN4@Fill_n@2:

; 2766 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
_TEXT	ENDS
END
