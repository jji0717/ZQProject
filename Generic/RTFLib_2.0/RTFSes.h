// definition file for rtfSes class
// encapsulates activity of converting single media stream into set of trick files
//

#ifndef _RTF_SES_H
#define _RTF_SES_H 1

// constants ****************************************************************************

#define RTF_SES_MAX_BITRATEPCRS			8
#define RTF_SES_MAX_FRAMERATEPICS		64		

// typedefs *****************************************************************************

typedef enum _RTF_SES_STATE
{
	RTF_SES_STATE_INVALID = 0,

	RTF_SES_STATE_IDLE,
	RTF_SES_STATE_ACTIVE,

} RTF_SES_STATE;

// pre-constructor sizing function ******************************************************

// get the amount of storage that will be consumed by a call to rtfSysConstructor (below)
unsigned long rtfSesGetStorageRequirement( unsigned long maxInputBuffers, unsigned long maxInputBufferBytes,
										   unsigned long maxGroupsPerSequence, unsigned long maxPicturesPerGroup );

// constructor / destructor *************************************************************

RTF_RESULT rtfSesConstructor( RTF_SES_HANDLE *pHandle,
							  unsigned long maxInputBuffers, unsigned long maxGroupsPerSequence,
							  unsigned long maxPicturesPerGroup, unsigned long maxInputBufferBytes );

RTF_RESULT rtfSesDestructor( RTF_SES_HANDLE handle );

// accessor methods *********************************************************************

// get the application-supplied session handle
RTF_RESULT rtfSesGetAppHandle( RTF_SES_HANDLE handle, RTF_APP_SESSION_HANDLE *phAppSession );

// get the state of the session object
RTF_RESULT rtfSesGetState( RTF_SES_HANDLE handle, RTF_SES_STATE *pState );

// get the input stream profile
RTF_RESULT rtfSesGetStreamProfile( RTF_SES_HANDLE handle, RTF_STREAM_PROFILE **ppProfile );

// get the number of outputs being generated by the session
RTF_RESULT rtfSesGetOutputCount( RTF_SES_HANDLE handle, unsigned long *pOutputCount );

// get the input bit rate
RTF_RESULT rtfSesGetInputBitrate( RTF_SES_HANDLE handle, unsigned long *pBitsPerSecond );

// get the output bit rate
RTF_RESULT rtfSesGetOutputBitrate( RTF_SES_HANDLE handle, unsigned long *pBitsPerSecond );

// get info on the current group
RTF_RESULT rtfSesGetCurrentGopInfo( RTF_SES_HANDLE handle, RTF_GOP_HANDLE *phGop, int *pGopCount );

// get info on the current picture
RTF_RESULT rtfSesGetCurrentPicInfo( RTF_SES_HANDLE handle, RTF_PIC_HANDLE *phPic, int *pPicCount );

// get the current session elapsed time in clock ticks
RTF_RESULT rtfSesGetElapsedTime( RTF_SES_HANDLE handle, RTF_RUNTIME *pElapsedTime );

// get the handle of the parsing window
RTF_RESULT rtfSesGetWindow( RTF_SES_HANDLE handle, RTF_WIN_HANDLE *phWin );

// get the packet(s) currently in the focus of the window
RTF_RESULT rtfSesGetWindowPackets( RTF_SES_HANDLE handle, RTF_PKT_HANDLE *phFirstPkt,
								   RTF_PKT_HANDLE *phNextPkt );

// get the current PES object
RTF_RESULT rtfSesGetPes( RTF_SES_HANDLE handle, RTF_PES_HANDLE *phPes );

// get the current sequence handle
RTF_RESULT rtfSesGetSequence( RTF_SES_HANDLE handle, RTF_SEQ_HANDLE *phSeq );

// get the indexer handle
RTF_RESULT rtfSesGetIndexer( RTF_SES_HANDLE handle, RTF_IDX_HANDLE *phIdx );

// get the condtional access system handle
RTF_RESULT rtfSesGetCASystem( RTF_SES_HANDLE handle, RTF_CAS_HANDLE *phCas );

// get the video codec handle
RTF_RESULT rtfSesGetVideoCodec( RTF_SES_HANDLE handle, RTF_VCD_HANDLE *phVcd );

// get the number of input packets processed by the session so far
RTF_RESULT rtfSesGetProgress( RTF_SES_HANDLE handle, unsigned long *pProcessedPacketCount );

// get the total number of pictures processed by the session so far
RTF_RESULT rtfSesGetTotalPicCount( RTF_SES_HANDLE handle, unsigned long *pTotalPicCount );

// get the total number of groups processed by the session so far
RTF_RESULT rtfSesGetTotalGopCount( RTF_SES_HANDLE handle, unsigned long *pTotalGopCount );

// get the size of the input file (only known when processing offline)
RTF_RESULT rtfSesGetInputFileBytes( RTF_SES_HANDLE handle, INT64 *pInputFileBytes );

// get the state of the splicing enabled flag
RTF_RESULT rtfSesGetSplicingEnabled( RTF_SES_HANDLE handle, BOOL *pSplicingEnabled );

// get the handles of the PSI objects
RTF_RESULT rtfSesGetPSI( RTF_SES_HANDLE handle, RTF_PAT_HANDLE *phPat,
						 RTF_CAT_HANDLE *phCat, RTF_PMT_HANDLE *phPmt );

// get the state of the "insert DSM trick mode flag" fixup switch
RTF_RESULT rtfSesGetInsertDSM( RTF_SES_HANDLE handle, BOOL *pInsertDSM );

// set the video frame rate code
RTF_RESULT rtfSesSetFrameRateCode( RTF_SES_HANDLE handle, int value );

// get the sequence boundary option
RTF_RESULT rtfSesGetSeqBoundOption( RTF_SES_HANDLE handle, RTF_SEQBOUND_OPTION *pSeqBoundOption );

// service methods **********************************************************************

// open a trick file generation session
RTF_RESULT rtfSesOpen( RTF_SES_HANDLE handle,
					   RTF_APP_SESSION_HANDLE hAppSession,
					   RTF_APP_FILE_HANDLE hAppInputFile,
					   char *pInputFileName, INT64 inputFileBytes,
					   RTF_WARNING_COUNTS *pThresholds,
					   RTF_INDEX_MODE indexMode, RTF_INDEX_TYPE indexType,
					   RTF_INDEX_OPTION indexOption, RTF_SES_ERROR_NOTIFIER notifier,
					   RTF_BUFREL_FUNCTION inputBufferReleaseCallback,
					   int numSettings, RTF_APP_OUTPUT_SETTINGS settings[] );

// close a trick file generation session
RTF_RESULT rtfSesClose( RTF_SES_HANDLE handle );

// call the session error notifier function
RTF_RESULT rtfSesErrorNotifier( RTF_SES_HANDLE handle, RTF_MSG msg, RTF_OBJ_HANDLE hObj );

// submit a buffer of input for processing (buffer is held by trickfile library until explicitly released)
RTF_RESULT rtfSesProcessInput( RTF_SES_HANDLE handle,
							   RTF_APP_SESSION_HANDLE hAppSession,
							   RTF_APP_FILE_HANDLE hAppFile,
							   RTF_APP_BUFFER_HANDLE hAppBuffer,
							   unsigned char *pBuffer, unsigned long bytes );

// start a new PES packet
RTF_RESULT rtfSesStartPes( RTF_SES_HANDLE handle );

// flush all sequences, groups, and pictures in progress
RTF_RESULT rtfSesFlush( RTF_SES_HANDLE handle );

// recycle the indicated video picture
RTF_RESULT rtfSesRecyclePic( RTF_SES_HANDLE handle, RTF_PIC_HANDLE hPic );

// end the current picture
RTF_RESULT rtfSesEndPic( RTF_SES_HANDLE handle );

// start a new picture
RTF_RESULT rtfSesStartPic( RTF_SES_HANDLE handle );

// recycle the indicated video group
RTF_RESULT rtfSesRecycleGop( RTF_SES_HANDLE handle, RTF_GOP_HANDLE hGop );

// end the current group of pictures
RTF_RESULT rtfSesEndGop( RTF_SES_HANDLE handle );

// start a new group of pictures
RTF_RESULT rtfSesStartGop( RTF_SES_HANDLE handle, BOOL isVirtual );

// recycle the indicated video sequence
RTF_RESULT rtfSesRecycleSeq( RTF_SES_HANDLE handle, RTF_SEQ_HANDLE hSeq );

// end the current video sequence
RTF_RESULT rtfSesEndSeq( RTF_SES_HANDLE handle );

// start a new video sequence - return the handle
RTF_RESULT rtfSesStartSeq( RTF_SES_HANDLE handle, BOOL isVirtual );

// an input buffer has been unmapped. release it back to the input and remove the reference
RTF_RESULT rtfSesInputBufferUnmapped( RTF_SES_HANDLE handle, RTF_BUF_HANDLE hBuffer );

// log the output settings for a particular output of a session
RTF_RESULT rtfSesLogOutputSettings( RTF_SES_HANDLE handle, int outputNumber );

// log the output settings for all of the outputs of a session
RTF_RESULT rtfSesLogAllOutputSettings( RTF_SES_HANDLE handle );

// check to see if a message should be logged or suppressed
RTF_RESULT rtfSesCheckMessageSuppression( RTF_SES_HANDLE handle, RTF_MSG msg, BOOL *pSuppress );

// get the augmentation info for a session
RTF_RESULT rtfSesGetAugmentationInfo( RTF_SES_HANDLE handle,
									  int augmentationPidCount,
									  unsigned short *pAugmentationPids,
									  RTF_RDINPUT_FUNCTION readInputCallback,
									  int *pAugmentedBitRate, int *pOriginalBitRate );

// check to see if a packet is an augmentation packet
RTF_RESULT rtfSesGetAugmentationPktStatus( RTF_SES_HANDLE handle, unsigned char *pPacket, BOOL *pIsAugmentation );

// check to see if the session is a zombie - shut it down if it is
RTF_RESULT rtfSesZombieCheck( RTF_SES_HANDLE handle, unsigned long currentTime, int threshold );

#ifdef _DEBUG
// debug helper function - log the state of the session
RTF_RESULT rtfSesLogState( RTF_SES_HANDLE handle );
#endif

// atypical error handling function *****************************************************

// evaluate a warning. return the following:
// < 0 - this is an error; log it and call the error notifier
// 0 - this is a warning; log it, but don't call the error notifier
// > 0 - this is a suppressed warning; ignore it
int rtfSesWarningEval( RTF_SES_HANDLE handle, RTF_MSG msg );
RTF_RESULT rtfSesPesPTS( RTF_SES_HANDLE handle, UINT64 pts, BOOL *scanComplete);
#endif // #ifndef _RTF_SES_H
